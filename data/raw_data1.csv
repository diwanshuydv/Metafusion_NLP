database_id,schema,mongo_query,natural_language_query
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.traffic_events.find({}); ,"Retrieve all recorded traffic events, including details about each incident without applying any filters or conditions."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.traffic_events.find({}); ,"List every traffic event documented, encompassing all available data regarding each occurrence without any restrictions or selections."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""Junction-001"" }); ","Retrieve all records of traffic events occurring at the traffic junction identified as ""Junction-001."" This search is specifically focused on gathering data related to this particular intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""Junction-001"" }); ","List all traffic event records associated with the intersection labeled ""Junction-001,"" obtaining detailed information pertinent to events recorded at this location."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ",Retrieve all records of traffic events where the event severity is classified as critical.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ",List all traffic events that have been identified with a critical severity level.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"" }); ","Retrieve all records of traffic events where the event type is categorized as ""Speeding."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"" }); ","Select and display information regarding traffic incidents specifically identified as ""Speeding"" in the event type."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $gt: 80 } }); ","Retrieve records of traffic events where the speed of vehicles exceeds 80 units, capturing only those instances with this criterion applied."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $gt: 80 } }); ","Identify instances of traffic events that involve vehicles traveling faster than 80 units, ensuring that only relevant records meeting this speed threshold are considered."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": { $regex: /^AB12CD\d{4}$/ } }); ","Retrieve records of vehicles, specifically focusing on entries where the vehicle number plate matches a specific pattern that begins with ""AB12CD"" followed by four digits."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": { $regex: /^AB12CD\d{4}$/ } }); ","Identify all instances of vehicles with number plates that conform to the format starting with ""AB12CD"" followed by a sequence of four numeric characters."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""Camera-123"" }).limit(10); ","Retrieve a maximum of ten records related to surveillance events captured by the unit identified as ""Camera-123."" These records should specifically showcase incidents associated with that camera."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""Camera-123"" }).limit(10); ","Select up to ten event records that pertain to the monitoring unit labeled ""Camera-123,"" focusing solely on those documented events linked to this particular camera."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); ","Retrieve all traffic event records where the timestamp of the vehicles involved falls between January 1, 2023, and January 31, 2023."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); ","Find traffic event records that include vehicles with timestamps within the range of January 1, 2023, to January 31, 2023."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}).sort({ ""response.event.vehicles.timestamp"": -1 }).limit(5); ","Retrieve the most recent five traffic events, sorted by the timestamp of the associated vehicles in descending order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}).sort({ ""response.event.vehicles.timestamp"": -1 }).limit(5); ","Select the latest five traffic events based on vehicle timestamps, ensuring the results are arranged in reverse chronological order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $exists: true, $ne: [] } }); ","Retrieve all records that include vehicles with specified geographical locations recorded in the response events, ensuring that these locations are neither absent nor empty."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $exists: true, $ne: [] } }); ",Select all entries where the vehicle details in the event responses demonstrate that location data exists and is not an empty array.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $lte: 60 }}).count(); ",Count the total number of traffic events where the recorded speed of vehicles is 60 or less.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $lte: 60 }}).count(); ",Determine how many traffic incidents involve vehicles traveling at a speed of no more than 60.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ $or: [ { ""response.event.type"": ""RedLightViolation"" }, { ""response.event.type"": ""IllegalParking"" } ] }); ",Retrieve records of traffic events that are classified as either a Red Light Violation or Illegal Parking. The results will provide information on events that meet either of these criteria without further limitations.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ $or: [ { ""response.event.type"": ""RedLightViolation"" }, { ""response.event.type"": ""IllegalParking"" } ] }); ",Select entries related to traffic violations specifically involving Red Light Infractions or Illegal Parking incidents. The output will consist of all relevant event data that falls under these two types of offenses.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $size: 1 } }); ","Retrieve records where there is exactly one vehicle involved in the traffic event, focusing on the details related to the identified vehicles."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $size: 1 } }); ","Select entries that contain a single vehicle associated with traffic events, emphasizing the information pertinent to the specific vehicles present."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""Junction-002"", ""response.event.severity"": ""High"" }).sort({ ""response.event.vehicles.timestamp"": 1 }); ","Retrieve all events related to traffic at the junction identified as ""Junction-002"" that have a severity classified as ""High."" The events should be ordered in ascending chronological order according to the timestamps of the vehicles involved in these incidents."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""Junction-002"", ""response.event.severity"": ""High"" }).sort({ ""response.event.vehicles.timestamp"": 1 }); ","Gather records of traffic incidents occurring at ""Junction-002"" that are rated as ""High"" in severity, and sort these records by the timestamps of the vehicles in increasing order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""Camera-001"", ""response.event.vehicles.speed"": { $gte: 70 } }).project({ ""response.event.vehicles.number_plate"": 1, ""response.event.vehicles.speed"": 1 }); ","Retrieve the number plates and speeds of vehicles recorded by the surveillance unit identified as ""Camera-001"" that were traveling at speeds of 70 or more. The output should include only the relevant details for the specified vehicles."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""Camera-001"", ""response.event.vehicles.speed"": { $gte: 70 } }).project({ ""response.event.vehicles.number_plate"": 1, ""response.event.vehicles.speed"": 1 }); ","List the number plates along with the speeds of vehicles detected by ""Camera-001"" which exhibited speeds equal to or greater than 70. Ensure that only the necessary vehicle details are included in the results."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""IllegalParking"" }).limit(5).sort({ ""response.event.vehicles.timestamp"": -1 }); ","Retrieve the most recent five records of traffic events classified as illegal parking, sorted in descending order based on the timestamp of the involved vehicles."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""IllegalParking"" }).limit(5).sort({ ""response.event.vehicles.timestamp"": -1 }); ","List a maximum of five recent incidents of illegal parking, organized by the timestamps of the vehicles in descending order."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gt: 100 } } } }); ","Retrieve all records of traffic events where at least one vehicle has been recorded traveling at a speed greater than 100 units, indicating instances of excessive speeding."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gt: 100 } } } }); ","Gather all instances of traffic events that contain vehicles detected exceeding a speed of 100 units, highlighting cases of potential fast driving violations."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.severity"": ""Critical"" }); ","Retrieve all traffic events categorized as ""Speeding"" with a severity level of ""Critical."" The results will include every occurrence that matches these specifications."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""response.event.severity"": ""Critical"" }); ","List all instances of ""Speeding"" events that are marked as ""Critical"" in severity. The output should encompass all relevant records that meet these criteria."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""Junction-003"", ""response.event.vehicles.location"": { $gte: [40.7128, -74.0060], $lte: [40.7120, -74.0050] } }); ","Select records related to traffic events occurring at the specified junction identified as ""Junction-003,"" where the locations of the vehicles involved are within the geographic bounds defined by the coordinates ranging from latitude 40.7128 to 40.7120 and longitude -74.0060 to -74.0050."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""Junction-003"", ""response.event.vehicles.location"": { $gte: [40.7128, -74.0060], $lte: [40.7120, -74.0050] } }); ","Find traffic event entries for ""Junction-003,"" ensuring that the vehicles' locations fall between the latitude coordinates of 40.7128 and 40.7120, as well as the longitude boundaries of -74.0060 and -74.0050."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the severity levels and types of traffic events that occurred at specific traffic junctions, including a breakdown of the involved vehicles with their corresponding speeds and timestamps, and ensure the results reflect events marked as critical or high. The results should be grouped by intersection and sorted to prioritize the most severe incidences."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the classifications of traffic events categorized by severity and type at designated intersections, detailing the vehicles involved along with their speeds and timestamps, focusing on events identified as critical or high. Organize the output by intersection and arrange the entries to highlight the most severe occurrences."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""identifier.intersection_id"": ""J123"" }); ","Retrieve records of traffic events involving a specific junction identified by the identifier ""J123"". The results should include all details associated with those events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""identifier.intersection_id"": ""J123"" }); ","List all traffic events that are associated with the intersection identified as ""J123"", displaying all relevant event information for each occurrence."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""High"" }); ","Select records of traffic events that have a severity level categorized as ""High."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""High"" }); ","Gather all instances of traffic events where the severity is classified as ""High."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""identifier.camera_id"": ""C456"" }); ","Retrieve all records of traffic events that are classified as ""Speeding,"" specifically from the surveillance unit identified as ""C456."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""Speeding"", ""identifier.camera_id"": ""C456"" }); ","Find and display entries related to ""Speeding"" traffic events captured by the camera designated as ""C456."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $gt: 100 } }); ",Retrieve records of traffic events where the speed of vehicles exceeds 100 units. This includes all relevant details about the vehicles involved in these events.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $gt: 100 } }); ","Identify instances of traffic events where vehicles registered speeds greater than 100 units, encompassing all pertinent information concerning the vehicles in those incidents."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": ""AB12CD1234"" }); ","Retrieve records of traffic events where the vehicle with the registration number ""AB12CD1234"" is involved."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": ""AB12CD1234"" }); ","List all traffic events that include a vehicle identified by the number plate ""AB12CD1234""."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z"") } }); ","Retrieve all records of traffic events where the timestamp of vehicles involved is on or after January 1, 2023."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01T00:00:00Z"") } }); ","Select traffic event entries that document vehicle timestamps from January 1, 2023, onward."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""J123"", ""response.event.type"": ""RedLightViolation"" }); ","Retrieve records of traffic events where the identified intersection is ""J123"" and the event type is categorized as a ""RedLightViolation."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""J123"", ""response.event.type"": ""RedLightViolation"" }); ","Select data on traffic incidents occurring at intersection ""J123"" specifically focusing on events classified as ""RedLightViolation."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $size: 3 } }); ",Retrieve records where exactly three vehicles are associated with traffic events.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $size: 3 } }); ",Select entries that have a total of three vehicles linked to traffic event responses.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $lt: 50 } } } }); ","Retrieve records of traffic events where at least one vehicle has a speed less than 50, indicating lower than average speed violations. The results will include all instances of such conditions, emphasizing vehicles involved in these events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $lt: 50 } } } }); ","Gather all traffic event records that feature vehicles exhibiting speeds below 50, highlighting cases of potentially overregulated movement. Each instance should reflect the details pertaining to these violations involving the vehicles."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }).sort({ ""response.event.vehicles.timestamp"": -1 }); ","Retrieve records of traffic events that have been classified as having a critical severity level, and arrange these records in descending order based on the timestamps of the associated vehicle events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Critical"" }).sort({ ""response.event.vehicles.timestamp"": -1 }); ","Select entries marking severe traffic incidents deemed critical, ensuring the output is sorted in reverse chronological order according to the timestamps of the vehicles involved."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""C789"" }).limit(10); ","Retrieve a maximum of ten records associated with the surveillance unit identified by ""C789,"" focusing on traffic events documented by this specific camera."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""C789"" }).limit(10); ","Select up to ten entries pertaining to the traffic events captured by the camera designated as ""C789,"" ensuring only those related to this surveillance unit are included in the results."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": { $in: [""Speeding"", ""IllegalParking""] } }); ","Retrieve all records of traffic events where the event type is either ""Speeding"" or ""IllegalParking."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": { $in: [""Speeding"", ""IllegalParking""] } }); ","List all entries of traffic incidents that involve event types classified as ""Speeding"" or ""IllegalParking."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $lt: new Date() } }).sort({ ""response.event.vehicles.timestamp"": 1 }); ","Retrieve all traffic event records where the timestamp of vehicle events is earlier than the current date, and arrange the results in chronological order based on the vehicle event timestamps."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $lt: new Date() } }).sort({ ""response.event.vehicles.timestamp"": 1 }); ","Select records of vehicle events that occurred before now, organizing the findings in ascending order according to the timestamps of these events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-73.935242, 40.730610], [-73.985242, 40.750610]] } } }); ",Retrieve all traffic events where the locations of vehicles are found within a specified rectangular area defined by two sets of geographic coordinates.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-73.935242, 40.730610], [-73.985242, 40.750610]] } } }); ",Gather traffic event records that include vehicles situated within a designated rectangular zone established by specified longitude and latitude boundaries.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": { $exists: true } }).count(); ",Count the number of traffic events that have associated surveillance unit identifiers present in the data.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": { $exists: true } }).count(); ",Determine the total number of recorded traffic incidents where there is an indication of a surveillance unit involved.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $exists: true, $ne: [] } }); ",Retrieve all records where the vehicles involved in the traffic incidents are recorded and not empty. This includes any events that have at least one vehicle entry in their details.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $exists: true, $ne: [] } }); ","Identify all entries that document traffic events featuring vehicles, ensuring that the vehicle information is present and not null or vacant."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { number_plate: { $regex: /^AB/ } } } }); ","Fetch the records of traffic events where at least one vehicle exhibits a number plate that starts with the letters ""AB."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { number_plate: { $regex: /^AB/ } } } }); ","Collect the data on traffic events that contain vehicles with a number plate beginning with ""AB."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Low"" }).skip(5).limit(5); ","Retrieve five records of traffic events where the severity of the incident is classified as low, skipping the first five entries in the results."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""Low"" }).skip(5).limit(5); ","Select five instances of low-severity traffic events, omitting the first five records, to analyze occurrences in this category."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gte: 80, $lte: 120 } } } }).sort({ ""response.event.vehicles.speed"": -1 }); ","Select the records where at least one vehicle's speed is between 80 and 120, and arrange these records in descending order based on the speed of the vehicles involved."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles"": { $elemMatch: { speed: { $gte: 80, $lte: 120 } } } }).sort({ ""response.event.vehicles.speed"": -1 }); ","Identify entries that contain vehicles traveling at speeds ranging from 80 to 120, then sort the findings in descending order according to the vehicle speeds present in the records."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}).project({ identifier: 1, ""response.event.type"": 1 }).limit(15); ","Retrieve the identifiers along with the types of events recorded in traffic incidents, limiting the results to the first 15 entries."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({}).project({ identifier: 1, ""response.event.type"": 1 }).limit(15); ","List the identifiers and the specific event types associated with traffic events, displaying a maximum of 15 records in total."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve information about traffic events that occurred at a specific traffic junction and were captured by a designated surveillance unit, focusing on details such as the types and severities of events, along with the vehicles' number plates, speeds, timestamps, and locations. The results should be categorized based on the intersection and camera identifiers, providing a comprehensive report of the incidents recorded."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Gather data related to traffic incidents captured by a particular camera at a specified intersection, emphasizing event types, severities, and vehicle-related information such as number plates, speeds, timestamps, and locations. Ensure that the results are organized according to the identifiers of the traffic junction and the surveillance unit involved."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ",Retrieve all instances of traffic events categorized as having critical severity.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""response.event.severity"": ""Critical"" }); ",Identify each traffic event where the severity level is marked as critical.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM123"" }); ","Retrieve all records of traffic events captured by the surveillance unit identified as ""CAM123."" This query focuses on acquiring data regarding incidents associated with this specific camera."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.camera_id"": ""CAM123"" }); ","List all traffic event records related to the camera labeled ""CAM123."" The results should encompass all details concerning incidents detected by this particular surveillance unit."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""RedLightViolation"", ""response.event.vehicles.speed"": { $gt: 60 } }); ","Retrieve instances of traffic events classified as a Red Light Violation, where the speed of the involved vehicles exceeds 60 units. The results should focus solely on these events without any further grouping or sorting specified."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""RedLightViolation"", ""response.event.vehicles.speed"": { $gt: 60 } }); ","Identify traffic incidents categorized as Red Light Violations that involve vehicles traveling at speeds greater than 60 units, ensuring that only these specific records are included in the results."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": ""AB12CD1234"" }); ","Retrieve records of traffic events where the vehicle with the number plate ""AB12CD1234"" is involved. This search will return all relevant details associated with this specific vehicle."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.number_plate"": ""AB12CD1234"" }); ","Find all instances of traffic events related to the vehicle identified by the number plate ""AB12CD1234"". The result will include comprehensive information regarding the incidents in which this vehicle is recorded."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.intersection_id"", totalViolations: { $sum: 1 } } } ]); ","Count the total incidents of speeding events recorded at each traffic junction, ensuring only those events classified as ""Speeding"" are considered in the calculation."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.intersection_id"", totalViolations: { $sum: 1 } } } ]); ","Aggregate the number of speeding violations for each intersection, focusing exclusively on events categorized under ""Speeding."""
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Extract the average speed of vehicles identified by their registration numbers from traffic event data, where each vehicle's record is unwound for analysis. The results should be grouped by the vehicle's registration number, displaying the calculated average speed for each unique identifier."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Calculate the mean speed of vehicles, identified by their number plates, from the traffic event logs after flattening the vehicle records. The output should aggregate the average speed values corresponding to each unique vehicle identifier."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""High"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Retrieve the count of high-severity traffic events, organized by traffic junction identifiers, with the results sorted in descending order based on the number of events recorded."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""High"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Count the occurrences of high-severity traffic incidents at different traffic junctions, grouping the results by intersection identifiers and arranging them from highest to lowest event count."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"" } }, { $project: { number_of_vehicles: { $size: ""$response.event.vehicles"" }, timestamp: 1 } } ]); ","Retrieve the timestamps and count of vehicles involved in events categorized as ""IllegalParking"", with the number of vehicles being calculated from the event details."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""IllegalParking"" } }, { $project: { number_of_vehicles: { $size: ""$response.event.vehicles"" }, timestamp: 1 } } ]); ","List the timestamps along with the total number of vehicles from incidents classified as ""IllegalParking"", where the vehicle count is derived from the event specifics."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Retrieve records of vehicles involved in traffic events that occurred between January 1, 2023, and December 31, 2023. These records should include details on each vehicle's timestamp during the events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Extract data related to vehicles associated with traffic incidents that took place within the time frame of January 1, 2023, to December 31, 2023, focusing specifically on the timestamps of these vehicles during the events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gte: 50 } } }, { $project: { number_plate: ""$response.event.vehicles.number_plate"", speed: ""$response.event.vehicles.speed"" } } ]); ","Retrieve the license plate numbers and speeds of vehicles recorded in traffic events where the speed is 50 or greater, ensuring each vehicle entry is individually listed from the event details."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.speed"": { $gte: 50 } } }, { $project: { number_plate: ""$response.event.vehicles.number_plate"", speed: ""$response.event.vehicles.speed"" } } ]); ","List the registration numbers and speed readings of all vehicles involved in traffic incidents where their speed was at least 50, with each vehicle's information displayed separately from the events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.intersection_id"": ""INT456"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalEvents: { $sum: 1 } } } ]); ","Select the unique number plates of vehicles involved in traffic events at the specified intersection, along with the count of such events for each vehicle, ensuring only records relevant to the intersection with identifier ""INT456"" are included. The data will be aggregated to show how many times each number plate has appeared in these events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.intersection_id"": ""INT456"" } }, { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalEvents: { $sum: 1 } } } ]); ","Identify all distinct vehicle number plates linked to traffic incidents at the intersection identified as ""INT456,"" along with a tally of occurrences for each plate, emphasizing only the relevant events associated with that intersection. The results will be grouped to summarize the counts of events per number plate."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT001"" }).sort({ ""response.event.vehicles.speed"": -1 }).limit(1); ","Retrieve the traffic event with the highest vehicle speed that occurred at the specified traffic junction identified as ""INT001"". Results should be ordered by vehicle speed in descending manner, displaying only the top record."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""INT001"" }).sort({ ""response.event.vehicles.speed"": -1 }).limit(1); ","Identify the incident involving vehicles that recorded the maximum speed at the traffic junction labeled ""INT001"". The results must be arranged in descending order based on the vehicles' speed, limiting the output to a single entry."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.intersection_id"", maxSpeed: { $max: { $arrayElemAt: [""$response.event.vehicles.speed"", 0] } } } } ]); ","Identify the highest speed recorded for vehicles involved in speeding incidents, grouped by each traffic junction's identifier. This analysis should only consider events categorized as ""Speeding"" and aggregate the maximum speed from the vehicles' data for each junction."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.intersection_id"", maxSpeed: { $max: { $arrayElemAt: [""$response.event.vehicles.speed"", 0] } } } } ]); ","Collect the maximum vehicle speed from cases of speeding, organized by the identification of different traffic intersections. The results will focus exclusively on event types labeled as ""Speeding"" and will compute the top speed for each intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-73.97, 40.77], [-73.90, 40.79]] } } }); ","Retrieve the records of traffic events where the location of the vehicles involved falls within a specified rectangular geographical area defined by coordinates, specifically between longitudes -73.97 and -73.90, and latitudes 40.77 and 40.79."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-73.97, 40.77], [-73.90, 40.79]] } } }); ","Identify all traffic event records that include vehicles situated within a defined rectangular geographic boundary, marked by the longitude coordinates ranging from -73.97 to -73.90 and latitude coordinates between 40.77 and 40.79."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.camera_id"", count: { $sum: 1 } } }, { $sort: { count: 1 } } ]); ","Retrieve the counts of traffic events categorized as having a low severity, grouped by the identification of the surveillance unit that recorded them, with the results organized in ascending order based on the event count."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.camera_id"", count: { $sum: 1 } } }, { $sort: { count: 1 } } ]); ","Count the number of traffic incidents classified as low severity for each specific surveillance camera, presenting the findings sorted from the least to the most frequent occurrences."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalIncidents: { $sum: 1 }, firstIncident: { $min: ""$response.event.vehicles.timestamp"" } } } ]); ","Gather the unique vehicle number plates involved in traffic incidents, along with the total number of occurrences for each plate and the date of the first incident recorded for each vehicle. This information should be compiled from all events in which the vehicles were noted."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalIncidents: { $sum: 1 }, firstIncident: { $min: ""$response.event.vehicles.timestamp"" } } } ]); ","Compile a list of vehicle number plates that have been reported for traffic violations, counting the total incidents associated with each plate and noting the earliest date of occurrence for each vehicle. All data should derive from the recorded events pertaining to those vehicles."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.camera_id"": ""CAM456"" } }, { $lookup: { from: ""traffic_events"", localField: ""identifier.intersection_id"", foreignField: ""identifier.intersection_id"", as: ""intersection_data"" } } ]); ","Retrieve records of traffic events associated with a specific surveillance unit identified as ""CAM456,"" and include related data where the intersection ID matches in a collection of traffic events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.camera_id"": ""CAM456"" } }, { $lookup: { from: ""traffic_events"", localField: ""identifier.intersection_id"", foreignField: ""identifier.intersection_id"", as: ""intersection_data"" } } ]); ","Gather instances of traffic events linked to the surveillance camera labeled ""CAM456,"" while also incorporating associated information from other traffic events that share the same intersection identifier."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the identifiers and severity levels of traffic events involving vehicles at specified intersections or monitored by particular cameras, ensuring only records of critical or high severity events are included. The output should be organized in ascending order by timestamp, showcasing the most recent incidents first."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the identifiers and severity ratings of significant traffic events that occurred at designated junctions or captured by certain surveillance cameras, filtering for events categorized as critical or high severity. Arrange the results in ascending timestamp order to highlight the latest occurrences."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""response.event.severity"": ""High"" }); ",Retrieve the records of traffic events where the severity of the reported issue is classified as high. Each incident should detail the relevant traffic junction and surveillance unit involved in the event.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.find({ ""response.event.severity"": ""High"" }); ","Gather entries from traffic events that are marked with a high severity level, including information about the specific intersections and cameras monitoring the incidents."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""A12"" }).sort({ ""response.event.vehicles.speed"": -1 }); ","Retrieve the records of traffic events occurring at the traffic junction identified by ""A12,"" and arrange these records in descending order based on the maximum speed of vehicles involved in each event."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""A12"" }).sort({ ""response.event.vehicles.speed"": -1 }); ","Select traffic event data associated with the intersection labeled ""A12,"" organizing the results so that the entries with the highest vehicle speeds appear first."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Retrieve the average speed of vehicles identified by their number plates from traffic events, where each vehicle involved in an event is counted separately. The results should group by number plate and compute the average speed for each, reflecting how different vehicles contribute to traffic event data."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Calculate the average speed for each vehicle based on its number plate from individual traffic events, processing each vehicle as a distinct entry. The outcomes must summarize speeds by number plate, highlighting the average performance across different incidents recorded."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the traffic events by the type of event recorded, counting the total occurrences of each event type, and then sort these counts in descending order to identify which types of traffic events are most frequent."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$response.event.type"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Aggregate the traffic events based on their event types, calculating the total number of events for each type, before ordering the results from the most to the least common event type."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $gt: 80 } }); ",Retrieve all records of traffic events where the speed of vehicles recorded exceeds 80 units. This selection encompasses any relevant incidents captured within the dataset that meet the speed condition.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.speed"": { $gt: 80 } }); ",Identify all instances of traffic events that involve vehicles with recorded speeds greater than 80 units. This will include any applicable events documented in the dataset pertaining to the specified speed threshold.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $project: { camera_id: ""$identifier.camera_id"", ""response.event.type"": 1 } } ]); ",Retrieve the camera identifiers and the types of traffic events that have a critical severity level recorded in the traffic events database.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $project: { camera_id: ""$identifier.camera_id"", ""response.event.type"": 1 } } ]); ","List the types of traffic events along with their corresponding camera identifiers, but only for those events classified as critical in severity."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } ]); ","Retrieve the identification numbers of vehicles that have been recorded more than three times, aggregating the data from traffic events specifically related to vehicle instances. This involves examining instances of vehicles involved in various traffic events and counting how many times each vehicle number plate appears."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } } ]); ","Identify the number plates of vehicles that have been documented in traffic events on more than three occasions, by unwinding the records of vehicle occurrences associated with each event and counting the frequency of each unique plate."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Retrieve all vehicle records associated with traffic events that occurred between January 1, 2023, and December 31, 2023, focusing specifically on the timestamps of these events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Collect all instances of vehicle activity linked to traffic events which took place from January 1, 2023, through December 31, 2023, emphasizing the relevant timestamps recorded during this period."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.camera_id"": ""C1"" } }, { $group: { _id: ""$identifier.intersection_id"", totalSeverity: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } } ]); ","Retrieve the total number of critical severity traffic events grouped by traffic junctions, specifically for the surveillance unit identified as ""C1."" The results should reflect the sum of instances classified as critical for each intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.camera_id"": ""C1"" } }, { $group: { _id: ""$identifier.intersection_id"", totalSeverity: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } } ]); ","Count the occurrences of critical severity traffic incidents organized by intersection, filtering to include only those records associated with the camera labeled ""C1."" The aggregated results should indicate the total counts of critical events for each unique intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Count the number of instances of red light violations, grouping the results by the traffic junction identifiers, and arrange the counts in descending order to display where these violations are most frequent."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.intersection_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ",Aggregate the total occurrences of red light violations by each intersection identifier and sort the results in descending order based on the count of violations to identify the intersections with the highest number of infractions.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $project: { vehicles: ""$response.event.vehicles"" } }, { $unwind: ""$vehicles"" }, { $group: { _id: ""$vehicles.number_plate"", totalSpeed: { $sum: ""$vehicles.speed"" } } } ]); ","Retrieve the number plates of vehicles involved in low severity traffic events, along with the total speed for each vehicle, after breaking down the details of each vehicle in the recorded events. The final results should consolidate the data by number plate."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $project: { vehicles: ""$response.event.vehicles"" } }, { $unwind: ""$vehicles"" }, { $group: { _id: ""$vehicles.number_plate"", totalSpeed: { $sum: ""$vehicles.speed"" } } } ]); ","Summarize the total speed of vehicles that were part of low severity traffic incidents, displaying the number plate for each vehicle as the unique identifier, with the vehicle details expanded for individual analysis. The data should be grouped based on number plate."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.intersection_id"": ""B34"" } }, { $lookup: { from: ""traffic_events"", localField: ""identifier.camera_id"", foreignField: ""identifier.camera_id"", as: ""related_events"" } } ]); ","Retrieve all traffic events associated with the specified traffic junction identified as ""B34"" and include related events linked through the surveillance unit identifiers for further analysis."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""identifier.intersection_id"": ""B34"" } }, { $lookup: { from: ""traffic_events"", localField: ""identifier.camera_id"", foreignField: ""identifier.camera_id"", as: ""related_events"" } } ]); ","Select traffic events for the traffic junction labeled ""B34"" while incorporating related events that share the same surveillance unit identifiers for a comprehensive overview of the situation."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""IllegalParking"" }).sort({ ""response.event.vehicles.timestamp"": -1 }).limit(10); ","Fetch the most recent ten records of traffic events categorized as ""IllegalParking,"" arranging them in order of their vehicle timestamp from latest to earliest."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.type"": ""IllegalParking"" }).sort({ ""response.event.vehicles.timestamp"": -1 }).limit(10); ","Select the last ten entries of traffic incidents marked as ""IllegalParking,"" sorted by the timestamp of the vehicles in descending order to display the most recent occurrences first."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.location"": { $geoWithin: { $centerSphere: [ [30.0, 20.0], 1 ] } } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" } } } ]); ","Extract the total speed of each vehicle based on their number plate from traffic events within a specified circular area centered at the coordinates [30.0, 20.0] and extending outwards for a radius of 1. First, records are disassembled to access vehicle information, and then the total speed is calculated by grouping the data according to each vehicle's number plate."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.location"": { $geoWithin: { $centerSphere: [ [30.0, 20.0], 1 ] } } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" } } } ]); ","Summarize the total speed recorded for each vehicle identified by its number plate that was observed within a circular zone defined by a center at [30.0, 20.0] and a radius of 1. The individual vehicle entries are first expanded for detailed access, followed by aggregating the total speed through grouping by their respective number plates."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": { $in: [""High"", ""Critical""] } } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } } ]); ","Select the camera identifiers associated with events classified as either High or Critical severity, along with the total count of such events per camera. The results should reflect a summary that groups the data by each camera's identifier."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": { $in: [""High"", ""Critical""] } } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } } ]); ","Identify and count the number of High and Critical severity events for each camera, organizing the results by camera identifier to display the total events recorded."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""C56"", ""response.event.vehicles.timestamp"": { $gt: new Date(""2023-02-01"") } }); ","Fetch the records of traffic events associated with the specified traffic junction ""C56"" that have vehicles logged with timestamps later than February 1, 2023."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""identifier.intersection_id"": ""C56"", ""response.event.vehicles.timestamp"": { $gt: new Date(""2023-02-01"") } }); ","Gather data on traffic incidents from the intersection identified as ""C56"" where the recorded vehicles include timestamps after February 1, 2023."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.speed"": { $lte: 60 } } }, { $group: { _id: ""$identifier.intersection_id"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Retrieve the average speed of vehicles involved in events where the recorded speed is 60 or lower, grouped by each traffic junction identifier."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.speed"": { $lte: 60 } } }, { $group: { _id: ""$identifier.intersection_id"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Calculate the average vehicle speed for incidents where the speed does not exceed 60, categorizing the results by the identifier of the respective traffic intersections."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 }, uniqueVehicles: { $addToSet: ""$response.event.vehicles.number_plate"" } } }, { $project: { camera_id: ""$_id"", totalEvents: 1, uniqueVehicleCount: { $size: ""$uniqueVehicles"" } } } ]); ","Gather the total number of traffic events and the distinct number plates of vehicles associated with each surveillance camera unit, grouping the results by camera identifier. The output should include the camera identifier, the total events count, and the count of unique vehicle number plates for each camera unit."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 }, uniqueVehicles: { $addToSet: ""$response.event.vehicles.number_plate"" } } }, { $project: { camera_id: ""$_id"", totalEvents: 1, uniqueVehicleCount: { $size: ""$uniqueVehicles"" } } } ]); ","Compile a summary of traffic events categorized by each camera unit, including the total events recorded and the variety of unique vehicle number plates identified, with results organized by the camera identifier. The final output should showcase the camera unit's ID, its total event tally, and the unique vehicle count."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve details about traffic events that occurred at specific intersections and were captured by designated cameras, focusing particularly on the severity and type of the events, along with the speed, timestamp, and location of the vehicles involved. The results should include vehicles that were recorded violating traffic rules, filtering the records based on identified intersections and cameras used."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List instances of traffic violations that took place at particular junctions, monitored by specified cameras, while detailing the severity and category of the incidents, as well as each vehicle's recorded speed, timestamp of the event, and geographical position. Ensure the data reflects specific intersections and surveillance equipment utilized during the events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } }, { $match: { totalSpeed: { $gt: 100 } } } ]); ","Aggregate the total speed and count of events for each vehicle based on its number plate from the traffic events, ensuring to only include vehicles where the total speed exceeds 100. The results will be grouped by number plate, and each vehicle will contribute to the overall total speed and a count of occurrences."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, eventCount: { $sum: 1 } } }, { $match: { totalSpeed: { $gt: 100 } } } ]); ","Summarize the total speed and frequency of events for each vehicle identified by its number plate, filtering to include only those vehicles whose combined speed surpasses 100. The aggregation will organize results by number plate, detailing the summed speed and the total event count for each vehicle."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.intersection_id"", criticalEventCount: { $sum: 1 } } }, { $sort: { criticalEventCount: -1 } } ]); ","Retrieve the count of critical traffic events, grouped by intersection, where the severity of the events is classified as critical. The resulting data should be sorted in descending order based on the count of these critical events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.intersection_id"", criticalEventCount: { $sum: 1 } } }, { $sort: { criticalEventCount: -1 } } ]); ","Count the number of critical events recorded, organized by each traffic intersection, ensuring only those events categorized as severe are included, with the results displayed in decreasing order of critical event totals."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.camera_id"", avgSpeed: { $avg: { $avg: ""$response.event.vehicles.speed"" } } } }, { $match: { avgSpeed: { $gt: 60 } } } ]); ","Identify the camera IDs associated with traffic events categorized as ""RedLightViolation"" and calculate the average speed of vehicles involved in these incidents. Only include the results where the average speed exceeds 60 units."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""RedLightViolation"" } }, { $group: { _id: ""$identifier.camera_id"", avgSpeed: { $avg: { $avg: ""$response.event.vehicles.speed"" } } } }, { $match: { avgSpeed: { $gt: 60 } } } ]); ","Determine the camera identifiers linked to events marked as ""RedLightViolation"" and compute the average vehicle speed for those occurrences, filtering the results to show only instances where the average speed is greater than 60 units."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersection_id: ""$identifier.intersection_id"", type: ""$response.event.type"", severity: ""$response.event.severity"", vehicleCount: { $size: ""$response.event.vehicles"" } } }, { $match: { vehicleCount: { $gt: 1 } } } ]); ","Retrieve the intersection identifiers, event types, and severity levels of traffic incidents where more than one vehicle was involved, ensuring that the count of vehicles is included in the result set."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $project: { intersection_id: ""$identifier.intersection_id"", type: ""$response.event.type"", severity: ""$response.event.severity"", vehicleCount: { $size: ""$response.event.vehicles"" } } }, { $match: { vehicleCount: { $gt: 1 } } } ]); ","List the identifiers for traffic junctions, along with the types and severity of events, for incidents that involved multiple vehicles, including the total vehicle count in each case."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, totalViolations: { $sum: 1 }, uniqueVehicles: { $addToSet: ""$response.event.vehicles.number_plate"" } } }, { $project: { totalViolations: 1, uniqueVehicleCount: { $size: ""$uniqueVehicles"" } } } ]); ","Count the total number of traffic violations recorded and identify the unique vehicle number plates involved, by analyzing each vehicle associated with the traffic events without grouping by any specific field. The final output should present the total violations alongside the count of unique vehicles that committed these infractions."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: null, totalViolations: { $sum: 1 }, uniqueVehicles: { $addToSet: ""$response.event.vehicles.number_plate"" } } }, { $project: { totalViolations: 1, uniqueVehicleCount: { $size: ""$uniqueVehicles"" } } } ]); ","Aggregate all traffic violations to determine both the total occurrences and the distinct vehicle number plates registered, treating each vehicle in the event responses uniformly. The results will display the overall number of violations and the total number of unique vehicles involved in those violations."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2024-01-01"") } }).count(); ","Count the number of traffic events where vehicles were recorded between January 1, 2023, and December 31, 2023, based on their timestamp data."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2024-01-01"") } }).count(); ","Determine the total number of recorded vehicle traffic events that occurred from January 1, 2023, to December 31, 2023, using the timestamp associated with each event."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$identifier.intersection_id"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" }, severeIncidents: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } }, { $sort: { avgSpeed: -1 } } ]); ","Calculate the average speed of vehicles involved in incidents occurring at each traffic junction, while also counting the number of critical severity incidents. The results should be grouped by the junction identifier and sorted in descending order based on the average speed."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$identifier.intersection_id"", avgSpeed: { $avg: ""$response.event.vehicles.speed"" }, severeIncidents: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } }, { $sort: { avgSpeed: -1 } } ]); ","Determine the average vehicle speed and the total count of critical incidents for each traffic intersection, organizing the output by junction identifier and sorting it from highest to lowest average speed."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.camera_id"", maxSpeed: { $max: ""$response.event.vehicles.speed"" } } }, { $sort: { maxSpeed: -1 } }, { $limit: 5 } ]); ","Retrieve the camera identifiers and the maximum recorded speeds of vehicles involved in speeding incidents, ensuring that only entries related to speeding are included. The results should be arranged in descending order of maximum speed, displaying only the top five cameras."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.type"": ""Speeding"" } }, { $group: { _id: ""$identifier.camera_id"", maxSpeed: { $max: ""$response.event.vehicles.speed"" } } }, { $sort: { maxSpeed: -1 } }, { $limit: 5 } ]); ","Identify the highest speeds captured by cameras for incidents categorized as speeding, grouping the data by each camera's identifier. The output should be sorted from the highest to the lowest maximum speed, showing only the top five results."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""High"", ""response.event.type"": ""IllegalParking"" }).project({ identifier: 1, ""response.event.vehicles"": 1 }); ","Retrieve the identifiers and details of vehicles involved in traffic events categorized as ""High"" in severity and classified under ""IllegalParking."" The results will include only relevant vehicle information along with the intersection and camera identifiers."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.severity"": ""High"", ""response.event.type"": ""IllegalParking"" }).project({ identifier: 1, ""response.event.vehicles"": 1 }); ","List the identifiers along with vehicle details for incidents marked as ""High"" severity and identified as ""IllegalParking."" This selection will feature only the essential vehicle data together with identifiers corresponding to the specific intersection and surveillance camera."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$identifier.camera_id"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, vehicleCount: { $sum: 1 } } }, { $project: { avgSpeed: { $divide: [""$totalSpeed"", ""$vehicleCount""] } } } ]); ","Aggregate the vehicle speed data from traffic events by surveillance unit, calculating the average speed for each unit based on the total speed of all vehicles and the count of vehicles recorded, after first separating out the individual vehicle data from the overall records."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$identifier.camera_id"", totalSpeed: { $sum: ""$response.event.vehicles.speed"" }, vehicleCount: { $sum: 1 } } }, { $project: { avgSpeed: { $divide: [""$totalSpeed"", ""$vehicleCount""] } } } ]); ","Compute the average speed of vehicles for each camera by summing their speeds and dividing by the total number of vehicles associated with each surveillance unit, ensuring the vehicle information is separated from the main event records during the processing."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.intersection_id"", eventTypes: { $addToSet: ""$response.event.type"" } } }, { $project: { eventTypes: 1, numberOfEventTypes: { $size: ""$eventTypes"" } } } ]); ","Retrieve the identifiers of traffic junctions associated with low-severity events, along with the distinct types of those events recorded at each junction. Additionally, include the total count of different event types for each junction in the results."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.intersection_id"", eventTypes: { $addToSet: ""$response.event.type"" } } }, { $project: { eventTypes: 1, numberOfEventTypes: { $size: ""$eventTypes"" } } } ]); ","List the intersection identifiers linked to events classified as low severity, displaying the unique types of those events per intersection and including the total number of different event types for each."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.speed"": { $gte: 80 } } }, { $project: { identifier: 1, vehiclePlate: ""$response.event.vehicles.number_plate"" } } ]); ",Retrieve the identifiers and license plates of vehicles that were recorded with speeds of 80 miles per hour or more during traffic events. The results should reflect only the vehicles that meet this speed criterion.
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.vehicles.speed"": { $gte: 80 } } }, { $project: { identifier: 1, vehiclePlate: ""$response.event.vehicles.number_plate"" } } ]); ","List the identifiers along with the number plates of vehicles involved in traffic events where their speeds reached or exceeded 80 miles per hour, focusing solely on those specific details."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.intersection_id"", totalCriticalEvents: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } }, { $match: { totalCriticalEvents: { $gte: 5 } } }, { $sort: { totalCriticalEvents: -1 } } ]); ","Aggregate the data to find the total number of critical traffic events reported at each intersection, ensuring that only those intersections with five or more critical events are included in the results, which should be sorted in descending order based on the total count of critical events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $group: { _id: ""$identifier.intersection_id"", totalCriticalEvents: { $sum: { $cond: [{ $eq: [""$response.event.severity"", ""Critical""] }, 1, 0] } } } }, { $match: { totalCriticalEvents: { $gte: 5 } } }, { $sort: { totalCriticalEvents: -1 } } ]); ","Calculate the total count of critical events for each traffic junction and return only those junctions that have at least five critical events recorded, arranging the output in descending order of the total critical events counted."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-03-01"") } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", speed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Calculate the average speed for each unique vehicle number plate from traffic events that have recorded vehicle activity since March 1, 2023, ensuring that data is examined for vehicles involved in relevant incidents."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $match: { ""response.event.vehicles.timestamp"": { $gte: new Date(""2023-03-01"") } } }, { $group: { _id: ""$response.event.vehicles.number_plate"", speed: { $avg: ""$response.event.vehicles.speed"" } } } ]); ","Determine the average speed of vehicles based on their number plates from traffic events occurring after March 1, 2023, including each vehicle's details in the analysis of the recorded events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""High"" } }, { $group: { _id: ""$identifier.intersection_id"", eventCount: { $count: {} } } } ]); ","Retrieve the count of events categorized as having high severity, grouped by each traffic junction identifier. This will indicate how many high-severity incidents occurred at each specific intersection."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $match: { ""response.event.severity"": ""High"" } }, { $group: { _id: ""$identifier.intersection_id"", eventCount: { $count: {} } } } ]); ","Count the number of traffic events classified as high severity and group the results by the identifier of each intersection, providing a total for each junction."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-180, -90], [180, 90]] } } }).limit(10); ","Retrieve a maximum of ten records that correspond to vehicles located within a specified geographical boundary, as determined by their recorded positions in relation to the defined coordinates."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.find({ ""response.event.vehicles.location"": { $geoWithin: { $box: [[-180, -90], [180, 90]] } } }).limit(10); ","Select up to ten entries where the locations of vehicles fall within a specific rectangular area defined by latitude and longitude, ensuring that only relevant data points within this zone are considered."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalIncidents: { $sum: 1 } } }, { $sort: { totalIncidents: -1 } }, { $limit: 10 } ]); ","Aggregate the number of incidents for each unique vehicle number plate recorded in traffic events, sorting the results in descending order by total incidents and limiting the output to the ten vehicle number plates with the highest counts."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $unwind: ""$response.event.vehicles"" }, { $group: { _id: ""$response.event.vehicles.number_plate"", totalIncidents: { $sum: 1 } } }, { $sort: { totalIncidents: -1 } }, { $limit: 10 } ]); ","Count the total incidents associated with each distinct vehicle number plate from traffic events, ordering the results from most to least incidents and presenting only the top ten number plates."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $lookup: { from: ""traffic_events"", localField: ""identifier.camera_id"", foreignField: ""identifier.camera_id"", as: ""relatedEvents"" } }, { $unwind: ""$relatedEvents"" }, { $match: { ""relatedEvents.response.event.type"": ""IllegalParking"" } } ]); ","Retrieve all instances where events related to illegal parking are connected to the same surveillance unit, ensuring each related event is unwound from the collection of traffic events associated with that surveillance unit."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.traffic_events.aggregate([ { $lookup: { from: ""traffic_events"", localField: ""identifier.camera_id"", foreignField: ""identifier.camera_id"", as: ""relatedEvents"" } }, { $unwind: ""$relatedEvents"" }, { $match: { ""relatedEvents.response.event.type"": ""IllegalParking"" } } ]); ","Identify and expand all traffic events that involve illegal parking, specifically focusing on those linked by the same camera, thereby producing a detailed list of associated incidents for each relevant surveillance unit."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve data on traffic events, focusing on the severity and type of incidents involving vehicles at specific intersections and surveillance cameras. The results should include details such as vehicle number plates, speeds, timestamps, and geographic locations, all organized by the severity of the events."
traffic_event,"{
  ""collections"": [{
    ""name"": ""traffic_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""intersection_id"": {""description"": ""Filter by traffic junction""},
            ""camera_id"": {""description"": ""Filter by surveillance unit""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""severity"": {""description"": ""Critical, High, Low""},
                ""type"": {""description"": ""Speeding, RedLightViolation, IllegalParking""},
                ""vehicles"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""number_plate"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{2}[0-9]{2}[A-Z]{2}[0-9]{4}$""
                      },
                      ""speed"": {""bsonType"": ""double""},
                      ""timestamp"": {""bsonType"": ""date""},
                      ""location"": {
                        ""bsonType"": ""array"",
                        ""items"": {""bsonType"": ""double""}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Gather information regarding traffic incidents that occurred at designated traffic junctions monitored by particular cameras, highlighting the severity and nature of each incident. The output must encompass specifics like vehicle registration numbers, their speeds, the time of the events, and the locations, arranged according to the severity of the events."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.toll_events.find({}); ,"Retrieve all records of toll events, including details about the transaction amounts, timestamps, vehicle classifications, and axle counts, without applying any filters or constraints."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.toll_events.find({}); ,"List every toll event recorded, providing complete information on transaction amounts, dates, vehicle classes, and axle counts, while not imposing any conditions or limitations on the retrieval."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ","Retrieve all events associated with a specified highway identified by ""H1."" The results should include only the records where the highway ID matches this value."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ","List all toll transactions recorded for the highway designated as ""H1,"" ensuring that the data retrieved pertains exclusively to this specific road identifier."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gte: 5.00 } }); ","Retrieve records where the transaction amount related to events is greater than or equal to $5.00. This will include details about each event's transaction, ensuring that only relevant entries meeting the specified financial criteria are returned."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gte: 5.00 } }); ","Find all entries that have a transaction amount of at least $5.00, focusing on the associated event details and ensuring that only those that satisfy this monetary threshold are included in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ","Retrieve all records of toll events where the vehicle's number plate is ""ABC123""."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ","List the toll event records corresponding to the vehicle that has the number plate ""ABC123""."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 2 }); ",Retrieve all toll event records where the lane number is specified as 2.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 2 }); ",Select toll event entries that correspond to a lane identified as number 2.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gt: 3 } }); ","Retrieve records where the axle count of the vehicles recorded in the toll events exceeds three, focusing specifically on the relevant transaction details."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gt: 3 } }); ","List all entries from the toll events where vehicles have an axle count greater than three, emphasizing the associated transaction information."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Retrieve all records of toll events where the transaction timestamps are within the year 2023, specifically from January 1st to December 31st."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Collect data on toll events that occurred during 2023, including only those transactions with timestamps from the beginning of January to the end of December."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $exists: true } }); ",Retrieve all records that include a valid RFID tag within the event identification details. This selection captures only those events where the RFID tag attribute exists in the event's response data.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $exists: true } }); ","Find all entries where the identification segment of the event contains an RFID tag, ensuring that only events with this specific attribute are returned in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H2"", ""response.event.transaction.amount"": { $lt: 10.00 } }); ","Find all records where the highway identifier is ""H2"" and the transaction amount for each event is less than $10.00."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H2"", ""response.event.transaction.amount"": { $lt: 10.00 } }); ","Select entries that correspond to the highway identified as ""H2"" and where the transaction amount recorded for the event is below $10.00."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.findOne({ ""response.event.transaction.vehicle_class"": 1 }); ",Retrieve a single record where the vehicle class associated with the transaction is equal to 1 within the event response data.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.findOne({ ""response.event.transaction.vehicle_class"": 1 }); ",Find one instance of a toll event where the transaction's vehicle class is identified as 1 in the response details.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.countDocuments({ ""response.event.transaction.amount"": { $gt: 0 } }); ",Count the total number of records where the transaction amount within the event response is greater than zero.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.countDocuments({ ""response.event.transaction.amount"": { $gt: 0 } }); ",Determine the total amount of entries where the amount of the transaction in the event's response exceeds zero.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $eq: 10.50 } }).sort({ ""response.event.transaction.timestamp"": 1 }); ","Retrieve records where the transaction amount is exactly $10.50, and order the results by the transaction timestamp in ascending order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $eq: 10.50 } }).sort({ ""response.event.transaction.timestamp"": 1 }); ",Select entries with a transaction value of $10.50 and sort these entries by their transaction timestamp from the earliest to the latest.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $gt: 100000 } }).limit(5); ","Retrieve the first five records where the RFID tag associated with the event identification is greater than 100, ensuring that only events meeting this criterion are included in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": { $gt: 100000 } }).limit(5); ","Select a maximum of five entries where the RFID tag of the event's identification exceeds 100, focusing solely on those that satisfy this condition."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.deleteMany({ ""identifier.lane_number"": 1 }); ",Remove all records where the lane number associated with the identifier equals one.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.deleteMany({ ""identifier.lane_number"": 1 }); ",Delete every entry that has a lane number of one within its identifier.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.updateMany({ ""response.event.transaction.axle_count"": { $lt: 2 } }, { $set: { ""response.event.transaction.vehicle_class"": 0 } }); ",Update all records where the number of axles in the transaction is less than two by setting the vehicle class to zero in the response event's transaction information.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.updateMany({ ""response.event.transaction.axle_count"": { $lt: 2 } }, { $set: { ""response.event.transaction.vehicle_class"": 0 } }); ",Modify the records that have fewer than two axles in their transaction details by assigning a vehicle class of zero within the event's transaction response.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); ","Aggregate the total toll amounts for each highway by grouping the data based on the highway identifier, summing all transaction amounts for each corresponding highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); ","Calculate the total transaction amounts for each highway by collecting and grouping records according to the highway identifier, ensuring the sum reflects all toll amounts associated with that highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""identifier.highway_id"": ""H1"" } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); ","Retrieve the total amount of toll transactions, grouped by vehicle class, for all records associated with the highway identified as ""H1""."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $match: { ""identifier.highway_id"": ""H1"" } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }]); ","Summarize the total toll revenues by vehicle class for the highway marked as ""H1"", aggregating the amounts from all relevant transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2022-01-01"") } }).sort({ ""response.event.transaction.timestamp"": -1 }); ","Retrieve all records with transaction timestamps on or after January 1, 2022, and arrange them in descending order based on the timestamp of the transaction."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2022-01-01"") } }).sort({ ""response.event.transaction.timestamp"": -1 }); ","Select entries where the transaction date is from January 1, 2022, onwards, and sort these records in reverse chronological order by the transaction timestamp."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H3"" }).project({ ""response.event.transaction.amount"": 1, ""response.event.transaction.timestamp"": 1 }); ","Retrieve the transaction amounts and timestamps for events occurring on the specified highway, focusing solely on entries where the road network is identified as ""H3."" Only the relevant financial data and time of each transaction will be included in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""H3"" }).project({ ""response.event.transaction.amount"": 1, ""response.event.transaction.timestamp"": 1 }); ","Select and display the amounts and times of transactions related to events on highway ""H3,"" ensuring that only these specific details are provided for each instance recorded."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the details of all toll events, including vehicle identification information and transaction data, where the highway identifier matches a specified value and the lane number is within a defined range. The results should be grouped by vehicle class and sorted by the transaction timestamp, displaying the total transaction amounts for each vehicle class."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List all toll event records that include vehicle identification and transaction details, applying a condition on the highway identifier and restricting the lane number to a specific set. The data should be aggregated by vehicle class and arranged in chronological order based on the transaction timestamps, detailing the total amounts for each class of vehicle."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""101"" }); ","Retrieve all records of events associated with the specified road network identified by the highway ID ""101."""
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""101"" }); ","List all event records linked to the highway with the identifier ""101,"" focusing specifically on the relevant transactions and details."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: NumberDecimal(""2.00"") } }); ",Retrieve records where the transaction amount of toll events is greater than $2.00.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: NumberDecimal(""2.00"") } }); ",Fetch details of toll events that involve transactions with amounts exceeding $2.00.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC1234"" }); ","Retrieve all records of toll events where the vehicle's number plate matches ""ABC1234."" This search will identify each associated event for that particular vehicle's identification."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC1234"" }); ","Select all entries of toll events that correspond to a vehicle with the number plate ""ABC1234,"" capturing the details of every event linked to this specific vehicle identification."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 5 }); ",Retrieve records of toll events where the lane number is specifically 5.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": 5 }); ",List all toll event records associated with lane number 5.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $lte: 3 } }); ",Retrieve all records where the count of axles for transactions is less than or equal to three.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $lte: 3 } }); ",Select entries corresponding to transactions with an axle count of three or fewer.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": 1 }).sort({ ""response.event.transaction.timestamp"": -1 }); ","Retrieve records of toll events where the vehicle classification is equal to one, and sort these records in descending order based on the timestamp of the transaction."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": 1 }).sort({ ""response.event.transaction.timestamp"": -1 }); ","Select toll event entries that have a vehicle class of one, ordering the results from the most recent transaction to the oldest based on the timestamp."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); ","Retrieve all records of toll events where the transaction occurred between January 1, 2023, and January 31, 2023, inclusive of the starting date but exclusive of the ending date."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); ","Select entries from toll events that have a transaction timestamp within the timeframe from January 1, 2023, up to but not including February 1, 2023."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": 1234567890 }); ","Retrieve records where a specific RFID tag, identified by the number 1234567890, has been associated with toll events."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.rfid_tag"": 1234567890 }); ",Gather all entries related to toll events that correspond to the RFID tag number 1234567890.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""102"", ""identifier.lane_number"": 3 }); ",Retrieve records for events occurring in lane number 3 on highway 102.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": ""102"", ""identifier.lane_number"": 3 }); ",List all occurrences associated with lane 3 of the highway identified as 102.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ $or: [ { ""response.event.transaction.amount"": { $gt: NumberDecimal(""5.00"") } }, { ""response.event.transaction.axle_count"": { $gt: 6 } } ] }); ",Retrieve records where the transaction amount exceeds $5.00 or the vehicle has more than 6 axles.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ $or: [ { ""response.event.transaction.amount"": { $gt: NumberDecimal(""5.00"") } }, { ""response.event.transaction.axle_count"": { $gt: 6 } } ] }); ",Select entries that indicate either a transaction amount greater than $5.00 or a vehicle classified with more than 6 axles.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find().limit(10); ","Retrieve a maximum of ten records from the toll event data, presenting the most recent entries available."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find().limit(10); ","List no more than ten of the latest toll events recorded, providing the most recent data entries from the event information."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find().skip(5).limit(10); ","Retrieve 10 records starting from the sixth entry in the dataset, omitting the first five entries, to include only the latest toll event information."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find().skip(5).limit(10); ","Select a subset of 10 toll event records, beginning with the sixth entry, after skipping the initial five, to examine recent transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $ne: NumberDecimal(""0.00"") } }); ","Fetch all records where the transaction amount associated with the event response is not equal to zero, ensuring that only events with a non-zero monetary value are considered."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $ne: NumberDecimal(""0.00"") } }); ","Gather entries that have a transaction amount differing from zero in the event response, focusing exclusively on transactions that involved a financial charge."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $exists: true } }).sort({ ""response.event.transaction.timestamp"": 1 }); ","Retrieve all records that have a timestamp for the transaction within the event details, and arrange these records in ascending order based on the transaction timestamp."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $exists: true } }).sort({ ""response.event.transaction.timestamp"": 1 }); ","Select the entries where the transaction event includes a timestamp, ensuring they are sorted in chronological order by the transaction timestamp."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": { $regex: ""^[A-Z]{3}[0-9]{4}$"" } }); ",Retrieve records where the number plate of the vehicle matches the pattern consisting of three uppercase letters followed by four digits.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": { $regex: ""^[A-Z]{3}[0-9]{4}$"" } }); ",Select entries that conform to the format of a vehicle number plate consisting of three letters in uppercase followed by four numeric digits.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": { $in: [""101"", ""102""] } }); ",Retrieve all records associated with highway identifiers 101 and 102.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.highway_id"": { $in: [""101"", ""102""] } }); ",Select entries where the highway_id is either 101 or 102.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": null }); ",Retrieve all records where the number plate associated with the vehicle is not provided.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": null }); ",Select records that lack a specified vehicle number plate.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gte: 4, $lte: 8 } }); ",Retrieve all records where the number of axles of the vehicle is between 4 and 8.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.axle_count"": { $gte: 4, $lte: 8 } }); ",Select entries that show vehicles with an axle count ranging from 4 to 8.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": 2 }).count(); ",Count the total number of events where the vehicle class is identified as type 2 within the transaction details.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": 2 }).count(); ",Determine how many records correspond to vehicles classified as type 2 in the transaction section of the event responses.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $in: [1, 2, 3] } }).sort({ ""response.event.transaction.amount"": -1 }); ","Retrieve the records of toll events where the lane number is either 1, 2, or 3, and arrange the results in descending order based on the transaction amount recorded in each event."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $in: [1, 2, 3] } }).sort({ ""response.event.transaction.amount"": -1 }); ","Select entries for toll events that occur in lanes numbered 1, 2, or 3, and display them sorted by transaction amount in descending order, focusing on the highest values first."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve records of toll events that include details about transactions, such as the amount, timestamp, vehicle classification, and axle count, along with vehicle identification information like number plate and RFID tag, specifically for a certain highway and lane. Additionally, ensure that all transactions are grouped accordingly while applying any necessary filters based on vehicle attributes."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Collect information regarding toll events that capture transaction details including the monetary amount, date and time, type of vehicle, and number of axles, as well as identifying attributes like the vehicle's registration number and RFID identifier, ensuring the data corresponds to a specified highway and lane. Group the results appropriately while adhering to any designated criteria related to vehicle characteristics."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ","Retrieve all records related to toll events occurring on a specific highway identified as ""H1."""
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ","Gather details of toll events associated with the highway designated ""H1."""
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gte: 5.00 } }); ",Retrieve all entries where the transaction amount recorded is equal to or exceeds $5.00.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gte: 5.00 } }); ",Select records reflecting transactions with amounts greater than or equal to $5.00.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ","Find all records that include transactions where the vehicle identification number plate is ""ABC123""."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ","Retrieve all entries concerning toll events associated with the number plate ""ABC123""."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $lt: new Date(""2023-01-01"") } }); ","Retrieve records of toll events where the transaction timestamp is earlier than January 1, 2023. The focus is on capturing the data associated with these transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $lt: new Date(""2023-01-01"") } }); ","Gather information on toll events that occurred before January 1, 2023, specifically targeting the details related to the timestamps of the transactions involved."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $in: [1, 2, 3] } }); ","Retrieve all events where the lane number involved is either 1, 2, or 3."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""identifier.lane_number"": { $in: [1, 2, 3] } }); ","Select records representing toll events occurring specifically in lanes numbered 1, 2, or 3."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.countDocuments({ ""response.event.transaction.axle_count"": { $gt: 2 } }); ",Count the number of instances where the number of axles on a vehicle exceeds two within the recorded toll events.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.countDocuments({ ""response.event.transaction.axle_count"": { $gt: 2 } }); ",Determine the total occurrences of vehicles with more than two axles captured in the toll event records.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gt: 10.00 } } }, { $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Retrieve the total transaction amount for each highway, including only those where the transaction amount exceeds $10. The results should be grouped by highway identifier, summarizing the total for each group."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gt: 10.00 } } }, { $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Summarize the total transaction amount per highway, selecting only those transactions with an amount greater than $10. Each result should reflect the highway's identifier and aggregate the total amount for that highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $sort: { ""response.event.transaction.timestamp"": 1 } } ]); ","Retrieve records of toll events where the transaction timestamps fall between January 1, 2023, and December 31, 2023, inclusive. The results should be organized in ascending order based on the transaction timestamps."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $sort: { ""response.event.transaction.timestamp"": 1 } } ]); ","Select toll event entries with transaction timestamps from the start of January 2023 up to the end of December 2023, sorted in chronological order by the transaction timestamp."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.lane_number"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $match: { avgAmount: { $gt: 7.00 } } } ]); ","Calculate the average transaction amount per lane by grouping the data based on lane numbers, and identify those lanes where the average exceeds $7.00."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.lane_number"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } }, { $match: { avgAmount: { $gt: 7.00 } } } ]); ","Group the data by lane number to find the average transaction amount, then select the lanes where this average is greater than $7.00."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.vehicle_class"", totalTransactions: { $sum: 1 } } }, { $sort: { totalTransactions: -1 } } ]); ","Group the records by the classification of vehicles involved in transactions, counting the total number of transactions for each vehicle class, and then sort the results in descending order based on the transaction totals."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.vehicle_class"", totalTransactions: { $sum: 1 } } }, { $sort: { totalTransactions: -1 } } ]); ","Aggregate the data by vehicle class to determine the total count of transactions for each classification, then order the resulting counts from highest to lowest."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""identifier.highway_id"": ""H2"" } }, { $group: { _id: ""$response.event.transaction.axle_count"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } } ]); ",Retrieve the total amounts collected from toll transactions grouped by the number of axles of vehicles that traveled on highway H2. The results will summarize the total amount for each distinct axle count.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""identifier.highway_id"": ""H2"" } }, { $group: { _id: ""$response.event.transaction.axle_count"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Calculate the total revenue generated from toll events, organized by the axle count of vehicles on highway H2, displaying the summed amounts for each group of axle counts."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.number_plate"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { totalAmount: { $gt: 50.00 } } } ]); ","Summarize the total amount spent for each vehicle identified by its license plate, including only those vehicles whose total spending exceeds $50.00. The data should be grouped by the license plate numbers."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.number_plate"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $match: { totalAmount: { $gt: 50.00 } } } ]); ","Calculate the total transaction amounts for each unique license plate, retaining only those plates with a cumulative amount greater than $50.00, with results organized by the respective license plates."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 10 } ]); ","Retrieve the most recent ten records of toll events, sorting them by the transaction timestamp in descending order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 10 } ]); ",Identify the latest ten toll events by arranging them according to the transaction timestamp from newest to oldest.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $lt: 20.00 } } }, { $project: { number_plate: ""$response.event.identification.number_plate"", amount: ""$response.event.transaction.amount"" } } ]); ","Retrieve the license plate numbers and transaction amounts for toll events where the transaction amount is less than $20.00, including only the specified fields in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $lt: 20.00 } } }, { $project: { number_plate: ""$response.event.identification.number_plate"", amount: ""$response.event.transaction.amount"" } } ]); ","Select the number plates and corresponding amounts of transactions from toll events that are below $20.00, presenting only these fields in the outcome."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.highway_id"", minAmount: { $min: ""$response.event.transaction.amount"" } } } ]); ","Aggregate the minimum transaction amounts for each highway by grouping the results based on the highway identifier, and retrieve only the lowest transaction amount recorded for each highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.highway_id"", minAmount: { $min: ""$response.event.transaction.amount"" } } } ]); ","Group the data by highway identifier to determine the smallest transaction amount for each highway, ensuring that only the minimum amount linked to each highway is collected."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $lookup: { from: ""billing_info"", localField: ""response.event.identification.rfid_tag"", foreignField: ""tag_id"", as: ""billing_details"" } }, { $match: { ""billing_details.amount_due"": { $gt: 0 } } } ]); ",Retrieve the records of toll events that have a non-zero outstanding amount due by matching the RFID tags from event identification with the corresponding billing details. The results will include only those records where the billing amount due is greater than zero.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $lookup: { from: ""billing_info"", localField: ""response.event.identification.rfid_tag"", foreignField: ""tag_id"", as: ""billing_details"" } }, { $match: { ""billing_details.amount_due"": { $gt: 0 } } } ]); ","Select toll event records where there is an outstanding balance by linking the RFID tags from the event identification to the billing information, ensuring that only those records with a positive amount due are included in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""identifier.highway_id"": ""H3"", ""identifier.lane_number"": 2 } }, { $project: { ""transaction.amount"": ""$response.event.transaction.amount"", ""vehicle_class"": ""$response.event.transaction.vehicle_class"" } } ]); ","Retrieve the transaction amounts and vehicle classes for events that occurred on a specific highway, identified as ""H3,"" and in lane number 2. The results will display only the relevant fields related to the transactions without including any additional data."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""identifier.highway_id"": ""H3"", ""identifier.lane_number"": 2 } }, { $project: { ""transaction.amount"": ""$response.event.transaction.amount"", ""vehicle_class"": ""$response.event.transaction.vehicle_class"" } } ]); ","List the amounts involved in transactions and the classes of vehicles that passed through lane number 2 on highway ""H3."" The output will focus solely on these specific elements from the events matching the given criteria."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-06-01""), $lt: new Date(""2023-06-30"") } }).sort({ ""response.event.transaction.timestamp"": 1 }); ","Retrieve all records of toll events that occurred between June 1, 2023, and June 30, 2023, based on the timestamp of the transactions. The records should be arranged in chronological order according to their transaction timestamps."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: new Date(""2023-06-01""), $lt: new Date(""2023-06-30"") } }).sort({ ""response.event.transaction.timestamp"": 1 }); ","Select toll event records where the transaction timestamps fall within the date range of June 1, 2023, to June 30, 2023, and ensure the results are sorted in ascending order by the transaction timestamp."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all transactions from vehicles that include a specified highway and lane number, displaying details such as the vehicle's number plate, RFID tag, transaction amount, timestamp, vehicle class, and axle count. The results should be grouped by the combination of vehicle identifier and the transaction date."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List all vehicle transactions for a defined highway and lane number that provide information including the vehicle's registration number, RFID details, transaction amount, date and time of the transaction, vehicle classification, and axle count, with records organized by vehicle identifiers alongside the transaction date."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ","Retrieve all records of toll events associated with the highway identified as ""H1."" This includes details such as the vehicle's transaction information and identification data without imposing any restrictions on the selection."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.find({ ""identifier.highway_id"": ""H1"" }); ","Select all entries related to toll events for the specified highway labeled ""H1,"" encompassing information about the transactions and vehicle identification while allowing for a complete dataset retrieval."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10 } }); ",Retrieve all records where the transaction amount of toll events exceeds 10.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.amount"": { $gt: 10 } }); ",Identify entries from toll events that have a transaction amount greater than 10.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ","Retrieve records where the vehicle identified by the number plate ""ABC123"" has made toll transactions. All matching entries should include details regarding the associated events and identifiers."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.identification.number_plate"": ""ABC123"" }); ","Select entries documenting toll events linked to the vehicle with the number plate ""ABC123,"" ensuring that all relevant identification and transaction information is captured for those records."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": { $eq: 2 } }); ",Retrieve all records of toll events where the class of the vehicle involved in the transaction is equal to 2.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.vehicle_class"": { $eq: 2 } }); ",List all entries of toll transactions that pertain to vehicles classified as number 2 in the vehicle class category.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Calculate the total transaction amounts for each highway by summing the amounts recorded in the event data, grouping the results based on the highway identifier."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.highway_id"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Aggregate the transaction amounts of toll events for each highway, summing up the values and organizing the results by their respective highway identifiers."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $lt: 500 } } }, { $group: { _id: ""$identifier.lane_number"", count: { $sum: 1 } } } ]); ","Count the number of occurrences of toll events where the transaction amount is less than 500, grouping the results by the lane number used during these events."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $lt: 500 } } }, { $group: { _id: ""$identifier.lane_number"", count: { $sum: 1 } } } ]); ","Aggregate the total number of toll events with a transaction value under 500, grouping the data by the lane number associated with each event."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 10 } ]); ","Retrieve the most recent ten records of toll events, sorted in descending order by the timestamp of the transaction."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 10 } ]); ","Display the latest ten toll event entries, arranged from newest to oldest, based on the transaction date and time."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.axle_count"": { $gte: 4 } } }, { $group: { _id: ""$identifier.highway_id"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } } ]); ","Retrieve the average transaction amount for toll events where the number of axles is four or more, grouped by the highway identifier."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.axle_count"": { $gte: 4 } } }, { $group: { _id: ""$identifier.highway_id"", avgAmount: { $avg: ""$response.event.transaction.amount"" } } } ]); ","Calculate the average amount of transactions for vehicles with at least four axles, organizing the results by each unique highway identifier."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.rfid_tag"", totalTransactions: { $sum: 1 } } }, { $match: { totalTransactions: { $gt: 5 } } } ]); ","Aggregate the total number of transactions for each unique RFID tag identified in the event records, and return only those RFID tags that are associated with more than five total transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.rfid_tag"", totalTransactions: { $sum: 1 } } }, { $match: { totalTransactions: { $gt: 5 } } } ]); ","Group the event records by their RFID tag identifiers, calculating the total transactions for each tag, and provide results solely for those tags that have recorded more than five transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2024-01-01"") } } }, { $group: { _id: ""$identifier.lane_number"", totalAmount: { $sum: ""$response.event.transaction.amount"" }, count: { $sum: 1 } } } ]); ","Retrieve the total amount of transactions and the count of such transactions for each lane, where the transactions occurred between January 1, 2023, and December 31, 2023. The results should be grouped by lane number."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2024-01-01"") } } }, { $group: { _id: ""$identifier.lane_number"", totalAmount: { $sum: ""$response.event.transaction.amount"" }, count: { $sum: 1 } } } ]); ","Summarize the total transaction amounts and the number of transactions for each lane within the date range starting January 1, 2023, through December 31, 2023, organizing the results by lane number."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } } ]); ",Summarize the total monetary amounts for each type of vehicle class by grouping the records based on the vehicle classification. The results should be ordered in descending sequence based on the total amounts calculated.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.vehicle_class"", totalAmount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { totalAmount: -1 } } ]); ","Aggregate the total amounts for transactions categorized by vehicle class, ensuring that records are grouped by this classification and sorted from highest to lowest total amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $lookup: { from: ""toll_events"", localField: ""identifier.highway_id"", foreignField: ""identifier.highway_id"", as: ""related_events"" } }, { $match: { ""related_events.response.event.transaction.amount"": { $gt: 100 } } } ]); ","Retrieve events from the toll system where related occurrences have a transaction amount greater than $100, emphasizing their connection through the highway identifiers."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $lookup: { from: ""toll_events"", localField: ""identifier.highway_id"", foreignField: ""identifier.highway_id"", as: ""related_events"" } }, { $match: { ""related_events.response.event.transaction.amount"": { $gt: 100 } } } ]); ","Identify toll events linked by the same highway identifier that have a transaction value exceeding $100, focusing on the relationships between these events."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { lane: ""$identifier.lane_number"", amount: ""$response.event.transaction.amount"" } }, { $match: { amount: { $exists: true } } } ]); ","Retrieve the lane number and transaction amount for each toll event, ensuring that only records with a defined transaction amount are included in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { lane: ""$identifier.lane_number"", amount: ""$response.event.transaction.amount"" } }, { $match: { amount: { $exists: true } } } ]); ","Select the lane numbers along with the corresponding transaction amounts from toll events, filtering to display only those entries where the transaction amount is present."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: ISODate(""2022-12-01""), $lt: ISODate(""2022-12-31"") } }).sort({ ""response.event.transaction.amount"": 1 }); ","Retrieve records of toll events that occurred between December 1, 2022, and December 31, 2022, and order the results by the transaction amount in ascending order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.find({ ""response.event.transaction.timestamp"": { $gte: ISODate(""2022-12-01""), $lt: ISODate(""2022-12-31"") } }).sort({ ""response.event.transaction.amount"": 1 }); ","Gather all toll event data for transactions recorded from December 1, 2022, to December 31, 2022, and sort these records by the amount of each transaction, starting with the smallest."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""identifier.highway_id"": ""H1"" } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", count: { $sum: 1 } } } ]); ","Count the number of toll events recorded on a specific highway identified as ""H1,"" grouping the results by the class of vehicles involved in the transactions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""identifier.highway_id"": ""H1"" } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", count: { $sum: 1 } } } ]); ","Aggregate the frequency of toll events for vehicles on highway ""H1,"" categorizing the counts according to the vehicle class associated with each transaction."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: null, maxAmount: { $max: ""$response.event.transaction.amount"" } } } ]); ",Determine the highest transaction amount recorded across all events by aggregating the data without any grouping criteria. The result will only include the maximum value of these transaction amounts.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: null, maxAmount: { $max: ""$response.event.transaction.amount"" } } } ]); ","Identify the largest recorded transaction amount from all events, aggregating the information to return just a single maximum amount value without additional grouping."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the toll events where the vehicle classification is specified, and return details including the highway identifier, lane number, transaction amount, timestamp, axle count, and number plate of the vehicles involved. Ensure that the results are organized and only include entries that meet the established criteria for vehicle classes."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the toll event records that pertain to specific vehicle classifications, displaying information such as the highway ID, lane number, transaction details including amount and timestamp, axle count, and the vehicles' number plates, while adhering to the defined vehicle class restrictions."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gt: 100 } } }, { $group: { _id: ""$identifier.highway_id"", total_amount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Retrieve the total amount of transactions for each highway, considering only those transaction amounts that exceed 100, and group the results by the unique highway identifier."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gt: 100 } } }, { $group: { _id: ""$identifier.highway_id"", total_amount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Summarize the transaction totals for each highway, filtering out transactions with amounts of 100 or less, while aggregating the data based on the distinct highway identifiers."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.vehicle_class"": 2 } }, { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 10 } ]); ","Retrieve the most recent ten transactions involving vehicles classified as type 2, sorted in descending order by the transaction timestamp."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.vehicle_class"": 2 } }, { $sort: { ""response.event.transaction.timestamp"": -1 } }, { $limit: 10 } ]); ","List the latest ten records of transactions for vehicles in category 2, arranged from the most recent to the oldest based on the transaction date and time."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.lane_number"", average_amount: { $avg: ""$response.event.transaction.amount"" } } }, { $match: { average_amount: { $gt: 50 } } } ]); ","Group the records by lane number, calculating the average transaction amount for toll events, and only include those lanes where this average exceeds 50."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$identifier.lane_number"", average_amount: { $avg: ""$response.event.transaction.amount"" } } }, { $match: { average_amount: { $gt: 50 } } } ]); ","Calculate the average amount of transactions for each lane and retrieve only those lanes with an average greater than 50, organized by lane number."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { highway_id: ""$identifier.highway_id"", amount: ""$response.event.transaction.amount"", date: { $dateToString: { format: ""%Y-%m-%d"", date: ""$response.event.transaction.timestamp"" } } } } ]); ","Extract the highway identifiers, transaction amounts, and the corresponding transaction dates formatted as YYYY-MM-DD from the relevant records, without any additional filters or conditions applied."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { highway_id: ""$identifier.highway_id"", amount: ""$response.event.transaction.amount"", date: { $dateToString: { format: ""%Y-%m-%d"", date: ""$response.event.transaction.timestamp"" } } } } ]); ","Gather the highway IDs along with the amounts of transactions and their dates formatted as YYYY-MM-DD from the selected entries, ensuring that no further constraints are implemented."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.number_plate"", total_transactions: { $sum: 1 } } }, { $match: { total_transactions: { $gt: 5 } } } ]); ","Group the records by the number plate of vehicles and calculate the total number of transactions for each vehicle. Afterwards, only include those vehicles that have more than five transactions in the final results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.number_plate"", total_transactions: { $sum: 1 } } }, { $match: { total_transactions: { $gt: 5 } } } ]); ","Aggregate the data by the vehicle number plates to determine the total count of transactions per vehicle, filtering to retain only those with more than five transactions in the results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.axle_count"": { $lte: 3 } } }, { $group: { _id: null, total_transactions: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } } ]); ",Count the total number of transactions and the sum of their amounts for events where the number of axles is three or fewer. This calculation should aggregate all matching records without further distinctions.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.axle_count"": { $lte: 3 } } }, { $group: { _id: null, total_transactions: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } } ]); ",Aggregate the total count of transactions and their corresponding amounts for events that involve vehicles with an axle count of three or less. The results should present an overall summation without individual record breakdowns.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gt: 50, $lt: 200 } } }, { $group: { _id: ""$identifier.highway_id"", count: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Retrieve the total count and cumulative amount of transactions for each highway, where the transaction amount is greater than 50 but less than 200. Group the results by highway identifier."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gt: 50, $lt: 200 } } }, { $group: { _id: ""$identifier.highway_id"", count: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } } ]); ","Summarize the number of transactions and the total transaction amount for each highway, considering only those transactions that fall between amounts of 50 and 200. Ensure that the data is organized by the highway identifier."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.vehicle_class"", max_amount: { $max: ""$response.event.transaction.amount"" } } }, { $sort: { max_amount: -1 } } ]); ","Group the records by the classification of vehicles as identified in the transaction details, calculating the maximum transaction amount for each vehicle class. Order the results in descending manner based on the highest transaction amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.vehicle_class"", max_amount: { $max: ""$response.event.transaction.amount"" } } }, { $sort: { max_amount: -1 } } ]); ","Aggregate the data by vehicle type, determining the largest transaction amount associated with each class of vehicle. Sort the output so that the vehicle classes are listed from the highest to the lowest transaction amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.timestamp"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 5 } ]); ","Aggregate the data by counting the number of entries for each unique timestamp of transactions recorded, sort these counts in descending order, and return only the top five results."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.transaction.timestamp"", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 5 } ]); ","Group the records by the transaction timestamps, calculate the total number of occurrences for each timestamp, and display the five most frequent timestamps sorted by their counts in descending order."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.rfid_tag"", total_amount: { $sum: ""$response.event.transaction.amount"" }, count: { $sum: 1 } } }, { $match: { total_amount: { $gt: 1000 } } } ]); ","Summarize the total amounts collected from each unique RFID tag associated with toll events, ensuring to only include those with a total exceeding 1000 units. Each amount should be aggregated in a way that counts the number of occurrences for each RFID tag."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $group: { _id: ""$response.event.identification.rfid_tag"", total_amount: { $sum: ""$response.event.transaction.amount"" }, count: { $sum: 1 } } }, { $match: { total_amount: { $gt: 1000 } } } ]); ","Calculate the cumulative revenue attributed to each distinct RFID tag linked to toll transactions, filtering to retain only those tags where the total surpasses 1000 units, while also recording the count of events for each tag."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { lane: ""$identifier.lane_number"", vehicle_class: ""$response.event.transaction.vehicle_class"", amount: ""$response.event.transaction.amount"" } }, { $group: { _id: ""$lane"", total_amount: { $sum: ""$amount"" }, vehicle_class_counts: { $push: ""$vehicle_class"" } } } ]); ","Retrieve the lane number, vehicle class, and transaction amount from events, and then group the data by lane number to calculate the total transaction amount and collect the vehicle class instances for each lane."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { lane: ""$identifier.lane_number"", vehicle_class: ""$response.event.transaction.vehicle_class"", amount: ""$response.event.transaction.amount"" } }, { $group: { _id: ""$lane"", total_amount: { $sum: ""$amount"" }, vehicle_class_counts: { $push: ""$vehicle_class"" } } } ]); ","Select data on lane numbers, vehicle classes, and transaction amounts from recorded events, organizing it by lane to sum the transaction amounts and compile a list of vehicle classes associated with each lane."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.highway_id"", count: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { total_amount: -1 } } ]); ","Identify the total number of toll events and the cumulative transaction amounts for each highway within the year 2023, filtering for events that occurred from January 1st to just before January 1st, 2024. The results should be organized in descending order based on the total transaction amounts."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: ""$identifier.highway_id"", count: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { total_amount: -1 } } ]); ","Gather the count of toll events and the total transaction sums per highway for the year 2023, considering only those events dated from the beginning of January until the end of December in the same year. The output should be sorted in descending order by the total transaction sum for each highway."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $lookup: { from: 'toll_events', localField: 'identifier.highway_id', foreignField: 'identifier.highway_id', as: 'highway_events' } }, { $unwind: ""$highway_events"" }, { $group: { _id: null, total_amount: { $sum: ""$response.event.transaction.amount"" }, avg_amount: { $avg: ""$highway_events.response.event.transaction.amount"" } } } ]); ","Aggregate the total and average toll transaction amounts for all events associated with the same road network, after joining events by their highway identifiers and breaking down the records for detailed analysis."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $lookup: { from: 'toll_events', localField: 'identifier.highway_id', foreignField: 'identifier.highway_id', as: 'highway_events' } }, { $unwind: ""$highway_events"" }, { $group: { _id: null, total_amount: { $sum: ""$response.event.transaction.amount"" }, avg_amount: { $avg: ""$highway_events.response.event.transaction.amount"" } } } ]); ","Calculate the cumulative and mean toll transaction amounts across events linked by the same highway identifier, ensuring to unwind the joined records for thorough aggregation of the data."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { highway_id: ""$identifier.highway_id"", vehicle_class: ""$response.event.transaction.vehicle_class"", timestamp: ""$response.event.transaction.timestamp"" } }, { $group: { _id: { highway_id: ""$highway_id"", vehicle_class: ""$vehicle_class"" }, total: { $sum: 1 } } } ]); ","Retrieve the highway identifiers, vehicle classifications, and transaction timestamps from the records, then group the data by highway identifier and vehicle classification to calculate the total count of transactions for each group."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $project: { highway_id: ""$identifier.highway_id"", vehicle_class: ""$response.event.transaction.vehicle_class"", timestamp: ""$response.event.transaction.timestamp"" } }, { $group: { _id: { highway_id: ""$highway_id"", vehicle_class: ""$vehicle_class"" }, total: { $sum: 1 } } } ]); ","Extract the identifiers of the highways, the classes of vehicles, and the timestamps of their transactions, subsequently aggregating the results by highway identifier and vehicle class to determine the total number of transactions within each category."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gte: 500 } } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", highest_transaction: { $max: ""$response.event.transaction.amount"" } } }, { $sort: { highest_transaction: -1 } } ]); ",Retrieve the highest transaction amounts for each vehicle class where transactions are at least 500 in value. The results should be organized in descending order based on the highest transaction amount for each vehicle class.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.amount"": { $gte: 500 } } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", highest_transaction: { $max: ""$response.event.transaction.amount"" } } }, { $sort: { highest_transaction: -1 } } ]); ",Identify the maximum transaction amounts recorded for different vehicle classes where the transaction value exceeds 500. Sort the records in descending order according to the highest transaction amount associated with each vehicle class.
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", transaction_count: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } }, { $lookup: { from: 'highest_transactions', localField: 'total_amount', foreignField: 'total_amount', as: 'highest' } } ]); ","Group the data by highway identifier, counting the total number of transactions and summing the total transaction amounts for each highway. After grouping, perform a lookup to combine this data with the highest transaction amounts found elsewhere, associating it by total amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([{ $group: { _id: ""$identifier.highway_id"", transaction_count: { $sum: 1 }, total_amount: { $sum: ""$response.event.transaction.amount"" } } }, { $lookup: { from: 'highest_transactions', localField: 'total_amount', foreignField: 'total_amount', as: 'highest' } } ]); ","Aggregate the data based on each highway's identifier, calculating the number of transactions and the summed transaction amounts for each one. Subsequently, merge this aggregated information with records of the highest total transaction amounts based on matching values."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $addFields: { year: { $year: ""$response.event.transaction.timestamp"" } } }, { $group: { _id: ""$year"", total_amount: { $sum: ""$response.event.transaction.amount"" }, count: { $sum: 1 } } } ]); ","Calculate the total transaction amounts and the count of events for each year by extracting the year from the transaction timestamps. The results should provide summaries grouped by year, detailing the total monetary amount for all transactions that occurred in each respective year."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $addFields: { year: { $year: ""$response.event.transaction.timestamp"" } } }, { $group: { _id: ""$year"", total_amount: { $sum: ""$response.event.transaction.amount"" }, count: { $sum: 1 } } } ]); ","Summarize the total amounts and the frequency of events for each year by identifying the year from the timestamps of the transactions. The output should include aggregated totals of transaction amounts alongside the counts of events, organized by year."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.axle_count"": { $gt: 4 } } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", total_amount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { total_amount: -1 } } ]); ","Retrieve the total transaction amounts for vehicle classes that have more than four axles, grouping the results by vehicle class and sorting them in descending order based on the total amount collected."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.toll_events.aggregate([ { $match: { ""response.event.transaction.axle_count"": { $gt: 4 } } }, { $group: { _id: ""$response.event.transaction.vehicle_class"", total_amount: { $sum: ""$response.event.transaction.amount"" } } }, { $sort: { total_amount: -1 } } ]); ","Calculate the sum of transaction amounts for different vehicle classes where the axle count exceeds four, organizing the data by vehicle class and presenting it in descending order of the total amount."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the records of transactions occurring on a specific highway and lane, focusing on those with a vehicle class and an axle count that meet predefined specifications, ensuring to include details about the transaction amount and timestamp. The data should be organized in a way that clearly shows the relevant parameters, grouped by necessary criteria to facilitate analysis."
toll_event,"{
  ""collections"": [{
    ""name"": ""toll_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""highway_id"": {""description"": ""Filter by road network""},
            ""lane_number"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""transaction"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""amount"": {""bsonType"": ""decimal""},
                    ""timestamp"": {""bsonType"": ""date""},
                    ""vehicle_class"": {""bsonType"": ""int""},
                    ""axle_count"": {""bsonType"": ""int""}
                  }
                },
                ""identification"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""rfid_tag"": {""bsonType"": ""long""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Extract transaction data for a defined highway and specific lane number, filtering for vehicles that conform to certain class and axle count requirements, while capturing information on transaction amounts and their timestamps. The results should be structured to highlight key information, grouped appropriately for effective review."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.parking_events.find({}); ,"Retrieve all recorded events from the parking data, including details such as parking lot identifiers, vehicle information, entry and exit times, and duration of parking, without any filters or constraints applied."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.parking_events.find({}); ,"Gather all entries of parking activities, capturing information about identifiers for parking lots, vehicle specifics, as well as entry and exit timestamps, along with parking duration, without implementing any conditions or restrictions."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","Retrieve all records of parking events that occurred in the facility identified by the ID ""A1."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","Select and display all parking event records associated with the parking lot designated as ""A1."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 30 } }); ",Retrieve records of parking events where the duration of each event is at least 30 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 30 } }); ",Select entries from parking events that have a duration of no less than 30 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": 2 }); ","Retrieve records of vehicles that occupy exactly two parking spaces, detailing relevant event information associated with each vehicle."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": 2 }); ","List all instances where vehicles are parked in precisely two spaces, including the pertinent event details for these occurrences."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-1234"" }); ","Retrieve all records associated with the vehicle that has the number plate ""XYZ-1234,"" focusing on event responses within the parking records."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-1234"" }); ","Gather data for all entries linked to the vehicle identified by the number plate ""XYZ-1234,"" emphasizing the event responses found in the parking event logs."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 1, ""response.event.entry_time"": { $lt: new Date(""2023-01-01"") } }); ","Retrieve all records of parking events from the specified zone that occurred before January 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 1, ""response.event.entry_time"": { $lt: new Date(""2023-01-01"") } }); ","Select entries pertaining to the identified zone where the entry time of the parking events is earlier than January 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $ne: null } }); ",Retrieve all records where the exit time for parking events has been recorded as not null.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $ne: null } }); ","Select the entries that have an exit time for parking events, ensuring that only those events with a defined exit time are included."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 2000 } }); ",Retrieve all records of parking events where the weight of the vehicles involved is less than 2000 kilograms.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 2000 } }); ",List all parking event details for vehicles with a weight under 2000 kilograms.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Retrieve all parking events that occurred between January 1, 2023, and December 31, 2023, based on the recorded entry times."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Select parking events that have entry times recorded from January 1, 2023, to just before January 1, 2024, and display all relevant details for those events."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": { $in: [""A1"", ""B2"", ""C3""] } }); ","Retrieve all records of parking events where the parking lot identifier is either ""A1,"" ""B2,"" or ""C3."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": { $in: [""A1"", ""B2"", ""C3""] } }); ","List all parking events associated with the parking lot IDs ""A1,"" ""B2,"" or ""C3."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60, $lt: 120 } }); ",Retrieve the records of parking events where the duration of the events falls within the range of more than 60 minutes and less than 120 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60, $lt: 120 } }); ","List the instances of parking events that have a duration between 61 and 119 minutes inclusive, focusing on events that meet these criteria."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $exists: true } }).limit(10); ",Retrieve the first ten records where the data includes a vehicle with a defined space occupied property.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $exists: true } }).limit(10); ","Select up to ten entries that contain information about vehicles, specifically ensuring that the space occupied by each vehicle is documented."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": /^ABC/ }); ","Retrieve all records of parking events where the vehicle's number plate begins with the characters ""ABC."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": /^ABC/ }); ","Identify all entries in the parking events that feature vehicles with number plates starting with ""ABC."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: false } }); ",Retrieve all records for parking events where the exit time has not been recorded yet.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: false } }); ","List all parking events that are still in progress, identified by the absence of an exit time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $gte: 0 } }); ",Retrieve all parking events where the zone identifier is greater than or equal to zero.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $gte: 0 } }); ",List all records of parking events that have a zone identifier of at least zero.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $ne: null } }).sort({ ""response.event.entry_time"": -1 }); ","Retrieve records of parking events where the entry time is not null, and arrange the results in descending order based on the entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $ne: null } }).sort({ ""response.event.entry_time"": -1 }); ","Select parking event entries that have valid entry times, sorted from the most recent to the earliest entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $exists: true } }).count(); ",Count the total number of records where the weight of the vehicle associated with the parking event is available.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $exists: true } }).count(); ",Determine how many entries exist indicating that the vehicle's weight information is present for parking events.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"", ""response.event.vehicle.space_occupied"": { $gt: 0 } }).limit(5); ","Retrieve a maximum of five records of parking events for a specific facility identified by ""A1,"" ensuring that only those with vehicles occupying space are included."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"", ""response.event.vehicle.space_occupied"": { $gt: 0 } }).limit(5); ","Select up to five entries related to parking occurrences at facility ""A1,"" while filtering for instances where the vehicle has taken up parking space."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-1234"", ""response.event.duration_mins"": { $lt: 120 } }); ","Find records of parking events where the vehicle number plate is ""XYZ-1234"" and the duration of the event is less than 120 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-1234"", ""response.event.duration_mins"": { $lt: 120 } }); ","Retrieve details of parking events for the vehicle with the number plate ""XYZ-1234"" that lasted under 120 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $eq: null } }).sort({ ""response.event.entry_time"": 1 }).limit(3); ","Retrieve the first three records of parking events where the exit time has not been recorded, sorted in chronological order by entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $eq: null } }).sort({ ""response.event.entry_time"": 1 }).limit(3); ","Select three instances of parking events that currently have no recorded exit time, arranged in ascending order based on their entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the identifiers of parking lots and the corresponding vehicle details for all parking events that occurred within the last month, ensuring that only events with durations exceeding 30 minutes are included in the results."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the identifiers for parking lots along with vehicle information for all parking events from the past month that lasted longer than 30 minutes, ensuring only relevant entries are returned."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""1A"" }); ",Retrieve all records related to parking events occurring in parking lot number 1A.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""1A"" }); ",Identify any parking event details associated with the facility labeled as parking lot 1A.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 2 }); ",Retrieve all parking event records that correspond to vehicles located in zone 2 of the parking facility.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 2 }); ",Select all entries related to parking events taking place in zone 2 within the parking area.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }); ",Retrieve records of parking events where the duration of stay exceeds 60 minutes. The results will include all relevant details without any additional sorting or limits on the number of entries returned.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }); ","List all parking incidents in which the duration of time spent exceeds 60 minutes, returning every applicable detail without applying any sorting or restrictions on the number of results."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""ABC123"" }); ","Retrieve records for vehicles with the number plate ""ABC123"" from parking event data."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""ABC123"" }); ","Find all parking event entries corresponding to the vehicle identified by the number plate ""ABC123""."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $ne: null } }); ","Retrieve records of parking events where the exit time of the vehicle is not null, indicating that the vehicle has exited the parking facility."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $ne: null } }); ","Select entries from parking events that have a specified exit time, ensuring only those events where a vehicle has left the facility are included."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $lte: 3 } }); ",Retrieve all records of parking events for vehicles that occupy three or fewer spaces.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $lte: 3 } }); ",List the parking events where the number of spaces occupied by the vehicles is at most three.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gte: 2000 } }); ",Retrieve the records of parking events where the weight of the vehicle involved is 2000 kilograms or more.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gte: 2000 } }); ",Select all parking event entries for vehicles that weigh at least 2000 kilograms.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""2B"", ""identifier.zone"": 1 }); ","Retrieve records of parking events where the facility identifier is ""2B"" and the zone number is 1."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""2B"", ""identifier.zone"": 1 }); ","Select parking event entries that belong to parking lot ""2B"" and are associated with zone 1."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gt: new Date(""2023-01-01"") } }); ","Retrieve all records of parking events where the entry time of the events occurred after January 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gt: new Date(""2023-01-01"") } }); ","Collect data on parking events that have an entry time later than January 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $lt: new Date(""2023-12-31"") } }); ","Retrieve all records of parking events where the exit time occurred before December 31, 2023. These results will encompass events logged until the specified date."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $lt: new Date(""2023-12-31"") } }); ","List all parking events with exit times prior to December 31, 2023, capturing any occurrences that were finalized before this date."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 30, $lte: 120 } }); ",Retrieve records of parking events where the duration of the event falls within a range of 30 to 120 minutes.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gte: 30, $lte: 120 } }); ",Select entries of parking events that have a duration lasting between 30 minutes and 2 hours.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $regex: /^XYZ/ } }); ","Retrieve all the parking event records where the vehicle's license plate number begins with ""XYZ."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $regex: /^XYZ/ } }); ","List all entries from the parking events where the vehicle number plate starts with ""XYZ."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": null }); ","Retrieve the records of parking events where the exit time is not recorded, indicating that the vehicles are still parked."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": null }); ","List all parking events that currently lack an exit time, suggesting that the corresponding vehicles have not yet left the parking facility."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": 5, ""identifier.zone"": { $in: [1, 2] } }); ",Retrieve records of parking events where the vehicle occupied five spaces and the associated zone identifier is either 1 or 2.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": 5, ""identifier.zone"": { $in: [1, 2] } }); ",List parking events that involve vehicles taking up five spaces and belong to zones 1 or 2.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 1000, $gte: 100 } }); ","Retrieve the vehicles whose weight is between 100 kg and 999 kg, inclusive, as indicated by the records of parking events."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $lt: 1000, $gte: 100 } }); ","Identify the parking events that include vehicles weighing at least 100 kg but less than 1000 kg, based on their registered data."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $exists: true } }); ","Retrieve all records where the zone identifier exists for parking events, indicating that specific information related to the parking area is present in the dataset."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": { $exists: true } }); ","List all entries that include a zone identifier within the parking events, ensuring that only those records with this specific detail are included."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-06-01""), $lt: new Date(""2023-07-01"") } }); ","Retrieve records of parking events where the entry time is within the month of June 2023, capturing all details related to each event's timing."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-06-01""), $lt: new Date(""2023-07-01"") } }); ","Select all parking event records with an entry time falling between June 1, 2023, and June 30, 2023, including comprehensive information about when vehicles entered the parking facility."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $in: [""AB123"", ""CD456"", ""EF789""] } }); ","Retrieve records of parking events where the vehicle's number plate is either ""AB123"", ""CD456"", or ""EF789""."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": { $in: [""AB123"", ""CD456"", ""EF789""] } }); ","List all parking events that include vehicles with number plates ""AB123"", ""CD456"", or ""EF789""."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 0 } }); ",Retrieve all records where the duration of parking events is greater than zero minutes. This includes all instances where vehicles were parked for a measurable amount of time.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 0 } }); ","List all parking events that lasted longer than zero minutes, ensuring that only instances with a recorded duration are included in the results."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({}, { ""identifier"": 1, ""response.event.vehicle"": 1 }); ","Retrieve the identifiers and details about the vehicles involved in parking events, ensuring that only the relevant vehicle information is included alongside their associated identifiers."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({}, { ""identifier"": 1, ""response.event.vehicle"": 1 }); ","List the identifiers along with the vehicle details for all recorded parking events, focusing solely on the necessary information about the vehicles and their corresponding identifiers."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the entry and exit times, along with the duration in minutes, for vehicles parked in a specific parking lot and zone, ensuring to document the number plate and space occupied. The results must be sorted by the exit time in ascending order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the parking events indicating when vehicles entered and exited a particular parking facility and zone, including the duration of their stay, vehicle number plates, and spaces occupied, ordered by their exit times from earliest to latest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","Retrieve all records that correspond to parking events associated with the parking lot identified as ""A1."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","List all parking events linked to the facility designated by the identifier ""A1."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); ","Retrieve records of parking events where the entry time is between January 1, 2023, and January 31, 2023. This selection should include any events that fall within this date range."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.entry_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-02-01"") } }); ","Extract data concerning parking events that occurred from January 1, 2023, up to but not including February 1, 2023, focusing specifically on the entry times during this period."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }).sort({ ""response.event.entry_time"": -1 }); ","Select the records of parking events where the duration of each event exceeds 60 minutes, and arrange the results in descending order based on the entry time of the vehicles."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 60 } }).sort({ ""response.event.entry_time"": -1 }); ","Find all parking events lasting longer than 60 minutes, sorted by the time of entry in reverse order to highlight the most recent occurrences first."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $lte: 2 } }).limit(10); ",Retrieve up to ten records where the space occupied by vehicles is two or fewer in size.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $lte: 2 } }).limit(10); ",Select a maximum of ten entries where vehicles occupy no more than two spaces.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""identifier.zone"": 1 } }, { $group: { _id: ""$identifier.parking_lot_id"", totalEvents: { $sum: 1 } } } ]); ",Count the total number of events recorded for each parking facility where the zone is designated as 1. The results should group the data by the parking facility identifier.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""identifier.zone"": 1 } }, { $group: { _id: ""$identifier.parking_lot_id"", totalEvents: { $sum: 1 } } } ]); ","Aggregate the event counts by parking facility for all occurrences within zone 1, ensuring that the output reflects the total number of events corresponding to each facility's identifier."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: null, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Calculate the average duration in minutes of parking events recorded, with no specific groupings applied to the data, effectively aggregating all duration values into a single average."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: null, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Determine the mean value of parking duration in minutes across all recorded events, without any subdivisions or categories affecting the result, producing a singular average figure."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$response.event.vehicle.number_plate"", totalWeight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $match: { totalWeight: { $gt: 3000 } } } ]); ","Aggregate the total weight of vehicles based on their number plates, ensuring that only those with a total weight exceeding 3000 kilograms are included in the results."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$response.event.vehicle.number_plate"", totalWeight: { $sum: ""$response.event.vehicle.weight_kg"" } } }, { $match: { totalWeight: { $gt: 3000 } } } ]); ","Calculate the sum of vehicle weights grouped by number plates, and filter the results to only display those that surpass a total weight of 3000 kilograms."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }); ","Retrieve all parking event records where the exit time for the event is recorded, indicating that the vehicle has left the parking facility."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }); ","Select all entries from parking events that have a recorded exit time, signifying that a vehicle has exited the parking lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lt: new Date() } } }, { $sort: { ""response.event.entry_time"": 1 } }, { $project: { ""vehicle"": ""$response.event.vehicle.number_plate"", ""entry_time"": ""$response.event.entry_time"" } } ]); ","Retrieve the number plates of vehicles and their corresponding entry times for all parking events where the entry time occurred before the current date, with the results sorted in ascending order based on the entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $lt: new Date() } } }, { $sort: { ""response.event.entry_time"": 1 } }, { $project: { ""vehicle"": ""$response.event.vehicle.number_plate"", ""entry_time"": ""$response.event.entry_time"" } } ]); ","List the entry times and vehicle number plates for parking events that took place prior to the current date, ensuring that the results are organized in chronological order by the entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""B2"", ""response.event.duration_mins"": { $gte: 30, $lte: 120 } }); ","Retrieve the records of parking events from the facility with identifier ""B2"" where the duration of the event falls within a range of 30 to 120 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""B2"", ""response.event.duration_mins"": { $gte: 30, $lte: 120 } }); ","Select all parking event records associated with the parking lot identified as ""B2"" that show an event duration between 30 and 120 minutes, inclusive."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": { $gte: 3 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ","Count the number of parking events where the number of parking spaces occupied by vehicles is three or more, grouping the results by the identifiers of the parking lots."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": { $gte: 3 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ","Gather the total count of parking events for vehicles occupying three or more parking spaces, categorizing the counts by the parking lot identifiers."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", totalDuration: { $sum: ""$response.event.duration_mins"" } } }, { $sort: { totalDuration: -1 } } ]); ","Aggregate the total duration of parking for each zone, grouping the results by zone identifier, and then sort these totals in descending order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", totalDuration: { $sum: ""$response.event.duration_mins"" } } }, { $sort: { totalDuration: -1 } } ]); ","Calculate the sum of parking durations for each zone by its identifier, organizing the totals so that the zones are listed from the longest to the shortest parking duration."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gt: new Date(""2023-01-01""), $lt: new Date(""2023-01-31"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", minExitTime: { $min: ""$response.event.exit_time"" } } } ]); ","Retrieve the identifier of each parking lot along with the earliest recorded exit time of vehicles that entered between January 1, 2023, and January 31, 2023. The results should be grouped by parking lot identifier."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gt: new Date(""2023-01-01""), $lt: new Date(""2023-01-31"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", minExitTime: { $min: ""$response.event.exit_time"" } } } ]); ","List each parking lot and the minimum exit time for vehicles that had entry times from January 1 through January 31, 2023, with the data aggregated by parking lot identifier."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gt: 1500 } }).sort({ ""response.event.exit_time"": -1 }).limit(5); ","Retrieve the most recent five records of parking events where the vehicle's weight exceeds 1500 kilograms, ordered by exit time in descending sequence."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.weight_kg"": { $gt: 1500 } }).sort({ ""response.event.exit_time"": -1 }).limit(5); ","Select the latest five parking event entries featuring vehicles that weigh more than 1500 kilograms, arranged in descending order based on their exit time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""identifier.zone"": { $in: [1, 2] } } }, { $group: { _id: null, totalEvents: { $sum: 1 }, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ",Count the total number of parking events and calculate the average duration in minutes for events occurring in either zone 1 or zone 2. This should be done without grouping by any specific identifier.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""identifier.zone"": { $in: [1, 2] } } }, { $group: { _id: null, totalEvents: { $sum: 1 }, avgDuration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Determine the cumulative total of parking events and the mean duration in minutes for events that took place in zones 1 or 2, ensuring that the results are not organized by any particular identifier."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", vehicleCount: { $addToSet: ""$response.event.vehicle.number_plate"" } } }, { $project: { lot: ""$_id"", vehicleCount: { $size: ""$vehicleCount"" } } } ]); ","Group the records by parking lot identifier and compile a unique list of vehicle number plates for each lot. Then, display the parking lot identifier along with the count of distinct vehicles associated with that lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", vehicleCount: { $addToSet: ""$response.event.vehicle.number_plate"" } } }, { $project: { lot: ""$_id"", vehicleCount: { $size: ""$vehicleCount"" } } } ]); ","Aggregate the data by parking lot ID to create a set of unique vehicle number plates for each location, and then present the lot identification alongside the total count of different vehicles registered in that area."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $group: { _id: { parking_lot: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"" }, totalDuration: { $sum: ""$response.event.duration_mins"" } } } ]); ","Retrieve the total duration of parking events in minutes, grouped by the parking lot identifier and zone, for instances where an exit time is recorded. The results will summarize the duration of all events per unique parking lot and zone combination."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $group: { _id: { parking_lot: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"" }, totalDuration: { $sum: ""$response.event.duration_mins"" } } } ]); ","Summarize the aggregate parking duration in minutes for each unique combination of parking lot identifier and zone, including only those events that have an exit time available. The outcome will provide the total duration for all applicable events grouped accordingly."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve all parking events that occurred in a specified parking facility and zone, focusing on details such as entry and exit times, duration of stay in minutes, vehicle number plates, occupied space, and vehicle weight. The results should be presented in a structured format while filtering for specific identifiers of the parking lot and its respective zone."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Identify parking events associated with a particular facility and zone, capturing essential information including the times of entry and exit, total time parked in minutes, the vehicle's registration number, the space it occupied, and its weight. Ensure the results adhere to the designated identifiers of the parking lot and zone for accurate event retrieval."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","Retrieve all records of parking events that are associated with the parking lot identified as ""A1."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.find({ ""identifier.parking_lot_id"": ""A1"" }); ","List all parking events linked to the facility labeled ""A1."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 30 } }); ","Find records of parking events where the duration of the event exceeds 30 minutes, ensuring that only those entries meeting this condition are included in the results."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.duration_mins"": { $gt: 30 } }); ","Select instances of parking events with a duration longer than 30 minutes, retrieving all relevant details for those specific cases."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-123"" }); ","Fetch all records of parking events where the vehicle's number plate is ""XYZ-123."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.number_plate"": ""XYZ-123"" }); ","Gather all instances of parking activities associated with the vehicle identified by the number plate ""XYZ-123."""
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 2 }).sort({ ""response.event.entry_time"": 1 }); ","Retrieve records of parking events that occurred in zone 2, and arrange the results in ascending order based on the entry time of each event."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.zone"": 2 }).sort({ ""response.event.entry_time"": 1 }); ","Select parking event entries from zone 2 and sort these entries by the time they were recorded as starting, from the earliest to the latest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $lt: 60 } } }, { $group: { _id: ""$identifier.zone"", total_count: { $sum: 1 } } } ]); ",Identify the zones where parking events lasted less than 60 minutes and calculate the total number of such events for each zone. The results should be grouped by zone and display the count of events for each.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $lt: 60 } } }, { $group: { _id: ""$identifier.zone"", total_count: { $sum: 1 } } } ]); ","Count the number of parking events that had a duration of under 60 minutes, grouping the results by zone to show the total for each zone."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", avg_duration: { $avg: ""$response.event.duration_mins"" } } }, { $match: { avg_duration: { $gt: 10 } } } ]); ","Group the records by the unique identifier of each parking facility and calculate the average duration of parking events in minutes for each facility. Additionally, include only those facilities where the average duration exceeds 10 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", avg_duration: { $avg: ""$response.event.duration_mins"" } } }, { $match: { avg_duration: { $gt: 10 } } } ]); ","Aggregate the data by parking lot identifiers to determine the mean parking duration in minutes for events associated with each lot, filtering the results to show only those lots with an average parking duration greater than 10 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $sort: { ""response.event.exit_time"": -1 } }, { $limit: 5 } ]); ","Retrieve the most recent five parking events, ordered by the exit time in descending fashion to show the latest occurrences first."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $sort: { ""response.event.exit_time"": -1 } }, { $limit: 5 } ]); ","List the five latest parking events, sorted by exit time from newest to oldest, displaying only the most recent entries."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: null, total_events: { $sum: 1 }, total_weight: { $sum: ""$response.event.vehicle.weight_kg"" } } } ]); ","Count the total number of parking events and the sum of vehicle weights for events where the exit time occurred between January 1, 2023, and December 31, 2023. Data should be aggregated without any group distinctions."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $group: { _id: null, total_events: { $sum: 1 }, total_weight: { $sum: ""$response.event.vehicle.weight_kg"" } } } ]); ",Calculate the overall number of parking events along with the total weight of vehicles for all instances that have an exit time falling within the year 2023. The results should be consolidated without specific group identifiers.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gte: 1, $lte: 5 } }).sort({ ""response.event.entry_time"": 1 }); ",Retrieve the events where the vehicles occupied between one and five parking spaces. The results should be arranged in ascending order based on the entry time of the events.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gte: 1, $lte: 5 } }).sort({ ""response.event.entry_time"": 1 }); ","Identify the parking events where the number of occupied spaces ranges from one to five, sorting the resulting data by the entry time in chronological order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.weight_kg"": { $gt: 1000 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ","Count how many parking events occurred in different facilities where the weight of the vehicles exceeded 1000 kilograms, summarizing the results by each parking lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.weight_kg"": { $gt: 1000 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ","Calculate the total number of parking events for each facility where vehicles weighed more than 1000 kilograms, grouping the results by the parking lot identifier."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"", entry_hour: { $hour: ""$response.event.entry_time"" } } }, { $match: { entry_hour: { $gte: 9, $lt: 17 } } } ]); ","Retrieve the parking lot identifiers and the durations of parking events for vehicles that entered the facility between 9 AM and 5 PM. The results should only include the hour of entry, and the durations in minutes for each event."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"", entry_hour: { $hour: ""$response.event.entry_time"" } } }, { $match: { entry_hour: { $gte: 9, $lt: 17 } } } ]); ",List the identifiers of parking lots alongside the durations of parking events occurring during the hours from 9 to 17. Include the entry hour for each event in minutes of duration while filtering to show only those entries within this time range.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).project({ identifier: 1, ""response.event.entry_time"": 1 }); ","Retrieve the identifiers and entry times of parking events where there is a recorded exit time, ensuring to include only the relevant data fields."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.exit_time"": { $exists: true } }).project({ identifier: 1, ""response.event.entry_time"": 1 }); ","List the identifiers along with the entry times for parking events that have an exit time documented, extracting specifically these details for review."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", total_duration: { $sum: ""$response.event.duration_mins"" }, event_count: { $sum: 1 } } }, { $project: { average_duration: { $divide: [""$total_duration"", ""$event_count""] } } } ]); ",Calculate the average duration of parking events for each facility by first summing the total duration of all events and counting the number of events recorded for each facility. The result should provide the average duration per event for each facility based on the data gathered.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", total_duration: { $sum: ""$response.event.duration_mins"" }, event_count: { $sum: 1 } } }, { $project: { average_duration: { $divide: [""$total_duration"", ""$event_count""] } } } ]); ","Determine the average parking duration for events grouped by facility, which involves aggregating the total time spent across all events and counting the total number of events per facility. The final output will reflect the average event duration for each facility based on this aggregation."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": 1 } }, { $sort: { ""response.event.entry_time"": 1 } } ]); ","Select all records where a vehicle occupies exactly one parking space, and arrange the results in ascending order of the vehicle's entry time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.space_occupied"": 1 } }, { $sort: { ""response.event.entry_time"": 1 } } ]); ","Identify all instances in which a vehicle is parked in a single space, sorting the outcomes by the time the vehicle entered the parking facility from earliest to latest."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A2"", ""response.event.exit_time"": { $gt: new Date(""2023-01-01"") } }).limit(10); ","Retrieve up to ten records for parking events from a specific facility identified by ""A2,"" where the vehicle's exit occurred after January 1, 2023."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""identifier.parking_lot_id"": ""A2"", ""response.event.exit_time"": { $gt: new Date(""2023-01-01"") } }).limit(10); ","Select a maximum of ten entries regarding parking events at facility ""A2,"" ensuring that only those records with an exit time later than January 1, 2023, are included."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: ""other_collection"", localField: ""identifier.parking_lot_id"", foreignField: ""parking_lot_id"", as: ""parking_info"" } }, { $unwind: ""$parking_info"" } ]); ","Retrieve records by linking parking events with detailed parking information based on the identification of the parking lot, ensuring each record is expanded to include the associated details from the related dataset."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: ""other_collection"", localField: ""identifier.parking_lot_id"", foreignField: ""parking_lot_id"", as: ""parking_info"" } }, { $unwind: ""$parking_info"" } ]); ","Combine the data of parking events with corresponding parking lot details, using the parking lot identifier to match and display each event along with its related parking information in a single output."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $addFields: { total_parking_time: { $subtract: [""$response.event.exit_time"", ""$response.event.entry_time""] } } }, { $project: { total_parking_time: 1 } } ]); ","Calculate the total parking time for each parking event by subtracting the entry time from the exit time, and retrieve this total parking duration for further analysis."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $addFields: { total_parking_time: { $subtract: [""$response.event.exit_time"", ""$response.event.entry_time""] } } }, { $project: { total_parking_time: 1 } } ]); ","Determine the total duration that vehicles remained parked by finding the difference between their exit and entry times, and present this information for each parking event."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve records of parking events that include the vehicle number plate and weight for vehicles that were parked in a specific parking lot and zone, displaying only those records where the parking duration exceeds a certain threshold. The results should be summarized by counting the number of vehicles and arranged in descending order based on the total count."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Summarize the number of vehicles parked in a designated parking lot and zone by their license plate and weight, ensuring to only include entries where the parking duration surpasses a specific limit. The output should present these details sorted by the highest vehicle count."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gt: 60 } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_duration: { $sum: ""$response.event.duration_mins"" } } }, { $sort: { total_duration: -1 } } ]); ","Retrieve the total duration of parking events that lasted more than 60 minutes, grouped by the parking lot identifier, and display the results in descending order based on the total duration."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gt: 60 } } }, { $group: { _id: ""$identifier.parking_lot_id"", total_duration: { $sum: ""$response.event.duration_mins"" } } }, { $sort: { total_duration: -1 } } ]); ","Aggregate the total duration of all parking events exceeding 60 minutes, organizing the data by each parking lot's identifier and sorting the output from highest to lowest total duration."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"" }, average_weight: { $avg: ""$response.event.vehicle.weight_kg"" } } }, { $match: { average_weight: { $lt: 2000 } } } ]); ","Calculate the average vehicle weight for each parking lot and zone combination, but only include those where the average weight is below 2000 kilograms. The data should be aggregated based on the unique identifiers for parking lots and zones."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"" }, average_weight: { $avg: ""$response.event.vehicle.weight_kg"" } } }, { $match: { average_weight: { $lt: 2000 } } } ]); ","Determine the average weight of vehicles parked in each zone of every facility, filtering to include only those zones where this average weight is less than 2000 kilograms, grouped by the identifiers for each parking lot and zone."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { vehicle_number: ""$response.event.vehicle.number_plate"", entry_time: ""$response.event.entry_time"", exit_time: ""$response.event.exit_time"", duration: { $subtract: [""$response.event.exit_time"", ""$response.event.entry_time""] } } }, { $match: { duration: { $gt: 3600000 } } }, { $sort: { duration: -1 } } ]); ","Retrieve the vehicle numbers, entry times, exit times, and duration of parking for vehicles that have been parked for more than one hour, with the results displayed in descending order based on the duration of their stay."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { vehicle_number: ""$response.event.vehicle.number_plate"", entry_time: ""$response.event.entry_time"", exit_time: ""$response.event.exit_time"", duration: { $subtract: [""$response.event.exit_time"", ""$response.event.entry_time""] } } }, { $match: { duration: { $gt: 3600000 } } }, { $sort: { duration: -1 } } ]); ","List the vehicle number plates along with their entry and exit times and the total duration of parking for instances exceeding one hour, sorted in decreasing order based on the duration of their parking time."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: ""parking_events"", localField: ""identifier.parking_lot_id"", foreignField: ""identifier.parking_lot_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $group: { _id: ""$identifier.parking_lot_id"", total_events: { $sum: 1 } } } ]); ","Count the total number of events for each parking facility, joining related entries based on the parking lot identifier. Each parking lot's total event count should be calculated after combining all related event records."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: ""parking_events"", localField: ""identifier.parking_lot_id"", foreignField: ""identifier.parking_lot_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $group: { _id: ""$identifier.parking_lot_id"", total_events: { $sum: 1 } } } ]); ","Aggregate the number of distinct events associated with each parking lot by linking related event entries using the parking lot identifier, ensuring totals are calculated for every facility based on the linked records."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gt: 2 } }).sort({ ""response.event.entry_time"": 1 }); ","Select the records where the number of parking spaces occupied by vehicles is greater than two, and arrange the results in ascending order based on the entry time of the events."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.find({ ""response.event.vehicle.space_occupied"": { $gt: 2 } }).sort({ ""response.event.entry_time"": 1 }); ","Identify the entries where vehicles occupy more than two parking spaces, sorting the outcomes by the time of entry in chronological order."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: ISODate(""2023-01-01T00:00:00Z""), $lt: ISODate(""2023-12-31T23:59:59Z"") } } }, { $group: { _id: null, total_vehicles: { $sum: 1 }, average_duration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Retrieve the total number of vehicles and the average parking duration for all events that occurred between January 1, 2023, and December 31, 2023. The results should be aggregated without any specific grouping key."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: ISODate(""2023-01-01T00:00:00Z""), $lt: ISODate(""2023-12-31T23:59:59Z"") } } }, { $group: { _id: null, total_vehicles: { $sum: 1 }, average_duration: { $avg: ""$response.event.duration_mins"" } } } ]); ","Count all vehicles and calculate the average time spent parked during events that took place from January 1, 2023, to December 31, 2023, presenting the overall totals without distinguishing between individual entries."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { duration: ""$response.event.duration_mins"", vehicle_weight: ""$response.event.vehicle.weight_kg"" } }, { $match: { $expr: { $gt: [""$vehicle_weight"", { $multiply: [""$duration"", 5] }] } } } ]); ","Extract the duration of parking events in minutes alongside the weight of vehicles involved, specifically including only those instances where the vehicle weight surpasses five times the duration of the parking."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { duration: ""$response.event.duration_mins"", vehicle_weight: ""$response.event.vehicle.weight_kg"" } }, { $match: { $expr: { $gt: [""$vehicle_weight"", { $multiply: [""$duration"", 5] }] } } } ]); ","Select the parking duration in minutes and the corresponding vehicle weight, filtering to retain only those records where the vehicle's weight exceeds five times the duration spent parked."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", total_space: { $sum: ""$response.event.vehicle.space_occupied"" } } }, { $sort: { total_space: -1 } } ]); ","Aggregate the total space occupied by vehicles in each parking zone, grouping the results by zone identifiers and sorting the zones in descending order based on the total space occupied."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.zone"", total_space: { $sum: ""$response.event.vehicle.space_occupied"" } } }, { $sort: { total_space: -1 } } ]); ","Sum the space occupied by vehicles for each zone, organizing the results according to zone identifiers and arranging the zones in order from highest to lowest total space used."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { duration: ""$response.event.duration_mins"", vehicle_number: ""$response.event.vehicle.number_plate"" } }, { $match: { duration: { $gte: 30 } } }, { $group: { _id: ""$vehicle_number"", total_duration: { $sum: ""$duration"" } } } ]); ","Retrieve the total duration of parking events for each vehicle that has been parked for at least 30 minutes, displaying the vehicle's number plate and summing up the total time parked across all relevant events."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { duration: ""$response.event.duration_mins"", vehicle_number: ""$response.event.vehicle.number_plate"" } }, { $match: { duration: { $gte: 30 } } }, { $group: { _id: ""$vehicle_number"", total_duration: { $sum: ""$duration"" } } } ]); ","Aggregate the parking duration for each vehicle that spent 30 minutes or more in the lot, including their number plates and compiling a total duration for all applicable instances."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", average_space: { $avg: ""$response.event.vehicle.space_occupied"" } } }, { $sort: { average_space: -1 } }, { $limit: 5 } ]); ","Calculate the average space occupied by vehicles in each parking facility, grouping the results by facility identifier. The output should be sorted in descending order based on the average space occupied, limited to the top five facilities."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $group: { _id: ""$identifier.parking_lot_id"", average_space: { $avg: ""$response.event.vehicle.space_occupied"" } } }, { $sort: { average_space: -1 } }, { $limit: 5 } ]); ","Determine the average vehicle space utilization for each parking lot, organized by the unique identifier of the lot. The results should be sorted in descending order of average space occupied and restrict output to the top five facilities."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $project: { parking_lot_id: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"" } }, { $group: { _id: ""$parking_lot_id"", total_duration: { $sum: ""$duration"" } } }, { $sort: { total_duration: -1 } } ]); ",Retrieve the total parking duration for each facility where the exit time of parking events is recorded. The results should be grouped by facility identifier and sorted in descending order based on the total duration of parking.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.exit_time"": { $exists: true } } }, { $project: { parking_lot_id: ""$identifier.parking_lot_id"", duration: ""$response.event.duration_mins"" } }, { $group: { _id: ""$parking_lot_id"", total_duration: { $sum: ""$duration"" } } }, { $sort: { total_duration: -1 } } ]); ",Summarize the overall parking duration for each facility that has logged exit times for events. Group the results by the facility identifier and order them from the highest to the lowest total duration.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: ""parking_events"", localField: ""identifier.zone"", foreignField: ""identifier.zone"", as: ""zone_events"" } }, { $unwind: ""$zone_events"" }, { $group: { _id: ""$identifier.zone"", total_weight: { $sum: ""$zone_events.response.event.vehicle.weight_kg"" } } }, { $sort: { total_weight: -1 } } ]); ","Aggregate the total weight of vehicles by parking zone, grouping the results based on the zone identifier, and sorting these groups in descending order of total weight. This process involves connecting parking events records that share the same zone and calculating the sum of vehicle weights for each zone."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $lookup: { from: ""parking_events"", localField: ""identifier.zone"", foreignField: ""identifier.zone"", as: ""zone_events"" } }, { $unwind: ""$zone_events"" }, { $group: { _id: ""$identifier.zone"", total_weight: { $sum: ""$zone_events.response.event.vehicle.weight_kg"" } } }, { $sort: { total_weight: -1 } } ]); ","Calculate the total weight of vehicles for each parking zone, organizing the data by the zone identifier and sorting the grouped totals from highest to lowest weight. This involves joining records with matching zone identifiers and summing the weights of vehicles associated with each identified zone."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.weight_kg"": { $lt: 1000 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ","Retrieve the total count of parking events for each parking facility where the weight of the vehicles is less than 1000 kilograms. The results should include one entry for each parking lot, with the total number of events recorded for each."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.vehicle.weight_kg"": { $lt: 1000 } } }, { $group: { _id: ""$identifier.parking_lot_id"", count: { $sum: 1 } } } ]); ",Count the number of parking events associated with each parking lot where vehicles weigh under 1000 kilograms. The output should display a tally for each facility based on the qualifying events recorded.
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"", duration: ""$response.event.duration_mins"" } }, { $group: { _id: { parking_lot_id: ""$parking_lot_id"", zone: ""$zone"" }, total_duration: { $sum: ""$duration"" } } }, { $sort: { total_duration: 1 } } ]); ","Calculate the total duration of parking events for each parking lot and zone combination, displaying the parking lot identifier, zone, and the cumulative duration in minutes. The results should be organized in ascending order based on the total duration calculated."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { parking_lot_id: ""$identifier.parking_lot_id"", zone: ""$identifier.zone"", duration: ""$response.event.duration_mins"" } }, { $group: { _id: { parking_lot_id: ""$parking_lot_id"", zone: ""$zone"" }, total_duration: { $sum: ""$duration"" } } }, { $sort: { total_duration: 1 } } ]); ","Aggregate the durations of parking events by parking lot and zone, presenting the identifiers and total minutes parked, while ensuring the output is sorted from the least to the greatest total duration."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { entry_time: ""$response.event.entry_time"", exit_time: ""$response.event.exit_time"", duration: { $divide: [{ $subtract: [""$response.event.exit_time"", ""$response.event.entry_time""] }, 1000 * 60] } } }, { $match: { duration: { $gt: 45 } } } ]); ","Retrieve the entry and exit times of events that occurred in a parking facility, along with the calculated duration of each event expressed in minutes, specifically for those events where the duration exceeds 45 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $project: { entry_time: ""$response.event.entry_time"", exit_time: ""$response.event.exit_time"", duration: { $divide: [{ $subtract: [""$response.event.exit_time"", ""$response.event.entry_time""] }, 1000 * 60] } } }, { $match: { duration: { $gt: 45 } } } ]); ","List the entry and exit times for parking events, including the duration in minutes for each event, filtering the results to include only those events that lasted longer than 45 minutes."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: ISODate(""2023-01-01T00:00:00Z"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", average_duration: { $avg: ""$response.event.duration_mins"" } } }, { $sort: { average_duration: -1 } } ]); ","Calculate the average duration in minutes of parking events that began on or after January 1, 2023, for each parking facility. The results should be organized in descending order of average duration, grouped by the identifier of the parking lot."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.entry_time"": { $gte: ISODate(""2023-01-01T00:00:00Z"") } } }, { $group: { _id: ""$identifier.parking_lot_id"", average_duration: { $avg: ""$response.event.duration_mins"" } } }, { $sort: { average_duration: -1 } } ]); ","Determine the average time, in minutes, that vehicles spent parked for events starting from January 1, 2023, across different parking lots, with the output ranked from the longest to the shortest average duration and categorized by the parking lot identifier."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gte: 30 } } }, { $project: { vehicle_number: ""$response.event.vehicle.number_plate"", zone: ""$identifier.zone"" } }, { $group: { _id: ""$zone"", vehicles: { $addToSet: ""$vehicle_number"" } } } ]); ","Retrieve the unique vehicle registration numbers from parking events that lasted at least 30 minutes, organized by the parking zone they occupied. Each zone should display a distinct list of vehicle numbers."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.parking_events.aggregate([ { $match: { ""response.event.duration_mins"": { $gte: 30 } } }, { $project: { vehicle_number: ""$response.event.vehicle.number_plate"", zone: ""$identifier.zone"" } }, { $group: { _id: ""$zone"", vehicles: { $addToSet: ""$vehicle_number"" } } } ]); ","Gather the distinct vehicle number plates from events where the duration was 30 minutes or longer, grouped by the zones of the parking facilities, ensuring each zone shows a unique set of vehicle registrations."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the identifier of the parking facility along with the details of each vehicle's entry and exit times, including the duration of parking and the weight of the vehicle, for events occurring within a specific parking lot. The results should include vehicles parked for a minimum of a defined duration and be listed in chronological order of their entry times."
parking_event,"{
  ""collections"": [{
    ""name"": ""parking_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""parking_lot_id"": {""description"": ""Filter by facility""},
            ""zone"": {""bsonType"": ""int""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""entry_time"": {""bsonType"": ""date""},
                ""exit_time"": {""bsonType"": ""date""},
                ""duration_mins"": {""bsonType"": ""double""},
                ""vehicle"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""number_plate"": {""bsonType"": ""string""},
                    ""space_occupied"": {""bsonType"": ""int""},
                    ""weight_kg"": {""bsonType"": ""double""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Summarize the vehicle entry and exit events within a designated parking lot by providing the facility identifier, time spent parked, and vehicle weight, ensuring that only those vehicles meeting a minimum duration requirement are included, with the records arranged by their entry times."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""123"" }); ","Retrieve all records of patient events associated with the medical facility identified by the hospital ID ""123."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""123"" }); ","Select all patient event data linked to the hospital that has the identifier ""123."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""A2"" }); ","Retrieve the records of patient events associated with the department identified as ""A2."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": ""A2"" }); ","Select all entries related to patient activities occurring in the ""A2"" ward."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Emergency"" }); ","Retrieve all records concerning patient events where the priority of the response event is classified as ""Emergency."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Emergency"" }); ","List every instance of patient events that have been marked with an ""Emergency"" priority in their response events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"" }); ","Identify all records where the alert type associated with patient events is classified as ""VitalSigns."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"" }); ","Select entries that indicate a patient event with an alert type categorized as ""VitalSigns."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Retrieve the records of patient events where the heart rate measured is greater than 100 beats per minute. The results should reflect only those instances that meet this specific biometric criterion.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Identify patient events that exhibit a heart rate of over 100 beats per minute. Display only the entries corresponding to this elevated biometric measure.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 80 } }); ",Retrieve records of patient events where the recorded blood pressure in biometrics is less than 80.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 80 } }); ",Select entries related to patient events that indicate a blood pressure measurement of under 80 within the biometrics data.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ",Retrieve all records of patient events where the oxygen saturation level recorded in the biometrics is 95 or higher.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ",List all patient events with an oxygen saturation measurement of at least 95 in the biometrics data.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B15"" }); ","Obtain all records of patient events for individuals assigned to bed ""B15."" The data should exclusively reflect the events associated with this specific bed identifier."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B15"" }); ","Gather entries related to patient events for those located in bed ""B15,"" ensuring that only records linked to this particular bed ID are retrieved."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $ne: ""Routine"" } }); ","Retrieve records of patient events where the event priority is not categorized as ""Routine."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $ne: ""Routine"" } }); ","Identify instances of patient events that are classified with a priority other than ""Routine."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ",Retrieve records that include movement patterns within the biometrics of patient events. These records must specifically have entries where the movement patterns are present in the event's response.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ",Identify all patient events that feature biometrics with existing movement patterns. The search should focus on situations where these movement patterns are documented in the event responses.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.findOne({ ""identifier.hospital_id"": ""456"", ""identifier.ward_number"": ""B3"" }); ","Retrieve a single record for a patient event associated with a specific medical facility identified by ""456"" and located in department ""B3."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.findOne({ ""identifier.hospital_id"": ""456"", ""identifier.ward_number"": ""B3"" }); ","Obtain one instance of a patient event linked to the hospital designated by ""456"" within the ward known as ""B3."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.countDocuments({ ""response.event.alert_type"": ""FallDetected"" }); ","Count the total number of occurrences where the type of alert triggered was classified as ""FallDetected"" in the patient events records."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.countDocuments({ ""response.event.alert_type"": ""FallDetected"" }); ","Determine how many times a ""FallDetected"" alert has been recorded among patient events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }).sort({ ""identifier.hospital_id"": 1 }); ","Retrieve records of events marked as urgent, and arrange these records in ascending order based on the hospital identifier."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }).sort({ ""identifier.hospital_id"": 1 }); ",Select urgent priority events and sort the results by the identifier of the medical facility in increasing order.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""123"", ""response.event.alert_type"": ""Medication"" }).sort({ ""response.event.priority"": -1 }); ","Retrieve events related to medication alerts from the medical facility with the identifier ""123,"" prioritizing them in descending order based on their urgency level."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""123"", ""response.event.alert_type"": ""Medication"" }).sort({ ""response.event.priority"": -1 }); ","Select medication-related alerts occurring at the hospital identified by ""123"" and sort the results from highest to lowest priority based on the urgency of the event."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ",Retrieve the records of patient events where the number of biometric measurements recorded in the event details equals three.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ",Select the cases of patient events that include exactly three biometric data entries within the event's response.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().limit(10); ","Retrieve a set of up to ten records related to patient events, focusing on various medical alerts and their respective biometrics without any further specifications or criteria."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().limit(10); ","Gather a maximum of ten entries documenting patient events that include information on different health-related alerts and their associated biometrics, without applying additional conditions or filters."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $lt: 60 } }).sort({ ""response.event.alert_type"": 1 }); ",Select records where the heart rate measurements are below 60 and arrange the results in ascending order based on the type of alert associated with the event.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $lt: 60 } }).sort({ ""response.event.alert_type"": 1 }); ","Gather entries that indicate heart rate readings of less than 60, ensuring that the outcome is sorted in increasing order of alert type related to the event."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": { $in: [""B1"", ""B2"", ""B3""] } }); ","Select the records of patient events where the bed identifier is either ""B1,"" ""B2,"" or ""B3."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": { $in: [""B1"", ""B2"", ""B3""] } }); ","Retrieve all entries related to patient events that correspond to the specified bed IDs: ""B1,"" ""B2,"" or ""B3."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $elemMatch: { oxygen_saturation: { $lt: 90 } } } }); ",Retrieve records of instances where the oxygen saturation levels in the biometrics data are below 90.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $elemMatch: { oxygen_saturation: { $lt: 90 } } } }); ",List all occurrences where biometrics indicate that oxygen saturation falls under 90.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve data regarding patient events, specifically focusing on the medical facility, department, and patient bed identifiers. The results should include details about the event's priority, alert type, and biometrics measurements, such as heart rate and blood pressure, with groupings and any necessary filtering applied for specific conditions."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Select information on patient events, detailing identifiers for the hospital, ward, and bed, along with insights into event priority, alert classifications, and biometric data, ensuring that relevant filters and groupings are utilized to narrow down the results effectively."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H123"" }); ","Retrieve all records of patient events where the identifier indicates the hospital associated with the identifier ""H123."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H123"" }); ","Collect all entries related to patient events that match the identifier for the medical facility designated as ""H123."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 5 }); ","Retrieve records of patient events specifically for those admitted to ward number 5, capturing all relevant data associated with their medical events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 5 }); ","Identify patient event records that pertain to individuals in ward number 5, ensuring all associated event details are included in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B101"" }); ","Retrieve all records associated with the designated patient bed identified as ""B101"" in the context of patient events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B101"" }); ","Obtain data related to patient events specifically for the bed labeled ""B101"" within the healthcare facility."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }); ",Retrieve records of patient events where the response indicates an event designated with an urgent priority.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }); ",Select patient event records that reflect an urgent priority in their response events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); ",Retrieve all records where the alert type indicates that a fall has been detected.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); ",Gather entries that specifically report a fall detection as the alert type.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Identify events where the heart rate recorded in the biometrics exceeds 100 beats per minute. The results should include all occurrences that meet this condition.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Find instances of patient events that have a heart rate measurement in the biometrics indicating over 100 beats per minute. Return all records that match this criterion.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 120 } }); ",Retrieve all records where the blood pressure measurement in the biometric data of patient events is less than 120.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.blood_pressure"": { $lt: 120 } }); ",Select entries indicating that the blood pressure recorded in the biometrics for patient events is below 120.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ",Retrieve records of patient events where the oxygen saturation level in the biometrics data is greater than or equal to 95.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $gte: 95 } }); ",Gather all patient event records that have an oxygen saturation measurement of 95 or higher within their biometrics information.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ","Retrieve records where the movement patterns in the biometrics event data are present, indicating that these events include specific movement metrics."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true } }); ","Select entries that contain movement pattern details within the biometrics section of the event responses, confirming the existence of these specific data points."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ",Retrieve records where the associated biometric data for each event includes exactly three entries.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics"": { $size: 3 } }); ",Select instances that have a precise count of three biometrics recorded in the event response data.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ $or: [ { ""identifier.hospital_id"": ""H123"" }, { ""identifier.ward_number"": 1 } ] }); ","Retrieve records of patient events where the medical facility identifier is ""H123"" or the department number is 1."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ $or: [ { ""identifier.hospital_id"": ""H123"" }, { ""identifier.ward_number"": 1 } ] }); ","Select patient event records that either belong to the hospital with the identifier ""H123"" or are associated with the ward number 1."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Routine"" }).sort({ ""response.event.alert_type"": 1 }); ","Select records where the priority level of the events is classified as ""Routine"" and arrange the output in ascending order based on the type of alert associated with those events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Routine"" }).sort({ ""response.event.alert_type"": 1 }); ","Identify entries with an event priority marked as ""Routine"" and sort the findings in increasing order according to the alert type linked to those events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().limit(10); ",Obtain the first ten records related to patient events without applying any specific filters or conditions.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().limit(10); ",Fetch a set of ten entries concerning patient events without any particular restrictions or criteria applied.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().skip(5).limit(10); ",Retrieve a subset of records by skipping the first five entries and then limiting the results to the next ten entries from the dataset.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find().skip(5).limit(10); ","Select a range of ten records beginning after the first five entries, effectively retrieving a specific segment from the overall collection of data."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gte: 60, $lte: 100 } }); ","Retrieve records where the heart rate readings from biometrics are between 60 and 100 beats per minute, inclusive."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gte: 60, $lte: 100 } }); ","Select entries that indicate heart rate measurements falling within the range of 60 to 100 beats per minute, ensuring all retrieved data adheres to this criterion."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H456"", ""identifier.ward_number"": 2 }); ","Retrieve all records of patient events for a specific medical facility identified by the hospital ID ""H456"" and within ward number 2."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H456"", ""identifier.ward_number"": 2 }); ","Gather patient event data associated with the hospital having an identifier of ""H456"" specifically located in ward 2."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"" }).sort({ ""identifier.hospital_id"": -1 }); ","Retrieve records that indicate instances classified under the ""VitalSigns"" alert type, and arrange these entries in descending order based on the identifier associated with the medical facility."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"" }).sort({ ""identifier.hospital_id"": -1 }); ","Select entries corresponding to the ""VitalSigns"" alert category and sort the results by the hospital identifier in a descending sequence."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $ne: ""Emergency"" } }); ","Retrieve all records of patient events where the priority of the event is not classified as ""Emergency."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": { $ne: ""Emergency"" } }); ","List all patient event records, excluding those where the event priority is designated as ""Emergency."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $exists: true } }).count(); ",Count the number of records where the heart rate is recorded in the biometric data of patient events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $exists: true } }).count(); ",Determine the total number of instances in which heart rate information is available within the biometrics of patient events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B202"" }).pretty(); ","Retrieve all patient event records associated with the specified bed identifier ""B202."" The results should present detailed information about each event related to that particular bed."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.bed_id"": ""B202"" }).pretty(); ","Gather the records of patient events for the bed labeled ""B202,"" including all relevant event details for review."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve data about patient events, specifically focusing on metrics such as heart rate, blood pressure, and oxygen saturation for individuals identified by their hospital, ward, and bed. The results should encompass emergency, urgent, or routine alert types, and must be organized to reflect the priority level of these events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Collect information regarding patient events that include important biometrics like heart rate, blood pressure, and oxygen saturation, while specifically identifying patients by their hospital, ward, and bed numbers. The output should categorize these events according to their alert types, emphasizing the level of urgency."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }); ",Retrieve the records of patient events associated with the medical facility identified by the code “H001.” This selection includes all relevant data related to the identifiers of these events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H001"" }); ","List all patient event entries corresponding to the hospital designated by the identifier “H001,” capturing all associated information pertinent to those identifiers."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }).sort({ ""response.event.priority"": 1 }); ","Retrieve all records concerning patient events where the event priority is classified as ""Urgent."" The results should be organized in ascending order based on the event priority."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }).sort({ ""response.event.priority"": 1 }); ","Select entries related to patient events that are marked with an ""Urgent"" priority. The display should be sorted so that the events appear in a sequence determined by their priority, from lowest to highest."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 2, ""identifier.bed_id"": ""B5"" }); ","Retrieve all entries from the records of patient events where the ward number is 2 and the bed identification is ""B5."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 2, ""identifier.bed_id"": ""B5"" }); ","Gather all patient event data for those assigned to ward number 2 and occupying bed ""B5."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); ","Count the number of incidents categorized as ""FallDetected"" for each medical facility, ensuring that only those specific event responses are included in the tally, with the results organized by hospital identification."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); ","Aggregate the total occurrences of ""FallDetected"" alerts within each hospital, focusing solely on these event types, and present the counts categorized by the respective hospital identifiers."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $gt: 100 } } }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); ","Extract the average heart rate of patients from each medical facility where the recorded heart rate exceeds 100, after separating each individual set of biometric data related to their events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $gt: 100 } } }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); ","Calculate the average heart rate for each hospital by considering only those instances where patient heart rates are above 100, ensuring that all biometric entries related to the events are treated individually before the aggregation."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygensaturation"": { $lt: 90 } }).limit(10); ","Retrieve the details of patients whose oxygen saturation levels are below 90, displaying up to ten results that meet this condition."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygensaturation"": { $lt: 90 } }).limit(10); ","Select a maximum of ten patient records where the oxygen saturation measure is less than 90, ensuring only those cases that fulfill this criterion are included."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""identifier.hospital_id"": ""H002"" } }, { $sort: { ""response.event.priority"": -1 } }, { $limit: 5 } ]); ","Retrieve a maximum of five records of patient events from a specific medical facility identified by ""H002"", sorted in descending order based on the priority of the event associated with each record."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""identifier.hospital_id"": ""H002"" } }, { $sort: { ""response.event.priority"": -1 } }, { $limit: 5 } ]); ","Select up to five entries of patient events from the hospital labeled ""H002"", arranged in order of priority from highest to lowest for the event details provided in each record."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $group: { _id: ""$identifier.ward_number"", totalEvents: { $sum: 1 } } } ]); ","Count the total number of events categorized as ""Emergency"" for each department, grouping the results by the department number."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $group: { _id: ""$identifier.ward_number"", totalEvents: { $sum: 1 } } } ]); ","Aggregate the number of emergency events by ward number, providing a total count for each department in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true, $ne: [] } }).count(); ","Count the number of records where movement patterns exist within the biometrics data of events recorded for patients, specifically checking that these movement patterns are present and not empty."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.movement_patterns"": { $exists: true, $ne: [] } }).count(); ","Determine the total number of entries that include non-empty movement patterns in the biometrics section of patient event responses, ensuring that such movement patterns are documented in the records."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""identifier.bed_id"": ""B3"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", priority: ""$response.event.priority"" } } ]); ","Retrieve the hospital ID and priority level for events associated with the patient bed identified as ""B3."" Only the relevant records that meet this condition should be returned."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""identifier.bed_id"": ""B3"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", priority: ""$response.event.priority"" } } ]); ","List the priority levels of events along with the corresponding hospital IDs for instances linked to the bed identified by ""B3."" The dataset should include only those records that satisfy this criteria."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.blood_pressure"": { $gte: 140 } } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); ","Count the number of instances where patients exhibit a blood pressure reading greater than or equal to 140, organizing the results by the medical facility identifier. This will involve a detailed examination of individual biometric responses within the events recorded."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.blood_pressure"": { $gte: 140 } } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); ","Aggregate the data to determine how many patients have blood pressure measurements of 140 or higher, grouping the findings according to the hospital identifier. The analysis will include the unpacking of each event's biometric information for a thorough count."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""Medication"" }).sort({ ""identifier.hospital_id"": 1, ""response.event.priority"": -1 }); ",Retrieve records related to patient events where the alert type is classified as medication. The results should be arranged in ascending order based on the hospital identifier and in descending order by the priority of the events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""Medication"" }).sort({ ""identifier.hospital_id"": 1, ""response.event.priority"": -1 }); ","List all patient event entries associated with medication alerts, sorting the outcomes in ascending order according to the hospital identification and by event priority in descending order."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.biometrics.heart_rate"": { $lt: 60 } } }, { $sort: { ""identifier.hospital_id"": 1 } } ]); ","Select the records of individuals whose heart rate readings are below 60, and arrange the findings in ascending order based on the hospital identification number."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.biometrics.heart_rate"": { $lt: 60 } } }, { $sort: { ""identifier.hospital_id"": 1 } } ]); ","Gather a list of instances where the heart rate is less than 60, sorting the results by the identifier of the medical facility in increasing order."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H001"", ""response.event.priority"": ""Routine"" }).project({ ""response.event.biometrics"": 1 }); ","Retrieve the biometrics information for patients whose medical facility identifier is ""H001"" and the event priority is classified as ""Routine."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.hospital_id"": ""H001"", ""response.event.priority"": ""Routine"" }).project({ ""response.event.biometrics"": 1 }); ","List the biometric data for events marked as ""Routine"" at the hospital identified by ""H001."""
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", totalPatients: { $sum: 1 } } }, { $sort: { totalPatients: -1 } } ]); ","Group the data by the ward number of patients and count the total number of patients in each ward, arranging the results in descending order based on the total count of patients observed."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", totalPatients: { $sum: 1 } } }, { $sort: { totalPatients: -1 } } ]); ","Aggregate the total number of patients in each ward by grouping them according to ward numbers, and then sort these groups in order of highest to lowest patient count."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.oxygen_saturation"": { $gt: 95 } } }, { $project: { hospital: ""$identifier.hospital_id"", heartRate: ""$response.event.biometrics.heart_rate"" } } ]); ","Retrieve the hospital identifiers and heart rates of patients whose oxygen saturation levels exceed 95, after expanding the associated biometric data to allow for detailed analysis."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.oxygen_saturation"": { $gt: 95 } } }, { $project: { hospital: ""$identifier.hospital_id"", heartRate: ""$response.event.biometrics.heart_rate"" } } ]); ","List the identifiers of medical facilities along with the heart rates of patients who have oxygen saturation values greater than 95, ensuring that the biometric observations are individually accessible for evaluation."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"" }).limit(20); ","Retrieve a maximum of 20 records that depict incidents where vital sign alerts were triggered, ensuring that only those events categorized under alert type 'VitalSigns' are included in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""VitalSigns"" }).limit(20); ","Select up to 20 entries documenting occurrences linked to vital signs, specifically focusing on cases where the alert type is marked as 'VitalSigns'."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $group: { _id: ""$identifier.hospital_id"", totalUrgentEvents: { $sum: 1 } } } ]); ","Retrieve the total count of urgent medical events for each hospital, only considering those events marked as urgent. The results should be grouped by hospital identifier to summarize the number of urgent occurrences per facility."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $group: { _id: ""$identifier.hospital_id"", totalUrgentEvents: { $sum: 1 } } } ]); ","Count the number of urgent events at each hospital by filtering for only those categorized as urgent, aggregating the results by hospital identifier to determine the total for each medical facility."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve the identifiers of patients who have been involved in emergency events, ensuring the data is grouped by both hospital and ward, and filtered for those events that indicate a fall detection, along with their corresponding vital signs metrics."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"List the identifiers for patients associated with urgent events, specifically focusing on those reporting fall incidents, while organizing the results by the hospital and department, and including details on their measured vital statistics."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H123"" }); ","Retrieve all records of patient events associated with the specified medical facility identified by the ID ""H123""."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.find({ ""identifier.hospital_id"": ""H123"" }); ","Gather all entries related to patient events from the medical facility designated by the hospital ID ""H123""."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 5 }); ",Retrieve all records of patient events that occurred in the department numbered 5.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""identifier.ward_number"": 5 }); ",Select the patient event records associated with ward number 5.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }); ","Retrieve all records of urgent events from patient data that indicate the priority level is categorized as ""Urgent""."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.priority"": ""Urgent"" }); ","Identify all instances of patient events where the event priority is designated as ""Urgent""."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); ","Fetch all records of patient events where the alert type is identified as ""FallDetected."" This will return all relevant data associated with instances of detected falls."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.alert_type"": ""FallDetected"" }); ","Gather details of patient events specifically categorized under the alert type ""FallDetected,"" ensuring that all instances of fall-related alerts are included in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",Retrieve all records of patients whose heart rate is greater than 100.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.heart_rate"": { $gt: 100 } }); ",List all patient events where the recorded heart rate exceeds 100.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); ","Count the number of emergency events recorded for each hospital, ensuring that only events marked with an emergency priority are included in the results, which should be grouped by the identifier of the hospital."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $group: { _id: ""$identifier.hospital_id"", count: { $sum: 1 } } } ]); ","Aggregate the total number of emergency events by hospital, considering only those events classified with an emergency priority, grouping the results according to each hospital's identifier."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } }, { $sort: { avgHeartRate: -1 } } ]); ","Calculate the average heart rate for patients in each hospital by analyzing their recorded biometric events, ensuring that the results are organized in descending order based on the average heart rate values."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } }, { $sort: { avgHeartRate: -1 } } ]); ","Determine the mean heart rate for all patients associated with each medical facility by examining their respective biometric event data, with the output arranged from highest to lowest average heart rate."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $group: { _id: ""$identifier.ward_number"", totalAlerts: { $sum: 1 } } } ]); ","Count the total number of alerts categorized as ""VitalSigns"" grouped by the ward number in which they were recorded, ensuring that only those specific alerts are included in the count."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $group: { _id: ""$identifier.ward_number"", totalAlerts: { $sum: 1 } } } ]); ","Aggregate the total alerts labeled as ""VitalSigns"" by ward number, focusing exclusively on counting these incidents within their respective departments."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.hospital_id"", maxBloodPressure: { $max: ""$response.event.biometrics.blood_pressure"" } } }, { $match: { maxBloodPressure: { $gt: 140 } } } ]); ","Retrieve the maximum blood pressure readings for each medical facility, specifically focusing on those facilities where the highest recorded blood pressure exceeds 140."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.hospital_id"", maxBloodPressure: { $max: ""$response.event.biometrics.blood_pressure"" } } }, { $match: { maxBloodPressure: { $gt: 140 } } } ]); ","Identify the medical facilities along with their highest blood pressure measurements, but only include those facilities with readings greater than 140."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.biometrics"": { $ne: [] } } }, { $project: { hospital_id: ""$identifier.hospital_id"", heart_rate: ""$response.event.biometrics.heart_rate"" } } ]); ","Retrieve the hospital identifiers and heart rate readings for events where biometrics data is present, ensuring that only records with non-empty biometrics are included in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.biometrics"": { $ne: [] } } }, { $project: { hospital_id: ""$identifier.hospital_id"", heart_rate: ""$response.event.biometrics.heart_rate"" } } ]); ","Select the identifiers of medical facilities along with heart rate values from events that contain biometrics information, filtering to include only entries that have at least one biometric measurement recorded."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.bed_id"", avgOxygenSaturation: { $avg: ""$response.event.biometrics.oxygen_saturation"" } } }, { $sort: { avgOxygenSaturation: -1 } } ]); ","Calculate the average oxygen saturation level for each patient bed by unwinding the biometrics data for events, grouping the results by bed identifier, and sorting the averages in descending order."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.bed_id"", avgOxygenSaturation: { $avg: ""$response.event.biometrics.oxygen_saturation"" } } }, { $sort: { avgOxygenSaturation: -1 } } ]); ","Determine the average oxygen saturation recorded for each bed by expanding the biometrics information from events, aggregating the data based on the bed identifier, and ordering the results from highest to lowest average saturation."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.0.movement_patterns"": { $exists: true, $ne: [] } }); ","Retrieve records where the movement patterns of the first biometrics entry exist and are not empty, indicating that there are observable activities for patients during events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.0.movement_patterns"": { $exists: true, $ne: [] } }); ","Select entries that contain non-empty movement patterns in the first biometrics array, confirming the presence of documented patient activity during related events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$response.event.priority"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ",Group the recorded events based on their priority levels and calculate the total number of occurrences for each priority. The results should then be arranged in descending order according to the total number of events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$response.event.priority"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Aggregate the events by categorizing them according to their priority types and count the total instances for each category, ensuring the results are sorted in descending order based on the total count of events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: 'patient_details', localField: 'identifier.hospital_id', foreignField: 'hospital_id', as: 'hospital_info' } }, { $match: { ""hospital_info.type"": ""General"" } } ]); ","Retrieve hospital information for events occurring in medical facilities identified as ""General"" by linking patient occurrences with their respective hospital details based on the hospital identifiers. The selection should ensure that only those events related to general hospitals are included in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: 'patient_details', localField: 'identifier.hospital_id', foreignField: 'hospital_id', as: 'hospital_info' } }, { $match: { ""hospital_info.type"": ""General"" } } ]); ","Gather details about patient events linked to hospitals classified as ""General,"" using their identifiers to join the relevant hospital information and filtering the results accordingly. Only events from hospitals of this type should be presented."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $lt: 90 } }).sort({ ""response.event.biometrics.heart_rate"": 1 }); ","Retrieve records of events where the recorded oxygen saturation levels are below 90, and arrange these results in ascending order based on the heart rate values documented in the biometrics."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.find({ ""response.event.biometrics.oxygen_saturation"": { $lt: 90 } }).sort({ ""response.event.biometrics.heart_rate"": 1 }); ","Identify entries of patient events indicating oxygen saturation lower than 90, sorted from the lowest to the highest heart rate found in the biometric data."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $group: { _id: ""$identifier.hospital_id"", alerts: { $push: ""$response.event"" } } } ]); ","Retrieve the alert events related to medication for each medical facility, grouping the results by the identifier of the hospital and compiling a list of associated alerts for each."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""Medication"" } }, { $group: { _id: ""$identifier.hospital_id"", alerts: { $push: ""$response.event"" } } } ]); ","Collect all medication-related alert events, categorizing them by hospital identifier, and generate an aggregated list of alerts for every medical facility involved."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", ward_number: ""$identifier.ward_number"", totalBiometrics: { $size: ""$response.event.biometrics"" } } }, { $match: { totalBiometrics: { $gt: 1 } } } ]); ","Retrieve the hospital identifier and ward number for instances where more than one biometric measurement was recorded for a patient, ensuring that only those cases with at least two recordings are included."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", ward_number: ""$identifier.ward_number"", totalBiometrics: { $size: ""$response.event.biometrics"" } } }, { $match: { totalBiometrics: { $gt: 1 } } } ]); ","List the identifiers for the medical facility and department of patients who have had more than one biometric data point collected, filtering to show only those with at least two measurements recorded."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, totalHeartRates: { $sum: ""$response.event.biometrics.heart_rate"" } } } ]); ","Calculate the sum of all heart rates recorded in biometric data across patient events, ensuring that each biometric entry is treated independently for aggregation purposes."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, totalHeartRates: { $sum: ""$response.event.biometrics.heart_rate"" } } } ]); ","Aggregate the heart rate values from all individual biometric records associated with patient events, summing them in a manner that considers each entry separately for total calculation."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: 'patient_records', localField: 'identifier.bed_id', foreignField: 'bed_id', as: 'bed_info' } }, { $match: { ""bed_info.status"": ""Occupied"" } } ]); ","Retrieve the details of patient beds that are currently occupied, incorporating information from associated patient records based on the bed identifier. The result will specifically include only those records where the bed's status indicates occupancy."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: 'patient_records', localField: 'identifier.bed_id', foreignField: 'bed_id', as: 'bed_info' } }, { $match: { ""bed_info.status"": ""Occupied"" } } ]); ","Identify which patient beds have an occupancy status, merging data from relevant patient records linked through the bed identifier. The output will exclusively present information pertaining to beds marked as occupied."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve records of patient events classified as urgent or emergency, specifying their hospital, ward, and bed identifiers, alongside their vital signs such as heart rate, blood pressure, and oxygen saturation. Additionally, only include data where alerts for fall detection or vital signs have been triggered."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"List the details of patient events marked as urgent or emergency, detailing the identifiers for hospital, ward, and bed, as well as the associated biometrics including heart rate, blood pressure, and oxygen saturation, but only for those cases where alerts related to falls or vital signs were raised."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); ","Calculate the average heart rate of patients in each medical facility by first expanding the biometric data from events related to patient care, then grouping these records by the hospital identifier."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", avgHeartRate: { $avg: ""$response.event.biometrics.heart_rate"" } } } ]); ",Determine the mean heart rate for patients at different hospitals by unfolding the biometric details from various events and aggregating the results based on the hospital identifier.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $group: { _id: ""$identifier.ward_number"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Retrieve the counts of emergency events, grouped by the ward number, for all records where the event priority is classified as ""Emergency."" The results should be arranged in descending order according to the count of these events."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $group: { _id: ""$identifier.ward_number"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Count the number of events marked as ""Emergency,"" aggregated by ward number, ensuring that only those events with an emergency priority are included, and present the aggregated data sorted from the highest to the lowest count."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", bloodPressure: ""$response.event.biometrics.blood_pressure"" } }, { $match: { bloodPressure: { $gte: 140 } } } ]); ",Retrieve the hospital identifiers and blood pressure readings from patient records where the blood pressure is greater than or equal to 140. The focus is on the instances where this high blood pressure is recorded in the responses of the events.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", bloodPressure: ""$response.event.biometrics.blood_pressure"" } }, { $match: { bloodPressure: { $gte: 140 } } } ]); ","Select the identifiers of the medical facilities along with blood pressure measurements from patient event logs, ensuring to include only those cases where the blood pressure is 140 or above. This extraction emphasizes instances reflecting elevated blood pressure in the documented responses."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $group: { _id: ""$identifier.bed_id"", maxOxygenSaturation: { $max: ""$response.event.biometrics.oxygen_saturation"" } } } ]); ","Retrieve the maximum oxygen saturation levels recorded for each patient bed where the event type is classified as ""VitalSigns."" The results should group the data by bed identifier to provide a clear view of the highest measurements for each bed."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""VitalSigns"" } }, { $group: { _id: ""$identifier.bed_id"", maxOxygenSaturation: { $max: ""$response.event.biometrics.oxygen_saturation"" } } } ]); ","Gather the highest recorded oxygen saturation for every patient bed specifically for instances categorized as ""VitalSigns."" The output should be organized by bed identification to show the peak values associated with each respective bed."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.movement_patterns"": { $exists: true } } }, { $group: { _id: ""$identifier.hospital_id"", totalMovements: { $sum: 1 } } } ]); ","Extract the total number of movement events recorded for each medical facility, specifically where movement patterns are documented in the associated biometric data, ensuring the data is first unwound to access individual biometric entries before grouping by hospital identity."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.movement_patterns"": { $exists: true } } }, { $group: { _id: ""$identifier.hospital_id"", totalMovements: { $sum: 1 } } } ]); ","Count the instances of documented movements for each hospital, focusing on cases where movement patterns exist in the biometric records, after expanding the data to review each individual biometric observation and subsequently organizing the results by the hospital identifier."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $gt: 100 } } }, { $group: { _id: ""$identifier.ward_number"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Count the number of records associated with each department, identifying where the heart rate measurement is greater than 100, and arrange the results in descending order according to the count."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $match: { ""response.event.biometrics.heart_rate"": { $gt: 100 } } }, { $group: { _id: ""$identifier.ward_number"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","Aggregate the data to find how many instances exist for each ward, specifically where the recorded heart rate exceeds 100, and sort these results from the highest to the lowest count."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.hospital_id"", avgBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } }, { $match: { avgBloodPressure: { $gte: 90 } } } ]); ","Calculate the average blood pressure for patients grouped by their respective hospital IDs, only including those averages that are 90 or higher."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.hospital_id"", avgBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } }, { $match: { avgBloodPressure: { $gte: 90 } } } ]); ","Determine the average blood pressure readings for each hospital, ensuring that only hospital IDs with an average of at least 90 are included in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""related_events"" } } ]); ","Retrieve all records of patient events that are categorized as ""Urgent"" in their priority level, and also include associated events from the same medical facility, linking them based on the hospital identifier."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Urgent"" } }, { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""related_events"" } } ]); ","Gather entries of patient occurrences marked as ""Urgent"" in priority and bring in related events within the same hospital, matched by their hospital identifiers."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.bed_id"", incidentCount: { $sum: 1 } } }, { $sort: { incidentCount: -1 } } ]); ","Retrieve the count of incidents categorized as ""FallDetected"" for each patient bed, with results organized by the total number of incidents in descending order."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.alert_type"": ""FallDetected"" } }, { $group: { _id: ""$identifier.bed_id"", incidentCount: { $sum: 1 } } }, { $sort: { incidentCount: -1 } } ]); ","Count the occurrences of ""FallDetected"" events for each unique patient bed, ensuring that the output is sorted from the highest number of incidents to the lowest."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", oxygen: ""$response.event.biometrics.oxygen_saturation"" } }, { $match: { oxygen: { $lt: 90 } } } ]); ","Extract the hospital identification and oxygen saturation levels from patient records, ensuring that only those cases with oxygen saturation measurements below 90 are included in the results."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", oxygen: ""$response.event.biometrics.oxygen_saturation"" } }, { $match: { oxygen: { $lt: 90 } } } ]); ","Identify the hospital IDs alongside oxygen saturation values of patients, filtering for instances where the oxygen saturation is less than 90, and presenting only the relevant data from those records."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.ward_number"", avgMovementPattern: { $avg: ""$response.event.biometrics.movement_patterns"" } } }, { $match: { avgMovementPattern: { $gt: 5 } } } ]); ","Calculate the average movement patterns of biometrics recorded for patients based on their ward numbers, only including those wards where the average exceeds five, after breaking down the data by individual biometrics."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.ward_number"", avgMovementPattern: { $avg: ""$response.event.biometrics.movement_patterns"" } } }, { $match: { avgMovementPattern: { $gt: 5 } } } ]); ","Determine the average movement patterns from biometric data associated with each ward number, filtering to retain only those wards that have an average greater than five, having first unwound the biometric entries for detailed analysis."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Routine"" } }, { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $project: { hospital_id: 1, related_alert_type: ""$related_events.response.event.alert_type"" } } ]); ",Retrieve the hospital identifiers along with the alert types of related events for patients whose routines have been classified as routine. This process involves joining with events from the same hospital and ensuring that all relevant data is presented correctly.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Routine"" } }, { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $project: { hospital_id: 1, related_alert_type: ""$related_events.response.event.alert_type"" } } ]); ","Identify the hospital IDs and corresponding alert types from related patient events where the priority is categorized as routine. This includes an association with similar events at the same medical facility, ensuring that all pertinent information is extracted and displayed appropriately."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", minHeartRate: { $min: ""$response.event.biometrics.heart_rate"" } } } ]); ","Retrieve the minimum heart rate recorded for each medical facility by analyzing the biometrics of patient events, ensuring that data is aggregated based on the hospital identifier. The analysis involves flattening the biometric records before grouping the results for each hospital."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: ""$identifier.hospital_id"", minHeartRate: { $min: ""$response.event.biometrics.heart_rate"" } } } ]); ",Determine the lowest heart rate observed in patient biometrics for every hospital by collecting and organizing the data based on the hospital identifier. This process includes unwinding the biometric records to allow effective aggregation of the heart rate measurements per facility.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""other_hospital_events"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", total_other_events: { $size: ""$other_hospital_events"" } } }, { $match: { total_other_events: { $gt: 0 } } } ]); ",Retrieve the hospital identifiers along with a count of related events from other hospitals where the count of these related events is greater than zero. The result should include only those hospitals that have at least one associated event from other facilities.
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $lookup: { from: ""patient_events"", localField: ""identifier.hospital_id"", foreignField: ""identifier.hospital_id"", as: ""other_hospital_events"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", total_other_events: { $size: ""$other_hospital_events"" } } }, { $match: { total_other_events: { $gt: 0 } } } ]); ","List the identifiers of hospitals that have one or more events recorded from different hospitals, along with the total number of such events for each facility. Include only those whose total count exceeds zero."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, totalAlerts: { $sum: 1 }, avgOxygenSaturation: { $avg: ""$response.event.biometrics.oxygen_saturation"" } } }, { $match: { totalAlerts: { $gt: 10 } } } ]); ","Extract the total count of alerts and the average oxygen saturation levels from events where biometrics data is recorded, ensuring that the total alerts exceed 10. The result should combine all relevant records into a single group without any specified identifiers."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $unwind: ""$response.event.biometrics"" }, { $group: { _id: null, totalAlerts: { $sum: 1 }, avgOxygenSaturation: { $avg: ""$response.event.biometrics.oxygen_saturation"" } } }, { $match: { totalAlerts: { $gt: 10 } } } ]); ","Gather the overall number of alerts and calculate the mean oxygen saturation from biometric events, while including only those cases where alerts are greater than 10. All data should be consolidated into one group without unique identifiers."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", maxHeartRate: ""$response.event.biometrics.heart_rate"" } }, { $group: { _id: ""$hospital_id"", overallMax: { $max: ""$maxHeartRate"" } } }, { $match: { overallMax: { $gt: 90 } } } ]); ","Retrieve the maximum heart rate recorded by patients in each medical facility, excluding those with a maximum heart rate of 90 or lower. The results should display the facility identifier alongside the highest recorded heart rate for each facility."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $project: { hospital_id: ""$identifier.hospital_id"", maxHeartRate: ""$response.event.biometrics.heart_rate"" } }, { $group: { _id: ""$hospital_id"", overallMax: { $max: ""$maxHeartRate"" } } }, { $match: { overallMax: { $gt: 90 } } } ]); ","Determine the highest patient heart rate for each hospital, but only include facilities that have recorded a maximum heart rate exceeding 90. The output should consist of the hospital identifier and the maximum heart rate observed within that location."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", averageBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } }, { $match: { averageBloodPressure: { $gt: 80 } } } ]); ","Group the events by the ward number and calculate the average blood pressure for each group, retrieving only those wards where the average blood pressure exceeds 80."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $group: { _id: ""$identifier.ward_number"", averageBloodPressure: { $avg: ""$response.event.biometrics.blood_pressure"" } } }, { $match: { averageBloodPressure: { $gt: 80 } } } ]); ","Aggregate the events based on the ward number to find the average blood pressure, filtering to display only those wards with an average blood pressure greater than 80."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", ward_number: ""$identifier.ward_number"", heart_rate: ""$response.event.biometrics.heart_rate"" } } ]); ","Select the hospital identifier, ward number, and heart rate of patients experiencing emergency events, ensuring only records related to these urgent situations are included."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.patient_events.aggregate([ { $match: { ""response.event.priority"": ""Emergency"" } }, { $project: { hospital_id: ""$identifier.hospital_id"", ward_number: ""$identifier.ward_number"", heart_rate: ""$response.event.biometrics.heart_rate"" } } ]); ","Gather the hospital ID, ward number, and heart rate measurements for patients categorized under emergency events, while filtering the data to reflect only those urgent occurrences."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve the heart rate, blood pressure, oxygen saturation, and movement patterns of patients associated with a specific medical facility, department, and bed, who have experienced various alert types indicating emergencies, urgencies, or routine observations. The data must be organized by priority of the alerts, encompassing all pertinent biometric details."
patient_event,"{
  ""collections"": [
    {
      ""name"": ""patient_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""hospital_id"": {""description"": ""Filter by medical facility""},
              ""ward_number"": {""description"": ""Filter by department""},
              ""bed_id"": {""description"": ""Filter by patient bed""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""priority"": {""description"": ""Emergency, Urgent, Routine""},
                  ""alert_type"": {""description"": ""FallDetected, VitalSigns, Medication""},
                  ""biometrics"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""heart_rate"": {},
                        ""blood_pressure"": {},
                        ""oxygen_saturation"": {},
                        ""movement_patterns"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Compile the biometric information, including heart rate, blood pressure, oxygen saturation, and movement patterns, for patients located in a designated hospital, ward, and bed who have received alerts classified as emergency, urgent, or routine. The results should be sorted according to the alert priority, capturing all relevant metrics."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",db.store_events.find({}); ,"Retrieve all records of events occurring in the retail environment, providing a comprehensive overview of each event without applying any specific filters or limitations."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",db.store_events.find({}); ,"Collect and display every event documented in the store environment, offering a full account of the available data without any constraints or criteria for selection."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""store123"" }); ","Retrieve records of events recorded at the store identified as ""store123."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""store123"" }); ","Collect all occurrences that took place within the retail location labeled ""store123."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 4 }); ",Retrieve records of events from a specified retail location where customers interacted in aisle number 4.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 4 }); ",Select event data related to customer activities specifically occurring in aisle number 4 of the retail store.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); ",Retrieve records of transactions classified as purchases.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); ",Select data entries where the event type is identified as a purchase.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ",Retrieve records of customers who belong to the age group of 18 to 25 based on their profiles gathered from retail location events.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ",Identify entries related to individuals aged between 18 and 25 based on the data collected from store event interactions.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""terminal1"" }); ","Retrieve all events that occurred at the specified checkout station, denoted as terminal1."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""terminal1"" }); ","Gather all recorded activities associated with terminal1 at the checkout, focusing exclusively on the events from that particular location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }); ",Retrieve records of customer interactions where the duration of customer engagement exceeds 30 seconds.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gt: 30 } }); ",Identify entries that document customer activities with a dwell time greater than 30 seconds during their visit.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Return"", ""identifier.store_id"": ""store456"" }); ","Retrieve all records of return events that occurred at a specific retail location identified as ""store456."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Return"", ""identifier.store_id"": ""store456"" }); ","Collect instances of product returns for the store designated as ""store456."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": { $exists: true } }); ",Retrieve all records where there is documented staff interaction present within the customer profiles.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": { $exists: true } }); ",List all entries that include the presence of staff interaction in the customer profiles.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.findOne({ ""identifier.store_id"": ""store789"" }); ","Retrieve the details of the event associated with the retail location identified as ""store789."" This will include all relevant data tied to that location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.findOne({ ""identifier.store_id"": ""store789"" }); ","Obtain information about the activity occurring at the store recognized as ""store789,"" capturing all pertinent details related to that specific retail outlet."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.countDocuments({ ""response.event.type"": ""Browse"" }); ","Count the total number of instances where the recorded event type is categorized as ""Browse."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.countDocuments({ ""response.event.type"": ""Browse"" }); ","Calculate the number of occurrences where the event recorded falls under the ""Browse"" category."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $ne: [] } }); ","Retrieve records where the customer profile includes basket items, ensuring that the basket items list is not empty."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $ne: [] } }); ",Collect entries that have non-empty basket items within the customer profile segment.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lt: 3 } }); ",Retrieve records where the aisle number of the retail location is less than 3.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lt: 3 } }); ",Select entries that correspond to store sections designated by an aisle number lower than 3.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""36-45"", ""identifier.store_id"": ""store321"" }); ","Retrieve records that indicate customer profiles belonging to the age group of 36 to 45 years, specifically from the retail location identified as store321."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""36-45"", ""identifier.store_id"": ""store321"" }); ","Select entries that contain customer profile data for individuals aged 36 to 45, filtered to include only those associated with store321."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $elemMatch: { ""dwell_time"": { $lt: 15 } } } }); ","Retrieve records where the customer profile includes individuals who spent less than 15 minutes in the store. This selection is based on events within various retail locations, checkout stations, and store sections."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $elemMatch: { ""dwell_time"": { $lt: 15 } } } }); ","Identify entries in which customers have a dwell time of less than 15 minutes, reflecting interactions that occurred across different store locations, aisles, and point-of-sale terminals."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""terminal2"", ""response.event.type"": ""Purchase"" }); ","Retrieve all records of purchases made at the second checkout terminal, specifically focusing on events categorized as purchases."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""terminal2"", ""response.event.type"": ""Purchase"" }); ","Select entries documenting transactions where the customer used terminal two, ensuring that only purchase events are included in the results."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": { $in: [""26-35"", ""46-55""] } }); ",Retrieve all records that include customer profiles within the age groups of 26 to 35 years and 46 to 55 years.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": { $in: [""26-35"", ""46-55""] } }); ",Select entries where the age group of customers in the profile matches either 26-35 or 46-55 years.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find().sort({ ""identifier.store_id"": 1 }); ",Retrieve all store events while arranging the results in ascending order based on the identifier of the retail location.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find().sort({ ""identifier.store_id"": 1 }); ","List all recorded events from the store, sorted by the identifier associated with the retail locations in increasing order."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find().limit(10); ","Retrieve the first ten records of retail event data, capturing various store activities without any specific filters or conditions applied."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find().limit(10); ","Select a maximum of ten entries that detail retail events, ensuring that the data encompasses all types of store interactions without any imposed limitations."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find().skip(5).limit(5); ","Retrieve a set of five records, starting from the sixth entry, which capture the events stored, without applying any specific filters."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find().skip(5).limit(5); ","Select the next five entries from the event records, beginning after the fifth record, with no additional restrictions or conditions applied."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve the demographic and shopping behavior data of customers based on their age group and related factors at a specific retail location, aisle, and checkout terminal, focusing on events categorized as purchases, returns, or browsing."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Collect the customer profile information, including age groups and engagement metrics, related to specific store locations, sections, and checkout stations, while concentrating on events classified as either purchases, returns, or browsing actions."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.find({ ""identifier.store_id"": ""001"" }); ","Retrieve all records associated with the specified retail location identified by the store code ""001."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.find({ ""identifier.store_id"": ""001"" }); ","Select entries that correspond to the store identified by the code ""001,"" capturing all relevant details related to that location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 5 }); ",Retrieve all records corresponding to retail events that occurred in aisle number 5.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 5 }); ",List all instances of store events that took place specifically in the fifth aisle.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); ",Retrieve all records pertaining to events identified as purchases.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Purchase"" }); ",List all occurrences classified under the type of purchase within the event data.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ","Retrieve all records of customer interactions for individuals aged between 18 and 25, detailing their shopping experiences."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ","Gather data on customer profiles for those in the 18 to 25 age range, focusing on their engagement and transactions within the store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 30 } }); ",Retrieve records of customer interactions where the duration of their activities exceeds 30 minutes. The results should include all relevant details pertaining to these interactions.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 30 } }); ","List all instances of customer engagement that lasted 30 minutes or longer, encompassing the complete information related to each instance."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""T1"" }).limit(10); ","Retrieve up to ten records where the checkout station is identified as ""T1."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""T1"" }).limit(10); ","Select a maximum of ten entries that correspond to transactions processed at the checkout station ""T1."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true } }); ",Retrieve records where the details of customer profiles include items in their shopping baskets.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $exists: true } }); ",Select entries that have a customer profile indicating that basket items are present in the transaction records.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": { $in: [""Return"", ""Purchase""] } }); ",Retrieve records of events categorized as either a purchase or a return within the dataset.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": { $in: [""Return"", ""Purchase""] } }); ","Select entries representing events that are classified as returns or purchases, ensuring only those specific types are included in the results."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""002"", ""identifier.pos_terminal"": ""T2"" }); ","Retrieve all records of events occurring at checkout station ""T2"" located in store ""002""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""002"", ""identifier.pos_terminal"": ""T2"" }); ","Gather data on all transactions processed at point of sale terminal ""T2"" within retail outlet ""002""."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": { $eq: true } }); ",Retrieve records where customer interactions with staff are marked as true.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": { $eq: true } }); ",Select entries that indicate positive staff engagement within customer profiles.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ $or: [ { ""response.event.type"": ""Purchase"" }, { ""response.event.type"": ""Browse"" } ] }); ",Retrieve records where the event type is either a purchase or a browsing activity. The focus is on gathering all relevant data points associated with these specific interactions.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ $or: [ { ""response.event.type"": ""Purchase"" }, { ""response.event.type"": ""Browse"" } ] }); ","Collect entries that indicate either a successful purchase or a browsing session, ensuring to include all pertinent details related to these event categories."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $elemMatch: { dwell_time: { $gt: 60 } } } }); ","Retrieve records where the customer profiles include individuals who spent more than 60 minutes at the store. This selection should include any events related to customer interactions, focusing specifically on those profiles meeting the specified dwell time condition."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $elemMatch: { dwell_time: { $gt: 60 } } } }); ","Select instances where at least one customer profile indicates a dwell time exceeding 60 minutes, encompassing various types of store events associated with those profiles."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lte: 3 } }).sort({ ""identifier.store_id"": 1 }); ","Retrieve records from the events concerning retail activity where the aisle number is less than or equal to 3, and present the results in ascending order based on the store identification."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lte: 3 } }).sort({ ""identifier.store_id"": 1 }); ","Gather data on retail events where the aisle number does not exceed 3, sorting the outcomes by store identification in an increasing sequence."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.0.age_group"": ""26-35"" }); ",Retrieve all records where the age group of the first customer in the profile is between 26 and 35 years old.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.0.age_group"": ""26-35"" }); ",Select entries that contain a customer profile with the age group of the first listed customer being in the range of 26 to 35 years old.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $ne: null } }); ","Retrieve all records where the shopping basket items in the customer profile are not null, indicating that purchases or interactions occurred."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.basket_items"": { $ne: null } }); ","Select entries that have non-empty basket items in the customer profiles, demonstrating that relevant transactions took place during their visits."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.findOne({ ""identifier.store_id"": ""003"", ""identifier.aisle_number"": 1 }); ","Retrieve a record that corresponds to the specific retail location identified by store ID ""003"" and located in aisle number 1."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.findOne({ ""identifier.store_id"": ""003"", ""identifier.aisle_number"": 1 }); ","Find a single entry that matches the store identified by ""003"" and belongs to aisle number 1 within the shopping venue."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $lt: 15 } }).sort({ ""identifier.pos_terminal"": -1 }).limit(5); ","Select the five most recent checkout stations, ordered from the highest to the lowest, for events where the dwell time of customers is less than 15 minutes."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $lt: 15 } }).sort({ ""identifier.pos_terminal"": -1 }).limit(5); ","Identify up to five checkout stations, sorted in descending order, that have customer events with a dwell time below 15 minutes."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $size: 2 } }); ","Retrieve records where the customer profile associated with the event contains exactly two items, reflecting the interactions and characteristics of customers in the store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile"": { $size: 2 } }); ","Select entries where the event's customer profile consists of precisely two elements, indicating specific details about customer interactions and behaviors during their visit to the retail location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Browse"", ""identifier.store_id"": ""001"" }).count(); ","Count the number of browsing events recorded at the retail location identified as ""001."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.type"": ""Browse"", ""identifier.store_id"": ""001"" }).count(); ","Determine how many times customers browsed at the store with the identifier ""001."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 4, ""response.event.type"": ""Purchase"" }).sort({ ""identifier.store_id"": 1 }).limit(5); ","Retrieve the details of up to five transactions that occurred in aisle 4 and involved a purchase event, sorted by retail location identification in ascending order."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": 4, ""response.event.type"": ""Purchase"" }).sort({ ""identifier.store_id"": 1 }).limit(5); ","Select a maximum of five records where the transaction took place in aisle 4 and the event type is categorized as a purchase, ordered by the store identification in ascending sequence."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve the details of events related to retail transactions, focusing on the type of event, customer demographics, and their interaction with staff, while filtering for specific store locations, aisle sections, and checkout terminals. The outcome should group the data according to the identified stores, organizing the results to highlight customer engagement and transaction types."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Summarize the various retail events, including purchase types, customer profile information, and staff interactions, with constraints set on particular store identifiers, aisle numbers, and checkout stations. The results should be arranged in a way that categorizes them by store, emphasizing the different types of transactions and customer engagement."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Aggregate the total dwell time for each age group based on customer profiles from various store events, ensuring that each entry in the customer profile is processed individually, and organize the results by age group."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Sum the dwell time associated with different age groups from customer profiles present in store events, unwinding each profile to consider them separately, and compile the totals grouped by age category."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""123"" }); ","Retrieve all records of events from the specified retail location identified by the store identifier ""123."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""123"" }); ","Collect all data on store events that relate to the retail location designated by the store identifier ""123."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.aisle_number"", totalPurchases: { $sum: 1 } } } ]); ","Count the total number of purchases made in each aisle, focusing exclusively on events categorized as purchases. The results should be grouped by aisle number to show how many purchases occurred in each specific section."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.aisle_number"", totalPurchases: { $sum: 1 } } } ]); ","Aggregate and tally the number of purchase events within each aisle, ensuring that only the records labeled as purchases are considered. This will organize the data by aisle number, displaying the total purchases for each aisle."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 30 } }); ",Retrieve records of customer interactions where the duration of customer presence exceeds 30 minutes.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.dwell_time"": { $gte: 30 } }); ",Select entries that indicate customer engagement lasting at least 30 minutes during shopping activities.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Group the records by the checkout station, counting the total number of events for each station, and then sort the results in descending order based on the total event count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Aggregate the data by checkout terminal, calculating the total events recorded at each terminal, and order the output from highest to lowest total events."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $in: [1, 2, 3] } }); ","Retrieve records of events occurring in specific store sections, particularly those associated with aisle numbers 1, 2, or 3."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $in: [1, 2, 3] } }); ","Gather details of transactions that took place in designated aisles, specifically those numbered 1, 2, or 3."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: null, totalReturns: { $sum: 1 } } } ]); ","Identify the total count of events classified as returns from the retail transactions recorded, ensuring that only those events associated with the type labeled as ""Return"" are included in the final tally."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: null, totalReturns: { $sum: 1 } } } ]); ","Calculate the cumulative number of return events from the recorded store transactions, focusing solely on entries marked with the event type ""Return"" for the aggregation."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": { $exists: true } }); ",Retrieve records where there is evidence of staff interaction within the customer profiles of events that occurred in the store.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.staff_interaction"": { $exists: true } }); ","Identify events in which customer profiles indicate staff interaction, ensuring that only relevant records are included in the results."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", avgBasketItems: { $avg: ""$response.event.customer_profile.basket_items"" } } } ]); ","Calculate the average number of items in customers' shopping baskets for each retail location, based on individual customer profiles that include basket details, grouping the results by the store identifier."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", avgBasketItems: { $avg: ""$response.event.customer_profile.basket_items"" } } } ]); ","Determine the average amount of items purchased per customer at each store by analyzing the shopping habits detailed in customer profiles, with results aggregated by the respective store identification."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""456"", ""response.event.type"": ""Browse"" }); ","Retrieve records of customer browsing events specifically from the retail location identified by ""456."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""456"", ""response.event.type"": ""Browse"" }); ","List all instances where customers engaged in browsing activities at the retail site marked with the identifier ""456."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalDwellTime: -1 } } ]); ","Aggregate the total dwell time of customers for each retail location, grouping the data by store identifier, and order the results in descending order based on the calculated total dwell time."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalDwellTime: -1 } } ]); ","Calculate the sum of customer dwell times per store, categorizing the information by store identification and sorting the outcomes from highest to lowest total dwell time."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ",Retrieve records of customer profiles whose age group falls within the range of 18 to 25 years old. This should include all instances where individuals in this age category are associated with any store events.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""response.event.customer_profile.age_group"": ""18-25"" }); ","Compile data on customer profiles that are categorized as being between 18 and 25 years of age, focusing on cases involving any event taking place in the stores."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.basket_items"": { $gt: 5 } } }, { $group: { _id: ""$identifier.store_id"", purchaseCount: { $sum: 1 } } } ]); ",Count the number of purchases made at each retail location where customers have included more than five items in their shopping baskets. The results should be grouped by store identifier to provide an aggregated purchase count per store.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.basket_items"": { $gt: 5 } } }, { $group: { _id: ""$identifier.store_id"", purchaseCount: { $sum: 1 } } } ]); ","Aggregate the total number of transactions for each store, filtering for cases where the customer’s basket contained more than five items. The final output should present the count of purchases organized by store identifier."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lte: 5 }, ""response.event.type"": ""Purchase"" }); ","Retrieve records of purchases made in store aisles numbered five or lower, ensuring that only data related to completed purchases is included."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.aisle_number"": { $lte: 5 }, ""response.event.type"": ""Purchase"" }); ","Select entries related to purchase events that occurred within the first five aisles of the store, focusing solely on instances classified as purchases."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", totalCustomers: { $size: ""$response.event.customer_profile"" } } } ]); ","Project the store identifier along with the count of customers who interacted through various events, detailing the total number of customer profiles associated with each store location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", totalCustomers: { $size: ""$response.event.customer_profile"" } } } ]); ","Extract the identifier of each store and calculate the total number of customer interactions recorded in event profiles, providing a summary of customer engagement for each retail location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""PT001"", ""response.event.type"": ""Browse"" }); ","Retrieve records of browsing events from a specific checkout station identified as ""PT001."" Only include instances where customers have interacted with the store by browsing items."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.pos_terminal"": ""PT001"", ""response.event.type"": ""Browse"" }); ","Select entries that document browsing activities occurring at the checkout station labeled ""PT001."" These entries should solely reflect customer interactions categorized as browsing."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.staff_interaction"": { $eq: true } } }, { $group: { _id: ""$identifier.store_id"", interactionCount: { $sum: 1 } } } ]); ","Count the number of customer interactions where staff assistance was provided, grouping the results by each retail location. This process involves first separating the customer profile data, applying the condition that staff interaction must be true, and then aggregating the count of interactions for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.staff_interaction"": { $eq: true } } }, { $group: { _id: ""$identifier.store_id"", interactionCount: { $sum: 1 } } } ]); ","Calculate the total instances of customer engagement that included staff interaction, categorizing the findings by store locations. Initially, the customer profile information is expanded, followed by filtering for cases where staff was involved, and finally summing up the interaction counts per store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""789"", ""response.event.type"": ""Purchase"", ""response.event.customer_profile.dwell_time"": { $gte: 15 } }); ","Retrieve the records of retail transactions from a specific store location identified by the store ID ""789,"" where the event type is categorized as a purchase and the customer profile indicates a dwell time of 15 minutes or more."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""789"", ""response.event.type"": ""Purchase"", ""response.event.customer_profile.dwell_time"": { $gte: 15 } }); ","Gather information on purchase events occurring at the retail site marked by the store ID ""789,"" ensuring that only those transactions with a customer dwell time of at least 15 minutes are included."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", uniqueCustomers: { $addToSet: ""$response.event.customer_profile.age_group"" } } }, { $project: { aisle: ""$_id"", ageGroups: { $size: ""$uniqueCustomers"" } } } ]); ","Group the records by the aisle number, collecting unique age groups of customers who interacted in each section, and then present the aisle alongside the count of distinct age groups identified."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.aisle_number"", uniqueCustomers: { $addToSet: ""$response.event.customer_profile.age_group"" } } }, { $project: { aisle: ""$_id"", ageGroups: { $size: ""$uniqueCustomers"" } } } ]); ","Aggregate the data by aisle number to gather unique customer age groups for each area, and provide a summary that includes the aisle and the total number of distinct age groups represented."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve the details of events from a specific retail location, including the types of customer interactions and associated customer profiles, while focusing on specified sections and checkout stations within that store. The results will be compiled based on unique events related to purchases, returns, and browsing activities."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Collect and summarize event data from a designated store, detailing various customer engagement types along with their profiles, ensuring the examination of certain aisles and checkout terminals. The aggregate information will highlight distinct event types such as purchases, returns, and browsing instances."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalPurchases: { $sum: 1 } } } ]); ","Count the total number of purchases made at each retail location, specifically filtering for records where the event type indicates a purchase."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalPurchases: { $sum: 1 } } } ]); ","Aggregate the purchase events by retail location, summing the total purchases recorded, while only considering those events categorized as purchases."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } } ]); ","Count the total number of return events grouped by retail location, focusing exclusively on records where the event type is classified as a return."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } } ]); ","Aggregate the number of return transactions per store, including only those events that are specifically identified as returns."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", averageDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ",Calculate the average dwell time of customers within different age groups based on their profiles during store events. This analysis involves expanding the customer profile data and grouping by age group to determine the average time spent by customers in the store.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", averageDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Determine the average amount of time customers spend in the store, categorized by their age groups, using data from customer profiles collected during various store events. This process requires unfolding the customer profile entries and summarizing the dwell time information by age category."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.staff_interaction"": true } }, { $group: { _id: ""$identifier.store_id"", totalInteractions: { $sum: 1 } } } ]); ","Count the number of interactions for each store location where staff members engaged with customers, focusing specifically on customers who received assistance as indicated in their profiles. The results should display the total interactions grouped by each retail location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.staff_interaction"": true } }, { $group: { _id: ""$identifier.store_id"", totalInteractions: { $sum: 1 } } } ]); ","Calculate the total number of customer interactions for each retail store that involved staff assistance, only considering those customers who interacted with staff members. This data should be segmented by store location to show total interactions per site."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $group: { _id: ""$identifier.aisle_number"", averageBasketItems: { $avg: { $size: ""$response.event.customer_profile.basket_items"" } } } } ]); ","Retrieve the average number of items in shopping baskets for customers who browsed, grouped by the aisle number where the browsing took place."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $group: { _id: ""$identifier.aisle_number"", averageBasketItems: { $avg: { $size: ""$response.event.customer_profile.basket_items"" } } } } ]); ","Calculate the average size of shopping baskets for browsing customers, organizing the results by the aisle number they interacted with during their visit."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""s001"", ""response.event.type"": ""Purchase"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }).limit(5); ","Retrieve the details of the last five purchases made at store location ""s001,"" specifically focusing on the records where the event type is a purchase. The results should be arranged in descending order based on the duration customers spent at the store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""s001"", ""response.event.type"": ""Purchase"" }).sort({ ""response.event.customer_profile.dwell_time"": -1 }).limit(5); ","Identify the most recent five purchase events recorded at the store with identifier ""s001,"" where the event type corresponds to a purchase. These events must be sorted from highest to lowest based on the time customers spent browsing."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Summarize the total number of events by retail location, grouping the data by each store, and display the results in descending order based on the total event count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Aggregate the count of events for each store location, organizing the information by store identifier, and sort the list in order of highest to lowest event totals."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", totalPurchases: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } }, { $group: { _id: ""$store_id"", total: { $sum: ""$totalPurchases"" } } } ]); ","Calculate the total number of purchases made at each retail location by first determining if each event type is a purchase, and then summing these values grouped by the unique store identifiers."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", totalPurchases: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } }, { $group: { _id: ""$store_id"", total: { $sum: ""$totalPurchases"" } } } ]); ",Aggregate the count of purchase events per retail location by evaluating the event type and summing the results for each distinct store identifier.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.dwell_time"": { $gt: 30 } } }, { $group: { _id: ""$identifier.store_id"", highDwell: { $sum: 1 } } } ]); ","Count the number of events where customers spent more than 30 seconds during their shopping experience, grouping this information by the retail location of the store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.customer_profile.dwell_time"": { $gt: 30 } } }, { $group: { _id: ""$identifier.store_id"", highDwell: { $sum: 1 } } } ]); ","Aggregate the total instances of customer engagement lasting over 30 seconds, categorizing the results based on the store's location identifiers."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.aisle_number"": ""A3"" } }, { $group: { _id: ""$identifier.store_id"", total: { $sum: 1 } } } ]); ",Count the total number of events recorded for each retail location specifically in aisle A3. The results should group the counts by the store identifier.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.aisle_number"": ""A3"" } }, { $group: { _id: ""$identifier.store_id"", total: { $sum: 1 } } } ]); ","Aggregate the number of occurrences of events that happened in aisle A3 for each store, organizing the final figures by store identifier."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""s002"", ""response.event.type"": ""Browse"" }).project({ identifier: 1, ""response.event.customer_profile.age_group"": 1 }).limit(3); ","Retrieve the identifiers and age groups of customers who browsed items at the retail location identified as ""s002,"" with a limit of three records returned."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.find({ ""identifier.store_id"": ""s002"", ""response.event.type"": ""Browse"" }).project({ identifier: 1, ""response.event.customer_profile.age_group"": 1 }).limit(3); ","Select up to three records showing the identifiers and age group information of customers who have engaged in browsing activities at the store designated by ""s002."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", avgBasketSize: { $avg: { $size: ""$response.event.customer_profile.basket_items"" } } } } ]); ","Calculate the average number of items in the baskets of customers by age group, using the details from the customer profiles associated with each event, while ensuring that each customer profile is treated separately in the analysis."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", avgBasketSize: { $avg: { $size: ""$response.event.customer_profile.basket_items"" } } } } ]); ","Determine the average size of shopping baskets organized by age group of customers, based on individual profiles linked to each event while unwinding the customer profile data for comprehensive aggregation."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalRevenue: { $sum: ""$response.event.customer_profile.basket_items.value"" } } } ]); ","Retrieve the total revenue generated from purchases made at each retail location, where only events classified as purchases are considered. The results should be grouped by the store identifier, with the total revenue calculated as the sum of the values from the basket items associated with each customer's profile."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalRevenue: { $sum: ""$response.event.customer_profile.basket_items.value"" } } } ]); ","Calculate and list the aggregate revenue for each store based on purchase events, summing the values of items in customer baskets. The grouping should be done by store identifiers, including only those records where the event type is a purchase."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 }, totalPurchases: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } } ]); ","Group the data by the checkout station, calculating the total number of events and the total number of purchases, where a purchase is classified as an event type labeled ""Purchase."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 }, totalPurchases: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } } ]); ","Aggregate the records based on the point of sale, summing up the overall event count and counting only those events categorized as purchases, specifically identified by an event type of ""Purchase."""
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", type: ""$response.event.type"", total_items: { $size: ""$response.event.customer_profile.basket_items"" } } }, { $group: { _id: ""$store_id"", totalItems: { $sum: ""$total_items"" } } } ]); ","Calculate the total number of items bought across all retail locations by first identifying the store ID and counting the items in the customer baskets for each event type. Then, aggregate these counts to provide a summary of total items per store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $project: { store_id: ""$identifier.store_id"", type: ""$response.event.type"", total_items: { $size: ""$response.event.customer_profile.basket_items"" } } }, { $group: { _id: ""$store_id"", totalItems: { $sum: ""$total_items"" } } } ]); ","Summarize the total quantities of items purchased at each retail location by extracting the store IDs and determining the item counts from customer baskets associated with different event types, grouping the results to reflect the overall item totals for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.store_id"": ""s003"", ""response.event.type"": ""Purchase"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", purchaseCount: { $sum: 1 } } } ]); ","Retrieve the age groups of customers who made purchases at the specified store location, counting the total number of purchases for each age group. The data should only include events marked as purchases and should account for each customer's profile individually during the aggregation process."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.store_id"": ""s003"", ""response.event.type"": ""Purchase"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$response.event.customer_profile.age_group"", purchaseCount: { $sum: 1 } } } ]); ","Count the number of purchases made by different age groups of customers at the designated retail location, including only those events categorized as purchases. Each customer's profile should be considered separately in the grouping to provide an accurate tally of purchases per age group."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.dwell_time"": { $gt: 20 } } }, { $group: { _id: ""$identifier.store_id"", dwellCount: { $sum: 1 } } } ]); ","Retrieve the store identifiers for locations where customers have spent more than 20 minutes interacting with staff, and calculate the total number of such occurrences for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.dwell_time"": { $gt: 20 } } }, { $group: { _id: ""$identifier.store_id"", dwellCount: { $sum: 1 } } } ]); ","Count the occurrences of customer interactions lasting longer than 20 minutes for each retail location, returning the unique store identifiers alongside the total interaction count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Return""] }, 1, 0] } } } } ]); ","Group the events by retail location to calculate the total number of return transactions for each store, where only those events categorized as ""Return"" are counted in the sum."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Return""] }, 1, 0] } } } } ]); ","Aggregate the events by store identifier and compute the total returns for each location, including only those transactions marked as ""Return"" in the calculation."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Retrieve the details of store events, including event types and customer demographics, where the records are categorized by retail location, store section, and checkout station. The retrieved data should also include information such as age groups, basket items, and dwell times for customers associated with each event, while filtering for specific criteria."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
",,"Collect information on events occurring in specific retail locations and stores, detailing customer interactions along various attributes such as age, purchases, and time spent, while ensuring the data is grouped according to distinct identifiers like store, aisle, and terminal."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Calculate the average dwell time of customers during their shopping visits at different retail locations, focusing solely on instances where a purchase was made. The results should be grouped by store ID to show each location's average customer dwell time."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } } ]); ","Determine the average amount of time customers spent in stores during purchasing events, categorized by each retail location's ID. Only include records of transactions labeled as purchases in the calculation of average dwell time per store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } }, { $sort: { totalReturns: -1 } } ]); ","Count the total number of return events recorded at each retail location, only considering those events categorized as returns, and present the results sorted in descending order based on the total number of returns."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } } }, { $sort: { totalReturns: -1 } } ]); ","Sum and display the number of return transactions for each store location, focusing exclusively on return event records, and order the results from highest to lowest total return count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: { store_id: ""$identifier.store_id"", aisle_number: ""$identifier.aisle_number"" }, avgBasketItems: { $avg: ""$response.event.customer_profile.basket_items"" } } } ]); ","Retrieve the average number of items in customers' baskets during browsing events, grouped by the retail location and aisle section where the browsing took place. Only include data from browsing activities, and ensure that the results reflect the average for each combination of store and aisle."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: { store_id: ""$identifier.store_id"", aisle_number: ""$identifier.aisle_number"" }, avgBasketItems: { $avg: ""$response.event.customer_profile.basket_items"" } } } ]); ","Calculate the average number of basket items for customers who are browsing, organizing the results by both store location and aisle number. The data should exclusively pertain to browsing events, capturing the average across each specific store and aisle."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.age_group"": { $exists: true } } }, { $group: { _id: ""$response.event.customer_profile.age_group"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Select the age groups of customers whose profiles are available, and count the total number of events for each group. The results should be organized in descending order of the total number of events."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.customer_profile.age_group"": { $exists: true } } }, { $group: { _id: ""$response.event.customer_profile.age_group"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Identify the various age groups present in customer profiles, tallying the total event counts for each group, and arrange the outcomes to show the groups with the highest event totals first."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.pos_terminal"": { $exists: true } } }, { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Count the total number of events logged at each checkout station where the station identifier is present, and present the results in descending order based on the total event count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""identifier.pos_terminal"": { $exists: true } } }, { $group: { _id: ""$identifier.pos_terminal"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Aggregate the event data by checkout station, only including those stations that are recorded, and sort the results in decreasing order based on the total number of events associated with each station."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalDwellTime: { $sum: { $sum: ""$response.event.customer_profile.dwell_time"" } }, totalPurchases: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } }, { $match: { totalPurchases: { $gt: 100 } } } ]); ","Aggregate the total dwell time and purchase counts for each retail location, summing the dwell time for customers and counting only those transactions categorized as purchases. Only include results where the number of purchases exceeds 100 for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", totalDwellTime: { $sum: { $sum: ""$response.event.customer_profile.dwell_time"" } }, totalPurchases: { $sum: { $cond: [{ $eq: [""$response.event.type"", ""Purchase""] }, 1, 0] } } } }, { $match: { totalPurchases: { $gt: 100 } } } ]); ","Calculate the total time customers spent and the number of purchases at each store, where purchases are counted solely if they meet the purchase classification criteria, and include only stores that have more than 100 purchases recorded."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalBaskets: { $sum: ""$response.event.customer_profile.basket_items"" } } }, { $sort: { totalBaskets: -1 } } ]); ","Retrieve the total number of items purchased for each retail location, specifically focusing on transactions classified as purchases. The results should be organized in descending order based on the total number of items purchased at each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalBaskets: { $sum: ""$response.event.customer_profile.basket_items"" } } }, { $sort: { totalBaskets: -1 } } ]); ","Compile the total count of items bought at each store by only considering purchase events, and present the findings sorted from the highest to the lowest total item count per retail location."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", avgStaffInteraction: { $avg: ""$response.event.customer_profile.staff_interaction"" } } }, { $match: { avgStaffInteraction: { $gt: 3 } } } ]); ","Calculate the average level of staff interaction for each retail location by examining customer profiles from the purchase events, and include only those locations where the average staff interaction exceeds 3."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", avgStaffInteraction: { $avg: ""$response.event.customer_profile.staff_interaction"" } } }, { $match: { avgStaffInteraction: { $gt: 3 } } } ]); ","Determine the average interaction level with staff per store based on customer profiles associated with event responses, filtering to display only those stores where the average exceeds 3."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: { store_id: ""$identifier.store_id"", aisle_number: ""$identifier.aisle_number"" }, totalReturns: { $sum: 1 } } }, { $sort: { totalReturns: -1 } } ]); ","Count the number of return transactions recorded at each retail location and aisle, grouping the results by the store identifier and aisle number while only considering cases where the event type is classified as a return. The output should be organized in descending order based on the total return count."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: { store_id: ""$identifier.store_id"", aisle_number: ""$identifier.aisle_number"" }, totalReturns: { $sum: 1 } } }, { $sort: { totalReturns: -1 } } ]); ","Aggregate the total number of return events by store and aisle, specifically filtering for events that fall under the return category, and sort the final results in descending order according to the return totals for each unique store and aisle combination."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalDwellTime: -1 } } ]); ","Retrieve the total time that customers spent browsing in each retail location, where only interactions categorized as browsing are considered. The results should be grouped by the store location identifier and sorted in descending order based on the total browsing time."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", totalDwellTime: { $sum: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalDwellTime: -1 } } ]); ","Calculate the accumulated dwell time of customers during their browsing sessions at each store, ensuring only browsing events are included. The data should be organized by store location identifiers and presented in order, with the longest total dwell time appearing first."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", eventCount: { $sum: 1 }, avgBasketItems: { $avg: ""$response.event.customer_profile.basket_items"" } } }, { $match: { eventCount: { $gt: 50 } } } ]); ","Aggregate data to count the number of events for each retail location, calculating the average number of basket items per customer profile, while only considering locations that have had more than 50 recorded events."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $group: { _id: ""$identifier.store_id"", eventCount: { $sum: 1 }, avgBasketItems: { $avg: ""$response.event.customer_profile.basket_items"" } } }, { $match: { eventCount: { $gt: 50 } } } ]); ","Summarize the event occurrences by retail location, determining both the total event count and the average basket items per customer for each site, but only include those locations that exceed 50 events logged."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.aisle_number"", totalPurchases: { $sum: 1 }, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalPurchases: -1 } } ]); ","Retrieve the total number of purchases and the average dwell time for customers in each aisle, specifically focusing on recorded purchase events. The results should be grouped by aisle number and sorted in descending order based on the total number of purchases."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.aisle_number"", totalPurchases: { $sum: 1 }, avgDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $sort: { totalPurchases: -1 } } ]); ","Summarize the number of purchase transactions and the average time customers spent in each aisle, filtering for events that indicate purchases. Organize the findings by aisle number and arrange them from the highest total purchases to the lowest."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $lookup: { from: ""store_events"", localField: ""identifier.store_id"", foreignField: ""identifier.store_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $group: { _id: ""$identifier.store_id"", totalEvents: { $sum: { $cond: [{ $eq: [""$related_events.response.event.type"", ""Purchase""] }, 1, 0] } } } } ]); ","Calculate the total number of purchase events for each retail location by first associating related events based on the store identifier, then summing the occurrences of transactions designated as purchases from these related records."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $lookup: { from: ""store_events"", localField: ""identifier.store_id"", foreignField: ""identifier.store_id"", as: ""related_events"" } }, { $unwind: ""$related_events"" }, { $group: { _id: ""$identifier.store_id"", totalEvents: { $sum: { $cond: [{ $eq: [""$related_events.response.event.type"", ""Purchase""] }, 1, 0] } } } } ]); ","Determine the sum of purchase events grouped by each store identifier, beginning by linking corresponding records using the store identifier, and counting how many of these linked entries are categorized as purchases."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", staffInteractionCount: { $sum: ""$response.event.customer_profile.staff_interaction"" }, averageDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $match: { staffInteractionCount: { $gt: 10 } } } ]); ","Calculate the total number of staff interactions and the average dwell time for customers by retail location, only including locations where the total number of staff interactions exceeds ten. Each location's data is derived from individual customer profiles within their respective events."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $unwind: ""$response.event.customer_profile"" }, { $group: { _id: ""$identifier.store_id"", staffInteractionCount: { $sum: ""$response.event.customer_profile.staff_interaction"" }, averageDwellTime: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $match: { staffInteractionCount: { $gt: 10 } } } ]); ","Aggregate the customer profile data by retail location to determine the sum of staff interactions and the average dwell time, ensuring that only locations with more than ten staff interactions are included in the results."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalBaskets: { $sum: ""$response.event.customer_profile.basket_items"" } } }, { $match: { totalBaskets: { $gte: 100 } } } ]); ","Compile a summary of retail locations that recorded purchases, specifically those with at least 100 total items in customers' baskets. Group the results by store identifier, focusing solely on instances where the recorded event indicates a purchase."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Purchase"" } }, { $group: { _id: ""$identifier.store_id"", totalBaskets: { $sum: ""$response.event.customer_profile.basket_items"" } } }, { $match: { totalBaskets: { $gte: 100 } } } ]); ","Generate a report detailing stores that have achieved a minimum of 100 items sold in baskets during purchase events, organizing the data by store identifier and only considering transactions classified as purchases."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $project: { store_id: ""$identifier.store_id"", dwell_time: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $group: { _id: ""$store_id"", avgDwellTime: { $avg: ""$dwell_time"" } } } ]); ","Retrieve the average dwell time of customers who browsed items, grouped by retail location, focusing exclusively on the store identifiers. The results should present the average dwell time calculated from customer profiles for each store."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Browse"" } }, { $project: { store_id: ""$identifier.store_id"", dwell_time: { $avg: ""$response.event.customer_profile.dwell_time"" } } }, { $group: { _id: ""$store_id"", avgDwellTime: { $avg: ""$dwell_time"" } } } ]); ","Compute the average time customers spent browsing at each retail location, identified by store identifiers, taking into account only those visits categorized as browsing events. The output should include the average dwell time per store as derived from the relevant customer profiles."
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } }, { $sort: { totalReturns: -1 } } ]);",Count the number of return transactions for each retail location and display the results sorted in descending order by the total number of returns.
store_event,"{
  ""collections"": [
    {
      ""name"": ""store_events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""store_id"": {""description"": ""Filter by retail location""},
              ""aisle_number"": {""description"": ""Filter by store section""},
              ""pos_terminal"": {""description"": ""Filter by checkout station""}
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""properties"": {
                  ""type"": {""description"": ""Purchase, Return, Browse""},
                  ""customer_profile"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""properties"": {
                        ""age_group"": {},
                        ""basket_items"": {},
                        ""dwell_time"": {},
                        ""staff_interaction"": {}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}
","
db.store_events.aggregate([ { $match: { ""response.event.type"": ""Return"" } }, { $group: { _id: ""$identifier.store_id"", totalReturns: { $sum: 1 } }, { $sort: { totalReturns: -1 } } ]);","Aggregate the total returns for each store, and present the data in order of highest to lowest return counts."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Low"" }); ","Retrieve all records where the severity of the event is classified as ""Low."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Low"" }); ","Select instances where the event severity level is indicated as ""Low."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"" }); ","Retrieve the records of events where the identifier indicates a specific camgroup with the value ""group1."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"" }); ","Select the event details corresponding to the identifier associated with camgroup ""group1."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"" }); ","Retrieve all records of events that have a type classified as ""person."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"" }); ","List all occurrences of events where the type is designated as ""person."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $exists: true } }); ","Retrieve all records where the attribute label for event blobs is present, ensuring that only those entries with this specific characteristic are included in the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $exists: true } }); ","Gather all entries that contain a defined label within the blobs of event responses, focusing solely on those records that exhibit this attribute."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gt: new Date(""2023-01-01T00:00:00Z"") } }); ","Retrieve all records of events that have a timestamp greater than January 1, 2023. This will include only the events that occurred after this date."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gt: new Date(""2023-01-01T00:00:00Z"") } }); ","Select events that were recorded after January 1, 2023, focusing specifically on those with timestamps that indicate they happened after this point in time."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }); ",Retrieve all records where the gender attribute of individuals in the associated blobs is identified as female.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }); ",Select entries that contain blobs with a gender attribute labeled as female for all relevant individuals.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": { $in: [""20-30"", ""30-40""] } }); ","Retrieve all records of events where the age attribute of the observed entities falls within the specified ranges of ""20-30"" and ""30-40""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": { $in: [""20-30"", ""30-40""] } }); ","Select events that include entities whose age attribute is categorized as either ""20-30"" or ""30-40""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera123"" }); ","Retrieve all records of events where the camera identifier is set to ""camera123""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera123"" }); ","Select entries related to events that are associated with the camera identified as ""camera123""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gte: 0.8 } }); ",Retrieve the records of events where the confidence score for any associated image blob is at least 0.8.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gte: 0.8 } }); ",List all events that contain image blobs with a score of 0.8 or higher for confidence.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.label"": ""ABC123"" }); ","Retrieve records where the event is identified by the label ""ABC123."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.label"": ""ABC123"" }); ","Find all entries that correspond to the event associated with the label ""ABC123."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task1"", ""response.event.severity"": ""Critical"" }); ","Retrieve all events that are associated with a specific task identified as ""task1"" and classified with a severity level of ""Critical."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task1"", ""response.event.severity"": ""Critical"" }); ","Select the records of events marked as ""Critical"" in severity that are linked to the task labeled ""task1."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""vehicle"", ""response.event.blobs.attribs.Make"": ""Toyota"" }); ",Retrieve the records of events where the event type is categorized as a vehicle and the make of the vehicle is specified as Toyota.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""vehicle"", ""response.event.blobs.attribs.Make"": ""Toyota"" }); ",Select entries from the events that describe occurrences involving vehicles specifically identified as Toyota.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": ""Red"", ""response.event.blobs.attribs.Type"": ""Sedan"" }); ","Retrieve the records of events where the attributes of the associated blobs specify a color of ""Red"" and a type of ""Sedan."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": ""Red"", ""response.event.blobs.attribs.Type"": ""Sedan"" }); ","List the events that contain blobs with attributes indicating the color ""Red"" and a type categorized as ""Sedan."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.subclass"": "" SUV "" }); ","Retrieve all records that contain information about objects classified as ""SUV"" within their associated event blobs."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.subclass"": "" SUV "" }); ","Identify and list all entries where the event details include blobs that have been categorized under the subclass ""SUV."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $lt: new Date(""2023-12-31T23:59:59Z"") } }); ","Retrieve all records of events occurring before December 31, 2023, based on the timestamps of the events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $lt: new Date(""2023-12-31T23:59:59Z"") } }); ","List events that have taken place prior to December 31, 2023, utilizing the timestamps for the event occurrences."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $regex: /^AB/ } }); ","Retrieve records where the label associated with the blobs within the event response starts with ""AB""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $regex: /^AB/ } }); ","Select entries that contain blobs in the event response with labels beginning with the characters ""AB""."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Upper Clothing"": ""Shirt"", ""response.event.blobs.attribs.Lower Clothing"": ""Pants"" }); ","Retrieve records where the upper clothing is specified as ""Shirt"" and the lower clothing is indicated as ""Pants"" within the event blobs' attributes."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Upper Clothing"": ""Shirt"", ""response.event.blobs.attribs.Lower Clothing"": ""Pants"" }); ","Identify events that contain details of individuals wearing a ""Shirt"" on top and ""Pants"" on the bottom in the attributes of the blobs associated with those events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group5"", ""response.event.type"": ""person"", ""response.event.severity"": { $ne: ""Low"" } }); ","Retrieve all events associated with the specified group identifier ""group5"" where the event type is categorized as ""person"" and the event severity is anything other than ""Low."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group5"", ""response.event.type"": ""person"", ""response.event.severity"": { $ne: ""Low"" } }); ","Select events linked to the group identified as ""group5"" that involve individuals and have a severity level classified above ""Low."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.match_id"": { $in: [""name1"", ""name2""] } }); ","Retrieve records that include event details where the associated match identifiers match either ""name1"" or ""name2."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.match_id"": { $in: [""name1"", ""name2""] } }); ","Select entries that contain information about events with blob match identifiers of ""name1"" or ""name2."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gt: 0.5 }, ""response.event.severity"": ""Medium"" }); ",Retrieve events where the confidence score of the associated blobs is greater than 0.5 and the event severity is classified as Medium.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gt: 0.5 }, ""response.event.severity"": ""Medium"" }); ",Select events that have blobs with a score exceeding 0.5 and are marked with a Medium severity level.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve the identifiers of events characterized by high severity and associated with a specific camera, grouped by task identifiers, and sorted in ascending order of the event creation timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"List the identifiers of events marked as critical, belonging to a certain camera, organized by task IDs, and arranged in order of their creation timestamps from earliest to latest."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Critical"" }); ","Retrieve all records where the severity of the event is identified as ""Critical."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": ""Critical"" }); ","Collect information on events that have a severity classification marked as ""Critical."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera123"" }); ","Retrieve all records of events captured by the camera identified as ""camera123."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": ""camera123"" }); ","List every event associated with the camera labeled ""camera123."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"" }).limit(10); ","Retrieve a maximum of ten entries where the event type is categorized as ""person."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"" }).limit(10); ","Gather up to ten records that specifically classify the event type as ""person."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $exists: true } }); ",Retrieve all records where the designation of an item in the collection is indicated by an existing label within the blobs related to event responses.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $exists: true } }); ","Gather all entries that include a designated label within the blobs of event responses, ensuring that only those entries with such labels are considered."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Retrieve all records of events with timestamps from January 1, 2023, to December 31, 2023, inclusive."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.c_timestamp"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Collect all events occurring between January 1, 2023, and December 31, 2023, focusing on their corresponding timestamps."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"", ""response.event.severity"": ""Medium"" }); ","Retrieve the records of events where the group identifier is ""group1"" and the event severity is marked as ""Medium."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"", ""response.event.severity"": ""Medium"" }); ","Select the events associated with the group labeled ""group1"" and exhibiting a severity level classified as ""Medium."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }).count(); ",Count the number of events where the gender attribute of the individuals captured in the event blobs is identified as female.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Female"" }).count(); ",Determine the total occurrences of events that contain blobs with female gender attributes recorded within them.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gt: 0.8 } }).sort({ ""response.event.c_timestamp"": -1 }); ","Select the records where the confidence score of event blobs is greater than 0.8, and arrange the results in descending order based on the event timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gt: 0.8 } }).sort({ ""response.event.c_timestamp"": -1 }); ","Identify entries that have an event blob score exceeding 0.8, sorted by the corresponding event timestamp in descending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task1"", ""response.event.type"": ""vehicle"" }).limit(5); ","Retrieve up to five records of events related to vehicles that are associated with the specified task identified as ""task1."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": ""task1"", ""response.event.type"": ""vehicle"" }).limit(5); ","Select a maximum of five entries for vehicle-related events linked to the task labeled ""task1."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.age"": { $regex: /20-30/ } }); ","Find all events that have attributes indicating the age range of individuals between 20 and 30 years old, focusing specifically on the related blobs of information."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.age"": { $regex: /20-30/ } }); ","Identify events that include blobs with attributes specifying ages within the range of 20 to 30 years, concentrating on the details associated with those age attributes."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.label"": ""ABC123"" }).sort({ ""response.event.c_timestamp"": 1 }); ","Retrieve all records where the event label is ""ABC123,"" and organize the results in ascending order based on the event's timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.label"": ""ABC123"" }).sort({ ""response.event.c_timestamp"": 1 }); ","Select entries with the event label ""ABC123"" and sort them chronologically by the timestamp of the event, presenting the findings in ascending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Make"": ""Toyota"", ""response.event.type"": ""vehicle"" }); ","Extract all records related to vehicles identified as ""Toyota,"" ensuring that only events associated with this make are included in the results. The search should specifically target entries categorized under the type of vehicle."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Make"": ""Toyota"", ""response.event.type"": ""vehicle"" }); ","Gather details on events concerning vehicles made by ""Toyota,"" focusing solely on instances where this specific make is involved, filtered to include only those classified under the vehicle type."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": { $in: [""Red"", ""Blue""] }, ""response.event.severity"": { $ne: ""Low"" } }); ","Retrieve all events where the color of the associated attributes in the blobs is either red or blue, and the severity of the event is not classified as low."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": { $in: [""Red"", ""Blue""] }, ""response.event.severity"": { $ne: ""Low"" } }); ","Select events that have attributes in the blobs with colors red or blue, ensuring that the severity of the events is above low."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""SUV"" }).pretty(); ","Retrieve all records of events where the type of vehicle identified in the attributes of the event blobs is categorized as ""SUV."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""SUV"" }).pretty(); ","List every event entry that includes a vehicle type marked as ""SUV"" within the attributes of its associated blobs."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": { $exists: true } }).limit(20); ","Retrieve a maximum of twenty records where the task identifier is present, ensuring only those events that contain this specific identifier are included in the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": { $exists: true } }).limit(20); ","Select up to twenty entries where the existence of a task identifier is confirmed, focusing exclusively on events that satisfy this condition in the retrieval process."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.severity"": ""High"", ""identifier.camera_id"": ""camera456"" }); ","Retrieve records of events where the severity of the blobs is classified as ""High"" and the associated camera identifier matches ""camera456."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.severity"": ""High"", ""identifier.camera_id"": ""camera456"" }); ","List all events that feature blobs with a ""High"" severity rating, specifically for the camera identified as ""camera456."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group2"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(15); ","Retrieve the most recent 15 events associated with the specified group identifier ""group2"", ordered by the event timestamp in descending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group2"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(15); ","Select the latest 15 records of events for the group identified as ""group2"", sorted from the most recent to the oldest based on the event's timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": ""XYZ456"" }).count(); ","Count the total number of events that have a blob labeled ""XYZ456"" within their response data."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": ""XYZ456"" }).count(); ","Determine how many events contain a blob with the label ""XYZ456"" in the event's response information."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": { $ne: ""camera789"" }, ""response.event.type"": ""person"" }).limit(10); ","Retrieve a maximum of ten records of events where the type is identified as ""person"" and the camera used is not ""camera789."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camera_id"": { $ne: ""camera789"" }, ""response.event.type"": ""person"" }).limit(10); ","Select up to ten event records that classify the type as ""person,"" ensuring that they do not originate from the camera identified as ""camera789."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Upper Clothing"": { $exists: true } }); ","Retrieve all records where the upper clothing attribute exists within the event blobs, ensuring that the data includes instances that have identifiable clothing information."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Upper Clothing"": { $exists: true } }); ","Gather all entries that contain an upper clothing attribute in their event blobs, focusing specifically on those records that include such clothing details."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve the identifiers and attributes of events classified as either person or vehicle, with specific emphasis on those originating from a certain group and tied to designated tasks. The results should be categorized by severity, showcasing only the most critical events and limiting the output to the top ten based on the occurrence timestamps."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Identify the event identifiers and related attributes for those events categorized as person or vehicle, ensuring that the selection is confined to a particular group and associated tasks. The output should be organized by severity level, focusing on the most critical incidents, and should only include the top ten based on their recorded timestamps."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": { $eq: ""Critical"" } }); ",Retrieve all records of events where the severity is classified as Critical.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""response.event.severity"": { $eq: ""Critical"" } }); ",Select entries from the dataset concerning events that have been assigned a severity level of Critical.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"" }).sort({ ""response.event.c_timestamp"": -1 }); ","Retrieve all events associated with the specified group identifier, ordered by the event's timestamp in descending sequence to display the most recent occurrences first."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"" }).sort({ ""response.event.c_timestamp"": -1 }); ","Select events linked to the given camgroup, arranged by their timestamps from latest to earliest, ensuring that the recent events are prioritized in the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.type"": ""person"" } }, { $group: { _id: ""$identifier.camgroup_id"", totalEvents: { $sum: 1 } } }]); ","Retrieve the total number of events categorized as ""person,"" grouped by their associated camgroup identifier."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.type"": ""person"" } }, { $group: { _id: ""$identifier.camgroup_id"", totalEvents: { $sum: 1 } } }]); ","Count the occurrences of events classified as ""person,"" aggregating the results by the camgroup identifier."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Medium"" } }, { $sort: { ""response.event.c_timestamp"": 1 } }, { $limit: 10 }]); ","Retrieve the details of events with a severity level classified as ""Medium,"" sorted by their occurrence timestamps in ascending order, and limit the results to the first ten entries."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Medium"" } }, { $sort: { ""response.event.c_timestamp"": 1 } }, { $limit: 10 }]); ","Select up to ten events that are rated with a ""Medium"" severity, arranged in chronological order based on their timestamps, reflecting the earliest occurrences first."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $exists: true } }); ",Select all records where the event data includes a label associated with blobs. This selection specifically identifies instances where such labels are present within the event responses.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.label"": { $exists: true } }); ","Gather all entries that contain a label within the blobs of the event responses, ensuring that only those records with an existing label are included in the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.score"": { $gte: 0.8 } } }, { $group: { _id: ""$identifier.task_id"", totalBlobs: { $sum: 1 } } }]); ","Count the number of blobs from events where the confidence score is at least 0.8, grouping the results by the task identifier associated with each event."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.score"": { $gte: 0.8 } } }, { $group: { _id: ""$identifier.task_id"", totalBlobs: { $sum: 1 } } }]); ","Aggregate the total number of blobs from events with a score of 0.8 or higher, organizing the output by the task identifier linked to each event."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""vehicle"", ""response.event.blobs.attribs.Make"": ""toyota"" }).limit(5); ",Extract the first five records where the event type is classified as a vehicle and the associated attributes indicate the make is Toyota.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""vehicle"", ""response.event.blobs.attribs.Make"": ""toyota"" }).limit(5); ","Retrieve a maximum of five entries that pertain to vehicles, specifically targeting those that are identified as having Toyota as their make."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""identifier.camera_id"": ""camera123"" } }, { $group: { _id: null, latestEvent: { $max: ""$response.event.c_timestamp"" } } }]); ","Retrieve the most recent timestamp of events captured by a specific camera identified as ""camera123"" by examining the related data and aggregating the information to determine the latest occurrence."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""identifier.camera_id"": ""camera123"" } }, { $group: { _id: null, latestEvent: { $max: ""$response.event.c_timestamp"" } } }]); ","Identify the latest event timestamp recorded by the camera designated as ""camera123"" by filtering through the event information and consolidating the results to find the most recent entry."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": ""30-40"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(3); ","Retrieve the three most recent entries where the attributes of the associated blobs indicate an age range of 30 to 40 years, sorted in descending order by the event's timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": ""30-40"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(3); ","Select the latest three occurrences that have blob attributes specifying an age group of 30-40, with the results ordered by the event's timestamp in a descending manner."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Low"" } }, { $sort: { ""response.event.c_timestamp"": 1 } }, { $group: { _id: ""$identifier.camgroup_id"", count: { $sum: 1 } } }]); ","Retrieve the count of events with a severity level classified as ""Low,"" grouped by the unique identifier for the camera group. The results should be organized in ascending order based on the event timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Low"" } }, { $sort: { ""response.event.c_timestamp"": 1 } }, { $group: { _id: ""$identifier.camgroup_id"", count: { $sum: 1 } } }]); ","Count the number of occurrences of events marked as ""Low"" in severity and categorize these counts by their respective camera group identifiers, ensuring the output is sorted by the timestamp of the events in chronological order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""Hatchback"" }).project({ ""response.event.blobs.label"": 1 }); ","Retrieve the labels of all blobs associated with events that involve vehicles categorized as ""Hatchback."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""Hatchback"" }).project({ ""response.event.blobs.label"": 1 }); ","List the labels for blobs from events related to vehicles identified as ""Hatchback."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""identifier.task_id"": ""task100"" } }, { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }]); ","Gather the unique labels associated with blobs from events that have a specific task identifier, along with the average confidence scores for each label, ensuring that blobs are separately processed before grouping the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""identifier.task_id"": ""task100"" } }, { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }]); ","Compile the distinct labels assigned to blobs in events corresponding to a defined task identifier, while calculating the average score of confidence for each label after disaggregating the blob entries."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group2"", ""response.event.label"": { $regex: /^AB/ } }); ","Retrieve the events associated with the group identified as ""group2"" where the event's label begins with ""AB"". This selection should include all relevant records that meet these criteria."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group2"", ""response.event.label"": { $regex: /^AB/ } }); ","Gather the events linked to ""group2"" that feature labels starting with ""AB"". Ensure all applicable records fulfilling these conditions are included in the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","Retrieve the counts of distinct vehicle makes from event records classified as vehicles, organizing the results by the number of occurrences in descending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.blobs.attribs.Make"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","Count and categorize the various makes of vehicles noted in event records designated as vehicle types, and sort these counts in descending order to display the most frequent makes first."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": ""red"", ""response.event.severity"": { $ne: ""Low"" } }); ",Retrieve events where the color attribute of the associated blobs is red and the severity level of the event is not classified as low.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Color"": ""red"", ""response.event.severity"": { $ne: ""Low"" } }); ",Identify events that include blobs with a color designation of red and exclude those that are labeled with a low severity rating for the event.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""identifier.camera_id"": ""cameraXYZ"" } }, { $group: { _id: ""$response.event.severity"", eventCount: { $sum: 1 } } }]); ","Retrieve the severity levels of events recorded by a specific camera, along with the total count of events associated with each severity level, only including data from the camera identified as ""cameraXYZ."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""identifier.camera_id"": ""cameraXYZ"" } }, { $group: { _id: ""$response.event.severity"", eventCount: { $sum: 1 } } }]); ","Count the number of events grouped by severity for the camera designated as ""cameraXYZ,"" displaying the different severity levels along with the respective totals for each level."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Male"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(10); ","Retrieve the most recent ten records of events where the gender attribute of the associated blobs is classified as ""Male,"" ordered by the timestamp of the event in descending fashion."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Gender"": ""Male"" }).sort({ ""response.event.c_timestamp"": -1 }).limit(10); ","Identify and list the latest ten occurrences of events that include blobs with a gender designation of ""Male,"" arranged in descending order based on the event's timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.severity"": { $ne: null } } }, { $group: { _id: ""$identifier.camgroup_id"", totalBlobs: { $sum: 1 } } }]); ","Count the total number of blobs associated with events, grouping the results by the identifier of the camera group, while only including blobs that have a specified severity, ensuring that any blobs with a null severity are excluded from the count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.severity"": { $ne: null } } }, { $group: { _id: ""$identifier.camgroup_id"", totalBlobs: { $sum: 1 } } }]); ","Calculate the total blobs per camera group identifier from events where blobs possess a defined severity level, disregarding any blobs that do not have a severity assigned, and aggregating the results accordingly."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.label"": ""car"" }).project({ ""response.event.blobs.score"": 1 }); ","Retrieve the confidence scores of all events where the attribute label indicates a ""car."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.label"": ""car"" }).project({ ""response.event.blobs.score"": 1 }); ","List the scores associated with events that have an attribute label specified as ""car."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve records of events related to specific cameras, groups, or tasks that include details about the type, severity, and timestamp of the events. The results should highlight attributes of associated blobs along with their confidence scores and be organized based on the timestamps of the events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Select information on events that pertain to designated cameras, groups, or tasks, focusing on the type, severity, and timestamp details. The output must also feature characteristics of related blobs, including their confidence scores, ordered by the event's timestamps."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""identifier.camgroup_id"": ""group1"" }); ","Retrieve all records of events associated with the specified group identified as ""group1."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.find({ ""identifier.camgroup_id"": ""group1"" }); ","Gather all event entries that belong to the group labeled ""group1."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.severity"": ""Critical"" }); ","Retrieve all events categorized as ""person"" with a severity level of ""Critical."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.type"": ""person"", ""response.event.severity"": ""Critical"" }); ","Select records that identify events related to ""person"" instances and are marked with ""Critical"" severity."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.countDocuments({ ""response.event.blobs.attribs.Gender"": ""Female"" }); ","Count the total number of events where the attributes for the blobs indicate a gender of ""Female."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.countDocuments({ ""response.event.blobs.attribs.Gender"": ""Female"" }); ","Determine how many events have been recorded in which the blob attributes specify that the gender is ""Female."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gte: 0.8 } }); ",Retrieve all records where the confidence score of the associated attributes is greater than or equal to 0.8.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.score"": { $gte: 0.8 } }); ",Gather entries that have a score of 0.8 or higher for the characteristics recorded in the blobs section.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Medium"" } }, { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 } } }]); ","Retrieve the total count of events classified as having a medium severity level, grouped by the unique camera identifiers associated with those events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Medium"" } }, { $group: { _id: ""$identifier.camera_id"", totalEvents: { $sum: 1 } } }]); ","Count the number of events with medium severity, organizing the results by each distinct camera identifier related to those events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Color"": ""red"" } }, { $group: { _id: ""$response.event.blobs.attribs.label"", count: { $sum: 1 } } }]); ","Count the occurrences of each distinct label associated with red-colored objects within the events, ensuring that the data includes all relevant details from each event's blobs, and that the counts are grouped by label."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Color"": ""red"" } }, { $group: { _id: ""$response.event.blobs.attribs.label"", count: { $sum: 1 } } }]); ","Aggregate the total number of entries for each unique label of items that are red in color, extracting and organizing this information from the event blobs associated with the events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": { $exists: true } }).sort({ ""response.event.c_timestamp"": -1 }); ","Retrieve all records that include a task identifier, and sort the results in descending order based on the event's timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.task_id"": { $exists: true } }).sort({ ""response.event.c_timestamp"": -1 }); ","Select entries that have a task ID present, organizing them in reverse chronological order according to the recorded event time."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }]); ","Retrieve the labels of vehicles in the events where the type of event is classified as a vehicle, along with the average confidence scores of those vehicle events derived from their associated attributes. The results should be grouped by the vehicle labels to provide an average score for each distinct label."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$response.event.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }]); ","Compile a list of vehicle labels from the records identified as vehicle events, calculating the average confidence score for each label based on the data attributes associated with the vehicle events. The results will be organized by the unique vehicle labels."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.camgroup_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","Retrieve the count of events categorized as having a low severity, grouped by their associated camera group identifiers, and sort the results in descending order based on the event count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.camgroup_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","Count the number of low severity events for each camera group identifier, ordering the final results by the total number of such events in descending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.match_id"": ""name1"" }).limit(10); ","Find the first ten entries where the identification of the person matches ""name1"" from the attributes associated with the event descriptions."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.match_id"": ""name1"" }).limit(10); ","Retrieve up to ten records that correspond to the individual's name identified as ""name1"" within the attributes of the event details."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $project: { camera_id: ""$identifier.camera_id"", severity: ""$response.event.severity"", type: ""$response.event.type"" } }, { $match: { severity: ""Critical"" } }]); ","Retrieve the camera identifiers along with the severity and type of events, specifically focusing on those categorized as ""Critical."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $project: { camera_id: ""$identifier.camera_id"", severity: ""$response.event.severity"", type: ""$response.event.type"" } }, { $match: { severity: ""Critical"" } }]); ","Gather the camera IDs and corresponding event severity and type, ensuring to include only those events that are classified as ""Critical."""
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Make"": ""Toyota"" } }, { $group: { _id: ""$identifier.camgroup_id"", count: { $sum: 1 } } }]); ","Count the number of events classified as involving a vehicle from the manufacturer ""Toyota,"" grouping the results by the camera group identifier. Each vehicle event must be processed individually for aggregation purposes."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Make"": ""Toyota"" } }, { $group: { _id: ""$identifier.camgroup_id"", count: { $sum: 1 } } }]); ","Aggregate the total occurrences of vehicle events associated with the ""Toyota"" brand, organizing the results based on the camera group identifier, while unwinding each vehicle event for accurate counting."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": { $in: [""20-30"", ""30-40""] } }).sort({ ""response.event.c_timestamp"": 1 }); ","Retrieve records where the age attribute of the blobs is either in the range of 20 to 30 or 30 to 40, and sort these results chronologically by the event's timestamp."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Age"": { $in: [""20-30"", ""30-40""] } }).sort({ ""response.event.c_timestamp"": 1 }); ","Select entries that include blobs with age attributes within the specified ranges of 20-30 and 30-40, ordering the outcomes by the timestamp of the event in ascending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $group: { _id: ""$response.event.type"", distinctCameras: { $addToSet: ""$identifier.camera_id"" } } }]); ",Group the events by their type and collect a unique list of camera identifiers associated with each event type.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $group: { _id: ""$response.event.type"", distinctCameras: { $addToSet: ""$identifier.camera_id"" } } }]); ",Aggregate the event data based on type and compile a distinct collection of camera IDs linked to each type of event.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""sedan"" }).collation({ locale: ""en"", strength: 2 }).limit(5); ","Retrieve the first five records of events where the attributes of the blobs specified the type as ""sedan,"" using a case-insensitive matching approach."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""response.event.blobs.attribs.Type"": ""sedan"" }).collation({ locale: ""en"", strength: 2 }).limit(5); ","Select up to five entries of events that include blobs with attributes denoting the type as ""sedan,"" utilizing a case-insensitive comparison for the matching criteria."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.label"": { $ne: null } } }, { $group: { _id: ""$response.event.label"", totalSeverity: { $sum: 1 } } }]); ","Retrieve the unique number plates of events that have an assigned label, along with the total count of occurrences for each label. The results should reflect only those events where the number plate label is not null."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.label"": { $ne: null } } }, { $group: { _id: ""$response.event.label"", totalSeverity: { $sum: 1 } } }]); ","List the distinct number plates associated with events that possess a valid label, along with the cumulative total of each specific label's occurrence, excluding any labels that are null."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.c_timestamp"": { $gt: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $sort: { ""response.event.c_timestamp"": -1 } }]); ","Retrieve records of events that occurred between January 1, 2023, and December 31, 2023, sorted in descending order based on their timestamps."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $match: { ""response.event.c_timestamp"": { $gt: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } } }, { $sort: { ""response.event.c_timestamp"": -1 } }]); ","Gather data on events whose timestamps fall within the year 2023, and arrange the results in reverse chronological order according to the event timestamps."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.subclass"", avgScore: { $avg: ""$response.event.blobs.score"" } } }]); ","Retrieve the average confidence scores for each type of blob classified by its subclass from the events, after first separating each event's blobs into individual records."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([{ $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.subclass"", avgScore: { $avg: ""$response.event.blobs.score"" } } }]); ","Calculate the average score of confidence for each subclass of blobs within the events, ensuring each blob is treated as an individual entry before grouping the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"", ""response.event.type"": ""vehicle"" }).project({ _id: 0, label: 1 }); ","Retrieve the labels of vehicles associated with a specific camgroup identified as ""group1."" This selection is limited to events categorized as vehicle types, excluding any unique identifiers from the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.find({ ""identifier.camgroup_id"": ""group1"", ""response.event.type"": ""vehicle"" }).project({ _id: 0, label: 1 }); ","List the labels for events related to vehicles that belong to the camgroup labeled ""group1,"" ensuring that no identifying information is included in the output."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve all events that occurred with a severity level of Medium or higher, specifically those involving either a person or a vehicle, while grouping the results by the task identifier, and sorting them by the event timestamp in descending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"List events characterized by a severity of Medium or greater related to people or vehicles, organized by task identifier and ordered by the event occurrence time from most recent to least recent."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.task_id"", totalCriticalEvents: { $sum: 1 } } } ]); ",Identify the total number of critical events for each unique task by examining records where the severity of the response event is classified as critical. Aggregated results should reflect the count of such events grouped by their corresponding task IDs.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","db.events.aggregate([ { $match: { ""response.event.severity"": ""Critical"" } }, { $group: { _id: ""$identifier.task_id"", totalCriticalEvents: { $sum: 1 } } } ]); ","Count the critical response events, categorizing them by task IDs, and only include those instances where the event severity is marked as critical. The output should display the total number of critical events for each distinct task."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }, { $sort: { avgScore: -1 } } ]); ","Aggregate the labels of all blobs associated with events, calculating the average confidence score for each label. The results should be sorted in descending order based on the average score obtained."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", avgScore: { $avg: ""$response.event.blobs.score"" } } }, { $sort: { avgScore: -1 } } ]); ",Compile a list of unique blob labels from the events and determine the average score of confidence for each label. The output should be arranged in descending order according to the computed average score.
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $group: { _id: ""$identifier.camgroup_id"", totalPersonEvents: { $sum: 1 } } }, { $sort: { totalPersonEvents: -1 } } ]); ","Select the total number of events categorized as ""person"" for each unique group, and arrange the results in descending order based on the count of these events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""person"" } }, { $group: { _id: ""$identifier.camgroup_id"", totalPersonEvents: { $sum: 1 } } }, { $sort: { totalPersonEvents: -1 } } ]); ","Count the occurrences of ""person"" events grouped by their respective camera groups, presenting the totals sorted from highest to lowest number of events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $gte: ISODate(""2023-01-01T00:00:00Z"") } } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } }, { $sort: { eventCount: -1 } } ]); ","Retrieve the count of events recorded by each camera, only considering those events that occurred on or after January 1, 2023. The results should be organized in descending order based on the number of events associated with each camera."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $gte: ISODate(""2023-01-01T00:00:00Z"") } } }, { $group: { _id: ""$identifier.camera_id"", eventCount: { $sum: 1 } } }, { $sort: { eventCount: -1 } } ]); ","Count the number of occurrences for each camera while including only those events with timestamps from January 1, 2023, onward. The results should be sorted in descending order according to the event counts for each camera."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.color"", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } } ]); ","Count the number of instances for each unique color found in the attributes of event blobs, ensuring only those colors that appear more than ten times are included in the results."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.color"", count: { $sum: 1 } } }, { $match: { count: { $gt: 10 } } } ]); ","Aggregate the occurrences of each distinct color listed in the attributes of event blobs, filtering to show only those colors associated with more than ten occurrences."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.label"": { $exists: true } } }, { $group: { _id: ""$response.event.label"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Retrieve the count of unique labels associated with events that have a defined label, and provide the total number of occurrences for each label, sorted in descending order based on the total counts."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.label"": { $exists: true } } }, { $group: { _id: ""$response.event.label"", totalEvents: { $sum: 1 } } }, { $sort: { totalEvents: -1 } } ]); ","Aggregate the total occurrences of distinct labels from events that include a valid label, sorting the results from the highest total to the lowest."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.severity"": ""Medium"" } }, { $lookup: { from: ""events"", localField: ""identifier.camgroup_id"", foreignField: ""identifier.camgroup_id"", as: ""related_events"" } }, { $project: { camgroup_id: ""$identifier.camgroup_id"", relatedCount: { $size: ""$related_events"" } } } ]); ","Retrieve the identifiers of groups for events that have a medium severity level, along with a count of related events belonging to the same group, ensuring that each group's identifier is displayed alongside the count of its related events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.severity"": ""Medium"" } }, { $lookup: { from: ""events"", localField: ""identifier.camgroup_id"", foreignField: ""identifier.camgroup_id"", as: ""related_events"" } }, { $project: { camgroup_id: ""$identifier.camgroup_id"", relatedCount: { $size: ""$related_events"" } } } ]); ","List the group identifiers for events categorized as having medium severity and include the number of associated events in each group, displaying both the group identifier and the related event count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Gender"": ""Female"" } }, { $group: { _id: null, femaleCount: { $sum: 1 } } } ]); ","Count the total number of instances where the attributes for the blobs indicate the gender as ""Female"" from the events, ensuring to consider each blob individually in the count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.attribs.Gender"": ""Female"" } }, { $group: { _id: null, femaleCount: { $sum: 1 } } } ]); ","Aggregate the occurrences of blobs classified with the attribute of ""Female"" for gender from the event responses, counting each relevant instance across all events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.Make"", totalBlobs: { $sum: 1 } } }, { $project: { Make: ""$_id"", totalBlobs: { $sum: ""$totalBlobs"" } } }, { $sort: { totalBlobs: -1 } } ]); ","Retrieve the make of vehicles along with the total count of identified blobs representing those makes, with the results organized in descending order based on the count of blobs. Each make should be distinctly identified by the attribute associated with the blobs."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.Make"", totalBlobs: { $sum: 1 } } }, { $project: { Make: ""$_id"", totalBlobs: { $sum: ""$totalBlobs"" } } }, { $sort: { totalBlobs: -1 } } ]); ","List the vehicle makes and the corresponding total number of blobs for each make, sorted from the highest to the lowest total number of blobs. The retrieval should focus on the make attribute from the blobs associated with the events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$identifier.camgroup_id"", vehicleCount: { $sum: 1 } } }, { $sort: { vehicleCount: -1 } }, { $limit: 5 } ]); ","Count the number of vehicle-related events for each group and present the results, sorting them in descending order by the count of vehicles, while limiting the output to the top five groups."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.type"": ""vehicle"" } }, { $group: { _id: ""$identifier.camgroup_id"", vehicleCount: { $sum: 1 } } }, { $sort: { vehicleCount: -1 } }, { $limit: 5 } ]); ","Aggregate the total number of events classified as vehicles by group, ordering the groups by the vehicle count from highest to lowest, and restrict the results to the five groups with the most vehicle events."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", labelsCount: { $sum: 1 } } }, { $sort: { labelsCount: -1 } }, { $limit: 10 } ]); ","Aggregate the labels of the blobs from the event responses, counting how many times each label occurs, and then sort these counts in descending order. Limit the results to the top ten labels with the highest occurrences."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.label"", labelsCount: { $sum: 1 } } }, { $sort: { labelsCount: -1 } }, { $limit: 10 } ]); ","Group and count the occurrences of each blob label in the event responses, sorting the results in decreasing order by count, and only display the top ten labels based on their frequency."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $lte: ISODate(""2023-12-31T23:59:59Z"") } } }, { $group: { _id: ""$identifier.task_id"", eventCount: { $sum: 1 } } } ]); ","Retrieve the count of distinct tasks for events that occurred on or before December 31, 2023, aggregating the data by the task identifier."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.c_timestamp"": { $lte: ISODate(""2023-12-31T23:59:59Z"") } } }, { $group: { _id: ""$identifier.task_id"", eventCount: { $sum: 1 } } } ]); ","Count the number of events by task ID for records dated December 31, 2023, and earlier, grouping the results according to each unique task identifier."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $lookup: { from: ""events"", localField: ""identifier.task_id"", foreignField: ""identifier.task_id"", as: ""task_events"" } }, { $unwind: ""$task_events"" }, { $group: { _id: { camgroup: ""$identifier.camgroup_id"", task: ""$identifier.task_id"" }, totalEvents: { $sum: 1 } } } ]); ","Calculate the total number of events recorded for each combination of camera group and task using the associated task identifiers, grouping the results to provide a summary of these total events after linking related event entries."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $lookup: { from: ""events"", localField: ""identifier.task_id"", foreignField: ""identifier.task_id"", as: ""task_events"" } }, { $unwind: ""$task_events"" }, { $group: { _id: { camgroup: ""$identifier.camgroup_id"", task: ""$identifier.task_id"" }, totalEvents: { $sum: 1 } } } ]); ","Compile the total counts of events for every unique pair of task and camera group, achieving this by associating tasks based on their identifiers, and aggregating the results accordingly."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.Age"", ageCount: { $sum: 1 } } }, { $sort: { ageCount: -1 } } ]); ","Count the occurrences of different age groups from the attributes associated with event blobs, ensuring that each occurrence corresponds to a specific age group. The results should be arranged in descending order based on the count of each age group observed."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $group: { _id: ""$response.event.blobs.attribs.Age"", ageCount: { $sum: 1 } } }, { $sort: { ageCount: -1 } } ]); ","Aggregate and summarize the number of events for each age group extracted from the attributes of event blobs, sorting these age groups by their count in a descending manner to identify the most frequently occurring age category."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.camgroup_id"", lowSeverityCount: { $sum: 1 } } }, { $project: { camgroup_id: ""$_id"", lowSeverityCount: 1 } } ]); ","Count the number of events categorized as having low severity, grouping the results by the camera group identifier, ensuring that only events with a severity label of low are included in the count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $match: { ""response.event.severity"": ""Low"" } }, { $group: { _id: ""$identifier.camgroup_id"", lowSeverityCount: { $sum: 1 } } }, { $project: { camgroup_id: ""$_id"", lowSeverityCount: 1 } } ]); ","Aggregate the events to determine how many are classified as low severity, organized by their associated camera group identifier, while exclusively considering those events that have a low severity designation."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.score"": { $gte: 0.9 } } }, { $group: { _id: ""$response.event.blobs.match_id"", highConfidenceCount: { $sum: 1 } } } ]); ","Count the number of high-confidence visual matches for individuals by summing the occurrences of those with an accuracy score of 0.9 or greater, where each person is identified by their unique match ID, after separating each entry in the response's array of event blobs."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.score"": { $gte: 0.9 } } }, { $group: { _id: ""$response.event.blobs.match_id"", highConfidenceCount: { $sum: 1 } } } ]); ","Aggregate the total counts of highly confident matches for each individual based on a score of at least 0.9, ensuring to separately evaluate each entry in the blobs associated with the event response, while grouping results by match ID."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.subclass"": ""sedan"" } }, { $group: { _id: ""$identifier.camgroup_id"", sedanCount: { $sum: 1 } } }, { $sort: { sedanCount: -1 } } ]); ","Count the number of sedan-type blobs associated with each camera group, where only those blobs classified as sedans are considered. The results should be aggregated by the camera group identifier and sorted in descending order based on the sedan count."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $unwind: ""$response.event.blobs"" }, { $match: { ""response.event.blobs.subclass"": ""sedan"" } }, { $group: { _id: ""$identifier.camgroup_id"", sedanCount: { $sum: 1 } } }, { $sort: { sedanCount: -1 } } ]); ","Aggregate and count the occurrences of sedan blobs for each camera group, ensuring to include only those classified as sedans. Present the totals grouped by camera group identifier and arrange the results from highest to lowest count of sedans."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: null, totalEventsCount: { $sum: 1 } } } ]); ","Count the total number of events recorded in the database, aggregating all entries without any specific grouping criteria."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}","
db.events.aggregate([ { $group: { _id: null, totalEventsCount: { $sum: 1 } } } ]); ","Calculate the overall total of events captured, summarizing all records without applying any particular group distinctions."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"Retrieve all events with details about the identifiers and responses, focusing specifically on events classified as Critical severity, that involve either person or vehicle types, and that are associated with a particular camera and task group. The results should be organized by the timestamp of the events in ascending order."
meta_event,"{
  ""collections"": [
    {
      ""name"": ""events"",
      ""document"": {
        ""properties"": {
          ""identifier"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""camgroup_id"": {
                ""description"": ""Use this to filter events by group"",
              },
              ""task_id"": {
                ""description"": ""Use this to filter events by tasks"",
              }
              ""camera_id"": {
                ""description"": ""Use this to filter events by camera"",
              }
            }
          },
          ""response"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""event"": {
                ""bsonType"": ""object"",
                ""properties"": {
                  ""severity"": {
                    ""description"": ""Can be Low, Medium, Critical""
                  },
                  ""type"": {
                    ""description"": ""Type of the event. Use this to filter events of person and vehicle""
                  },
                  ""blobs"": {
                    ""bsonType"": ""array"",
                    ""items"": {
                      ""bsonType"": ""object"",
                      ""properties"": {
                        ""url"": {
                        },
                        ""attribs"": {
                          ""description"": ""Use this for attributes like Gender (Only Male, Female), Upper Clothing, Lower Clothing, Age (Ranges like 20-30, 30-40 and so on) for people and Make (like maruti suzuki, toyota, tata), Color, Type (like Hatchback, sedan, xuv), label (like car, truck, van, three wheeler, motorcycle) for Vehicles""
                        },
                        ""label"": {
                          ""description"": ""Use this label for number plate""
                        },
                        ""score"": {
                          ""description"": ""Use this for confidence for the blob""
                        },
                        ""match_id"": {
                          ""description"": ""Use this match_id for name of the person""
                        },
                        ""severity"": {
                        },
                        ""subclass"": {
                          ""description"": ""Use this for subclass for the blob""
                        }
                      }
                    },
                  },
                  ""c_timestamp"": {
                    ""description"": ""Use this for timestamp""
                  },
                  ""label"": {
                    ""description"": ""Use this label for number plate""
                  }
                }
              }
            }
          }
        }
      }
    }
  ],
  ""version"": 1
}",,"List all events indicating Critical severity, related to either personnel or vehicle types, filtered by specific camera and task identifiers, including their corresponding response details. The recorded events should be arranged chronologically based on their timestamps."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""OnTime"" }); ","Retrieve all records of transit events where the event status is recorded as ""OnTime."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""OnTime"" }); ","Select entries of transit events that have the event's status listed as ""OnTime."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""10"" }); ","Retrieve all records related to transit events where the route identifier is ""10."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""10"" }); ","List all transit event details for the specified route, specifically filtering for those that carry the identifier ""10."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"" }); ",Retrieve all records of transit events where the type of event is classified as an Incident.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"" }); ",Gather data on transit events that have been identified as Incidents.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gte: 2.50 } }); ",Retrieve records of transit events where the fare amount for passengers is at least $2.50.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gte: 2.50 } }); ",Identify transit events that include passengers whose fare amounts are greater than or equal to $2.50.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Central Station"" }); ","Retrieve all records of transit events where the next scheduled stop is ""Central Station."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Central Station"" }); ","Gather information on transit events that have ""Central Station"" as their upcoming stop."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": ""ABC123456"" }); ","Retrieve records that include details of passengers who possess a ticket with the identification number ""ABC123456."" The information should specifically encompass all associated events and passenger attributes related to this ticket identifier."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": ""ABC123456"" }); ","Identify entries that contain information on passengers who have the ticket ID ""ABC123456,"" ensuring that the selection highlights all pertinent event details and passenger specifics linked to this ticket."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V12345"" }); ","Retrieve all transit event records associated with the vehicle identified by ""V12345,"" focusing on the details related to its status, type of event, passenger information, and estimated arrival details."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V12345"" }); ","Collect and display all transit events linked to the specific vehicle numbered ""V12345,"" highlighting aspects such as event status, type, passenger details, and next estimated arrival information."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true } }); ","Retrieve all records where the coordinates of the event location are present, indicating that location data is available for the reported transit events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true } }); ","Collect all entries that have existing coordinates for the event location, demonstrating that such geographical information is provided for the transit occurrences."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lt: new Date() } }); ",Retrieve records of transit events where the boarding time of passengers occurred before the current date and time. This selection focuses on events associated with passengers who have already boarded prior to the present moment.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lt: new Date() } }); ","Gather transit event data involving passengers whose boarding times are earlier than the current date and time, highlighting instances where boarding has taken place before now."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Union Square"" }); ","Find all records of transit events where the destination stop for passengers is specified as ""Union Square."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Union Square"" }); ","Retrieve entries from transit events that include passengers traveling to the destination stop ""Union Square."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ $or: [{ ""response.event.status"": ""Delayed"" }, { ""response.event.status"": ""Cancelled"" }] }); ",Retrieve records of transit events where the event status is either delayed or cancelled. This selection should include all relevant details for each event that meets the specified conditions.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ $or: [{ ""response.event.status"": ""Delayed"" }, { ""response.event.status"": ""Cancelled"" }] }); ","List all transit events that have been reported as either delayed or cancelled, ensuring that the relevant information for each of these events is included in the results."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.route_id"": ""5"", ""response.event.status"": ""OnTime"" }); ","Retrieve a single record where the route identified by ""5"" is associated with an event status labeled as ""OnTime."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.route_id"": ""5"", ""response.event.status"": ""OnTime"" }); ","Find one entry that corresponds to route ""5"" while ensuring that the event's status is recorded as ""OnTime."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 0 } }); ","Retrieve records of transit events where there are no passengers listed for any event, indicating that the number of passengers is zero."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 0 } }); ","Select events from the transit log that have no passengers associated with them, reflecting a count of zero in the passenger details."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"" }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Retrieve all records of transit events where the event type is classified as an ""ArrivalDeparture,"" and sort these results in ascending order based on the estimated arrival time of the location."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"" }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Select transit event records that indicate the type as ""ArrivalDeparture,"" arranging them in order of the estimated arrival times from earliest to latest."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": { $in: [""1"", ""5"", ""10""] } }); ","Retrieve all records of transit events where the route identifier is among the specified values of ""1"", ""5"", or ""10""."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": { $in: [""1"", ""5"", ""10""] } }); ","List all transit events corresponding to the route identifiers ""1"", ""5"", and ""10""."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gte: new Date(""2023-01-01"") } }); ","Retrieve all records where the estimated arrival time of events is on or after January 1, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gte: new Date(""2023-01-01"") } }); ","Gather all entries that have an estimated arrival date of January 1, 2023, or later for their events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $lt: 10.00 } }).limit(5); ",Retrieve a maximum of five records of transit events where the fare amount for passengers is less than $10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $lt: 10.00 } }).limit(5); ",List up to five transit events that include passengers paying a fare amount beneath $10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": { $regex: /^[A-Z]{3}\d{6}$/ } }); ",Retrieve records of transit events that include passengers with ticket identifiers that match a specific pattern of three uppercase letters followed by six digits.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": { $regex: /^[A-Z]{3}\d{6}$/ } }); ",List all transit event entries where at least one passenger's ticket ID conforms to a format consisting of three uppercase characters followed by six numerical digits.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V67890"", ""response.event.status"": ""Delayed"" }); ","Retrieve the records of transit events where a specific vehicle identified by ""V67890"" is experiencing a delayed status."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V67890"", ""response.event.status"": ""Delayed"" }); ","Select the details of transit events for the vehicle with the identifier ""V67890"" that are marked as delayed in their status."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": { $exists: true } }).sort({ ""response.event.passengers.boarding_time"": -1 }); ","Retrieve records where the destination stop for passengers is specified, and arrange the results in descending order based on the boarding time of the passengers."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": { $exists: true } }).sort({ ""response.event.passengers.boarding_time"": -1 }); ",Select entries that include a destination stop for passengers and sort these entries by the boarding time in reverse chronological order.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the status and type of events for all transit occurrences involving specific bus or train routes and vehicles, focusing particularly on their passenger details such as ticket identifiers and boarding times, while incorporating location information like estimated arrivals and next stops."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Gather information about the event status and type for transit activities related to designated bus or train routes and vehicles, emphasizing passenger data that includes ticket numbers and boarding times, along with relevant location details like estimated arrival times and the next scheduled stops."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.transit_events.find({}); ,"Retrieve all records of transit events, including details of the identifiers, responses, events, status, type, passengers, boarding time, destination stop, fare amount, location coordinates, next stop, and estimated arrival times, without any restrictions or conditions."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.transit_events.find({}); ,"Gather comprehensive data on all transit events, encompassing identifiers, event statuses, types, passenger details, including ticket IDs, boarding times, destinations, fare amounts, and location information, with no filtering or limitations applied."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""123"" }); ","Retrieve all records related to transit events where the route identifier matches ""123."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""123"" }); ","Select the transit event entries corresponding to the specified route ID of ""123."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ","Retrieve all records of transit events where the status of the event is indicated as ""Delayed."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ","Select entries from transit events where the event is marked with a status of ""Delayed."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"", ""response.event.passengers"": { $exists: true, $ne: [] } }); ","Retrieve records of transit events that denote arrivals or departures and include passengers, ensuring that the passenger data is not empty or missing."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""ArrivalDeparture"", ""response.event.passengers"": { $exists: true, $ne: [] } }); ","List events related to vehicles arriving or departing that have passenger information available, excluding any records without passenger data."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 10.00 } }); ",Select records of transit events where at least one passenger has a fare amount greater than $10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 10.00 } }); ",Identify instances of transit events where the fare amount for any passenger exceeds $10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V98765"", ""response.event.location.next_stop"": ""Main St"" }); ","Find the records of transit events where the vehicle identifier matches ""V98765"" and the next stop is identified as ""Main St""."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V98765"", ""response.event.location.next_stop"": ""Main St"" }); ","Retrieve transit event details for the specific vehicle labeled ""V98765"" that are scheduled to stop at ""Main St"" next."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": /^ABC[0-9]{6}$/ }); ","Retrieve all records where the ticket identifier of passengers matches the specified pattern, which consists of the letters ""ABC"" followed by six digits."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.ticket_id"": /^ABC[0-9]{6}$/ }); ","Gather all entries that have passenger ticket identifiers starting with ""ABC"" and followed by six numeric characters, ensuring that only these records are returned."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Cancelled"", ""response.event.type"": ""Incident"" }); ","Retrieve all records of events where the status is marked as ""Cancelled"" and the type is categorized as ""Incident."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Cancelled"", ""response.event.type"": ""Incident"" }); ","List all instances where events have a status of ""Cancelled"" along with a type classified as ""Incident."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gt: new Date() } }); ",Fetch all records of transit events where the estimated arrival time is later than the current moment.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gt: new Date() } }); ",Retrieve transit events that have an estimated arrival after the present date and time.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Central Station"" }).limit(5); ","Retrieve up to five instances of transit events where passengers are heading to ""Central Station."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.destination_stop"": ""Central Station"" }).limit(5); ","Select a maximum of five records regarding transit events that involve passengers whose destination is ""Central Station."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lte: new Date(new Date().getTime() - 24*60*60*1000) } }); ",Retrieve all records where the boarding time of passengers was no later than 24 hours ago.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $lte: new Date(new Date().getTime() - 24*60*60*1000) } }); ",Select entries indicating that passengers boarded at least 24 hours prior to the current moment.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""456"", ""response.event.passengers"": { $elemMatch: { fare_amount: { $lt: 5.00 } } } }); ","Retrieve the records of transit events where the route matches ""456"" and at least one passenger paid a fare less than $5.00."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""456"", ""response.event.passengers"": { $elemMatch: { fare_amount: { $lt: 5.00 } } } }); ","Select transit events of route ""456"" where there is at least one passenger with a fare amount under $5.00."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 0 } }); ",Retrieve all records where there are no passengers recorded in the event's response.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $size: 0 } }); ",Identify instances in which the event's response indicates that no passengers are present.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.route_id"": ""789"", ""response.event.status"": ""OnTime"" }); ","Retrieve the details of a transit event for the specific route identified as ""789"" where the event status is recorded as ""OnTime."" This should return a single instance that matches these criteria."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.findOne({ ""identifier.route_id"": ""789"", ""response.event.status"": ""OnTime"" }); ","Find one transit event associated with the route ""789"" that is marked as ""OnTime,"" ensuring only the relevant details for this specific case are provided."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true, $not: { $size: 0 } } }); ","Retrieve all records where the location coordinates of transit events are present and not empty, ensuring that only those documents with valid geographic data are included in the results."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true, $not: { $size: 0 } } }); ","Select all entries that contain non-empty location coordinates for transit events, focusing exclusively on documents that provide valid spatial information."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": { $in: [""Maintenance"", ""Incident""] } }); ",Retrieve records of transit events where the event type is categorized as either Maintenance or Incident. This selection encompasses all relevant details of these events as recorded.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": { $in: [""Maintenance"", ""Incident""] } }); ","List all transit events that fall under the types Maintenance or Incident, including all associated information for each event type."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.bio"": { $exists: false } }); ",Retrieve entries where there are no bio details associated with passengers in the transit events.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.bio"": { $exists: false } }); ",Select records from the transit events that lack bio information for passengers.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(new Date().setHours(0, 0, 0, 0)) } }); ","Retrieve all records of transit events where the boarding time of passengers occurred today or later. This data specifically highlights instances of passengers boarding, ensuring it includes only events from the start of the current day onward."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(new Date().setHours(0, 0, 0, 0)) } }); ","Select transit event records that feature passenger boarding times from the beginning of today or any time after. This selection focuses on capturing all relevant instances that occurred today, emphasizing boarding events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V123"", ""response.event.passengers.fare_amount"": { $gte: 15.00 } }); ","Find the records of transit events for a specific vehicle identified by ""V123"" where at least one passenger has a fare amount greater than or equal to 15.00."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V123"", ""response.event.passengers.fare_amount"": { $gte: 15.00 } }); ","Select transit event entries associated with the vehicle labeled ""V123"" that include passengers paying a fare of 15.00 or more."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the status and type of transport events associated with a specific bus or train route and vehicle, focusing on events categorized as OnTime, Delayed, or Cancelled. The results should list instances of ArrivalDeparture, Maintenance, and Incident events while presenting the relevant details of passengers, including ticket identifiers, boarding times, destination stops, and fare amounts."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Compile a summary of transport events for a designated route and vehicle, filtering for instances that are marked as OnTime, Delayed, or Cancelled. The output should include types of events such as ArrivalDeparture, Maintenance, and Incident, along with detailed information about passengers, emphasizing their ticket IDs, times of boarding, destination stops, and fare totals."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ","Retrieve all records of transit events where the event status is marked as ""Delayed."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ","List all transit events that have been recorded with a status indicating they are ""Delayed."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""101"" }).sort({ ""response.event.passengers.boarding_time"": 1 }); ","Retrieve the records related to the bus or train route identified by ""101,"" organizing them in ascending order based on the boarding times of passengers noted in the events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""101"" }).sort({ ""response.event.passengers.boarding_time"": 1 }); ","Collect all events associated with the route labeled ""101"" and arrange them by increasing passenger boarding times."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", totalPassengers: { $sum: { $size: ""$response.event.passengers"" } } } } ]); ","Retrieve the total number of passengers for each bus or train route where the event type is classified as ""ArrivalDeparture."" The results should be grouped by route identifier, calculating the sum of passengers associated with each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", totalPassengers: { $sum: { $size: ""$response.event.passengers"" } } } } ]); ","Calculate the total passenger count for every bus or train route that experiences an ""ArrivalDeparture"" event type. Organize the data by route identifier, summing up the passengers recorded for each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gte: 10.00 } }); ",Retrieve all records of transit events where the fare amount paid by passengers is greater than or equal to $10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gte: 10.00 } }); ",List the transit events that include passengers whose fare amounts are at least $10.00.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.status"", count: { $sum: 1 } } } ]); ","Aggregate the transit events by grouping them according to their status, and count the total number of events associated with each unique status category."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.status"", count: { $sum: 1 } } } ]); ",Group the transit events by their respective statuses and compute the total count of events for each status type.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main St"" }).limit(10); ","Retrieve a maximum of ten records where the next stop for transit events is identified as ""Main St."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main St"" }).limit(10); ","Select up to ten entries that have ""Main St"" designated as the next stop in the transit event location."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""identifier.vehicle_id"": ""V123"" } }, { $project: { routeID: ""$identifier.route_id"", status: ""$response.event.status"", location: ""$response.event.location"" } } ]); ","Retrieve the route identifier, event status, and location details for all transit events associated with the vehicle identified as ""V123."" The results should only include information pertinent to that specific vehicle."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""identifier.vehicle_id"": ""V123"" } }, { $project: { routeID: ""$identifier.route_id"", status: ""$response.event.status"", location: ""$response.event.location"" } } ]); ","Select the route ID, status of the event, and location information for transit events linked to the vehicle number ""V123."" Only data related to this vehicle should be included in the output."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.fare_amount"": { $lt: 5.00 } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Aggregate data to find the total fare amounts for each unique ticket identified, focusing only on those passengers whose fare is less than $5.00, while ensuring that each passenger's fare is accounted for individually."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.fare_amount"": { $lt: 5.00 } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Calculate the sum of fares for each distinct ticket, considering only those passengers who paid less than $5.00, and process each passenger's fare in a way that groups the results by their respective ticket identifiers."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gt: new Date(""2023-10-01T00:00:00Z"") } }); ","Retrieve all transit events where the estimated arrival time is later than October 1, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gt: new Date(""2023-10-01T00:00:00Z"") } }); ","Select transit events that have an estimated arrival date beyond October 1, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Incident"" } }, { $group: { _id: { route: ""$identifier.route_id"", vehicle: ""$identifier.vehicle_id"" }, totalIncidents: { $sum: 1 } } } ]); ","Select the total count of incidents involving specific routes and vehicles, categorizing by route identifier and vehicle identifier, where only the records marked as incidents are considered."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Incident"" } }, { $group: { _id: { route: ""$identifier.route_id"", vehicle: ""$identifier.vehicle_id"" }, totalIncidents: { $sum: 1 } } } ]); ","Aggregate the number of reported incidents for each distinct combination of route and vehicle, ensuring that only those entries classified under incidents are included in the computation."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", avgFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } }, { $sort: { avgFare: -1 } } ]); ","Calculate the average fare for passengers grouped by bus or train route, sorting the results in descending order based on the average fare amount."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", avgFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } }, { $sort: { avgFare: -1 } } ]); ","Determine the average fare amount for passengers, organized by each route of the bus or train, and order the results from highest to lowest average fare."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true, $size: 2 } }); ",Retrieve records where the location of events includes valid coordinates represented by an array of exactly two numerical values.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.coordinates"": { $exists: true, $size: 2 } }); ",Select entries that indicate the event's location has coordinates specified as an array with precisely two elements.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalTickets: { $sum: 1 } } } ]); ","Determine the total number of tickets associated with each destination stop by analyzing the passenger data from transit events, with results categorized by destination. This process involves expanding the list of passengers for each event before aggregating the ticket counts per stop."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalTickets: { $sum: 1 } } } ]); ","Calculate the total ticket count for each destination stop by examining the passenger information within transit events, ensuring the results group the counts by the corresponding destination stop after expanding the passenger records."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": { $in: [""201"", ""202"", ""203""] } }).sort({ ""response.event.type"": 1 }); ","Retrieve the records of transit events where the route identifiers correspond to any of the specified values ""201,"" ""202,"" or ""203,"" and arrange these records in ascending order based on the type of event reported."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": { $in: [""201"", ""202"", ""203""] } }).sort({ ""response.event.type"": 1 }); ","Select the transit event records associated with route IDs ""201,"" ""202,"" or ""203,"" sorting the results in ascending sequence according to the event type described in the response."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $project: { routeID: ""$identifier.route_id"", passengers: ""$response.event.passengers"" } } ]); ","Retrieve the route identifiers and passenger information for all transit events that are marked as ""OnTime."" The data should reflect only those events where the status indicates timely arrival."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $project: { routeID: ""$identifier.route_id"", passengers: ""$response.event.passengers"" } } ]); ","List the identifiers for routes along with their respective passenger details for transit events classified as ""OnTime."" The focus is solely on instances that have recorded a timely event status."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", maxPassengers: { $max: { $size: ""$response.event.passengers"" } } } } ]); ","Group the transit events by the route identifier and calculate the maximum number of passengers recorded in the events associated with each route, ensuring that only the highest count for each route is returned."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", maxPassengers: { $max: { $size: ""$response.event.passengers"" } } } } ]); ","Aggregate the transit event data to find the highest number of passengers for each specific bus or train route, grouping the results by the route identifier and identifying the maximum passenger count for the events related to each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $exists: true, $ne: [] } }); ","Retrieve all records where there are passengers associated with the event response, ensuring that the passenger data array is not empty."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers"": { $exists: true, $ne: [] } }); ","Select entries that include events with passengers, confirming that the list of passengers is present and contains at least one entry."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"" } }, { $lookup: { from: ""transit_events"", localField: ""identifier.vehicle_id"", foreignField: ""identifier.vehicle_id"", as: ""maintenanceRecords"" } } ]); ","Retrieve records of maintenance events related to vehicles, along with associated maintenance history for each vehicle identified by its unique identifier. This data should include any records where the event type is specifically categorized as maintenance."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"" } }, { $lookup: { from: ""transit_events"", localField: ""identifier.vehicle_id"", foreignField: ""identifier.vehicle_id"", as: ""maintenanceRecords"" } } ]); ","Gather information on vehicle maintenance occurrences, ensuring to pull in related past maintenance entries for each vehicle based on their unique identifiers, with a focus on events designated as maintenance."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the identifiers, statuses, and types of all transit events that are either on time or delayed, filtering for specific bus or train routes and vehicles. The results should be grouped by event type and sorted by status, with only the most recent events included."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the identifiers, statuses, and types for transit events characterized as on time or delayed, applying filters for particular routes and vehicles. Organize the data by event type and sort it according to status, ensuring that only the latest events are presented."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ","Retrieve all records where the event status is classified as ""Delayed."""
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.find({ ""response.event.status"": ""Delayed"" }); ","Select entries that indicate a status of ""Delayed"" for transit events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""B123"" }); ","Retrieve all records associated with the route identified as ""B123"" within the transportation events data."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.route_id"": ""B123"" }); ","Gather all entries related to the transit route labeled ""B123"" from the available events regarding bus or train movements."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.status"": ""Cancelled"" }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Retrieve records of transit events where the event type is categorized as ""Incident"" and the status is labeled as ""Cancelled."" The results should be sorted in ascending order according to the estimated arrival time of the event's location."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.type"": ""Incident"", ""response.event.status"": ""Cancelled"" }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Select entries pertaining to transit incidents that have been cancelled, specifically filtering for cases marked as such, and arrange these entries in order of increasing estimated arrival time at their respective locations."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $group: { _id: ""$identifier.route_id"", count: { $sum: 1 } } } ]); ","Retrieve the count of bus or train routes associated with events that are marked as ""OnTime."" The results should group the data by each unique route identifier, reflecting the total occurrences of such events for each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $group: { _id: ""$identifier.route_id"", count: { $sum: 1 } } } ]); ","Count the number of occurrences of ""OnTime"" events for each bus or train route, organizing the results by the route identifier to indicate how many such events took place for each specific route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.fare_amount"": { $gt: 10.00 } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ",Summarize the total fare amounts for each unique ticket from passengers whose fare exceeded $10.00. The results should only include those tickets and provide the cumulative fare associated with each.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.fare_amount"": { $gt: 10.00 } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Calculate the total fare for each distinct ticket belonging to passengers who paid more than $10.00, ensuring only these ticket entries are included in the final results."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main St"" }).sort({ ""response.event.location.estimated_arrival"": -1 }).limit(5); ","Retrieve the most recent five transit events with the next stop identified as ""Main St,"" sorted in descending order by their estimated arrival time."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.next_stop"": ""Main St"" }).sort({ ""response.event.location.estimated_arrival"": -1 }).limit(5); ","List the five latest transit events scheduled to stop at ""Main St,"" arranging them from the latest to the earliest based on their estimated arrival dates."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.vehicle_id"", totalPassengers: { $sum: { $size: ""$response.event.passengers"" } } } } ]); ","Select the total number of passengers arriving or departing for each specific vehicle, while including only events categorized as ""ArrivalDeparture."" The results should group the data by vehicle identifiers and calculate the sum of the total passenger count for each vehicle."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.vehicle_id"", totalPassengers: { $sum: { $size: ""$response.event.passengers"" } } } } ]); ","Count the total passengers associated with arrival or departure events for each vehicle, focusing solely on those events identified as ""ArrivalDeparture."" Group the output by the vehicle's identifier and compute the total number of passengers for each distinct vehicle."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Retrieve records of transit events where the boarding time of passengers occurred within the year 2023, specifically from January 1 to December 31."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-01-01""), $lt: new Date(""2023-12-31"") } }); ","Gather data concerning transit events that include passenger boarding times occurring between January 1, 2023, and December 31, 2023."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } }, { $match: { averageFare: { $gt: 15.00 } } } ]); ","Compute the average fare amount paid by passengers for each bus or train route, then identify those routes where the average fare exceeds 15.00. The final results should represent the route identifiers along with their corresponding average fare."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: { $avg: ""$response.event.passengers.fare_amount"" } } } }, { $match: { averageFare: { $gt: 15.00 } } } ]); ",Determine the average fare collected from passengers on each transit route and filter to include only those routes that have an average fare greater than 15.00. The outcome should highlight both the route identifiers and their respective average fare amounts.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.destination_stop"": ""Central Station"" } }, { $group: { _id: null, totalPassengers: { $sum: 1 } } } ]); ","Count the total number of passengers whose destination is Central Station, after breaking down each event response to address individual passengers."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.destination_stop"": ""Central Station"" } }, { $group: { _id: null, totalPassengers: { $sum: 1 } } } ]); ",Calculate the overall number of passengers heading to Central Station by unwinding the event responses to focus on each passenger separately.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"" } }, { $group: { _id: ""$identifier.route_id"", totalIncidents: { $sum: 1 } } }, { $sort: { totalIncidents: -1 } } ]); ","Count the number of maintenance incidents reported for each bus or train route and determine which routes have the highest total incidents, sorting the results in descending order based on the number of incidents."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"" } }, { $group: { _id: ""$identifier.route_id"", totalIncidents: { $sum: 1 } } }, { $sort: { totalIncidents: -1 } } ]); ","Aggregate and rank the total maintenance incidents by route, identifying the routes that experienced the most incidents, with the outcomes arranged from highest to lowest total incidents."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V456"", ""response.event.location.coordinates"": { $exists: true } }); ","Retrieve the records for the transit events involving the vehicle identified as ""V456"" while ensuring that the location of these events includes available coordinates."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""identifier.vehicle_id"": ""V456"", ""response.event.location.coordinates"": { $exists: true } }); ","Select entries related to the vehicle ""V456"" in transit events, specifically where the events' location information includes coordinates."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $project: { route_id: ""$identifier.route_id"", vehicle_id: ""$identifier.vehicle_id"", estimated_arrival: ""$response.event.location.estimated_arrival"" } } ]); ","Select the route identifiers and vehicle identifiers of transit events where the event status is classified as ""OnTime"", along with the estimated arrival times for those events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $project: { route_id: ""$identifier.route_id"", vehicle_id: ""$identifier.vehicle_id"", estimated_arrival: ""$response.event.location.estimated_arrival"" } } ]); ","Identify the vehicle and route IDs associated with transit events marked as ""OnTime"", while also retrieving the estimated arrival times corresponding to these events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, count: { $sum: 1 } } }, { $sort: { totalFare: -1 } } ]); ","Calculate the total fare paid and the number of trips for each passenger based on their ticket ID, by analyzing the boarding information from transit events. The results should be arranged in descending order according to the total fare amount."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, count: { $sum: 1 } } }, { $sort: { totalFare: -1 } } ]); ","Summarize the fare totals and trip counts for each unique ticket ID derived from transit events, ensuring that the output is sorted from the highest total fare to the lowest."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.status"", count: { $sum: 1 } } } ]); ","Aggregate the total count of transit events, grouped by the status of each event, specifically categorizing them as OnTime, Delayed, or Cancelled."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$response.event.status"", count: { $sum: 1 } } } ]); ","Count and categorize transit events based on their status, summarizing the number of occurrences for each status type including OnTime, Delayed, and Cancelled."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gte: new Date() }}).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Retrieve all records of transit events where the estimated arrival time is on or after the current date and time, and arrange the results in ascending order based on the estimated arrival time."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.location.estimated_arrival"": { $gte: new Date() }}).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Gather all transit event data with estimated arrival times that are either today or in the future, sorting the outcomes from earliest to latest based on the estimated arrival time."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.fare_amount"": { $gt: 20.00 } } }, { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: ""$response.event.passengers.fare_amount"" } } } ]); ","Return the average fare amount of passengers for each bus or train route where the fare exceeds $20.00, grouping the results by route identifier."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.fare_amount"": { $gt: 20.00 } } }, { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: ""$response.event.passengers.fare_amount"" } } } ]); ","Calculate the average fare charged to passengers on different routes for instances where the fare is greater than $20.00, organizing the outcomes by the route identifier."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"" } }, { $group: { _id: ""$identifier.route_id"", totalMaintenanceEvents: { $sum: 1 } } }, { $sort: { totalMaintenanceEvents: -1 } } ]);","Count the total number of maintenance events for each bus or train route, selecting only those events categorized as ""Maintenance,"" and display the results sorted by the total number of maintenance events in descending order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Maintenance"" } }, { $group: { _id: ""$identifier.route_id"", totalMaintenanceEvents: { $sum: 1 } } }, { $sort: { totalMaintenanceEvents: -1 } } ]);","Aggregate the maintenance events by route identifier, filtering to include only those events labeled as ""Maintenance,"" and present the totals sorted in descending order of maintenance event count for each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Count the total fare amounts collected from passengers at each destination stop by processing individual passenger records, ensuring to aggregate the data based on the respective destination stops."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.destination_stop"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Calculate the sum of fare amounts for passengers grouped by their destination stops, extracting records for each passenger to provide a total fare for every unique destination."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Delayed"", ""identifier.route_id"": ""123"" }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Retrieve records of transit events where the event status indicates a delay for the specific route identified by ""123"", arranged in ascending order based on the estimated arrival time of the next location."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.status"": ""Delayed"", ""identifier.route_id"": ""123"" }).sort({ ""response.event.location.estimated_arrival"": 1 }); ","Select entries that denote a delayed event related to the route numbered ""123"", sorted by the estimated arrival time at the next stop in increasing order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", onTimeCount: { $sum: { $cond: [ { $eq: [""$response.event.status"", ""OnTime""] }, 1, 0 ] } } } } ]); ","Count the number of on-time events for bus or train routes, focusing exclusively on those classified as ""ArrivalDeparture."" Aggregate these counts by route identifier to provide the total number of on-time occurrences for each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""ArrivalDeparture"" } }, { $group: { _id: ""$identifier.route_id"", onTimeCount: { $sum: { $cond: [ { $eq: [""$response.event.status"", ""OnTime""] }, 1, 0 ] } } } } ]); ","Calculate the total number of events marked as on-time for each transit route, specifically for those events categorized under ""ArrivalDeparture,"" with the results grouped by the unique route identifier."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 20 } }).project({ identifier: 1, ""response.event.passengers.ticket_id"": 1 }); ",Retrieve the identifiers and ticket IDs of passengers whose fare amount is greater than 20. The selection should include only those entries that meet this fare condition.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.fare_amount"": { $gt: 20 } }).project({ identifier: 1, ""response.event.passengers.ticket_id"": 1 }); ","List the identifiers and ticket IDs for passengers who have paid a fare exceeding 20, ensuring that only relevant records are presented based on this financial threshold."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.location.next_stop"": { $exists: true } } }, { $project: { route: ""$identifier.route_id"", vehicle: ""$identifier.vehicle_id"", estimatedArrival: ""$response.event.location.estimated_arrival"" } } ]); ","Retrieve the route ID, vehicle ID, and estimated arrival time for transit events where the next stop location is known."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.location.next_stop"": { $exists: true } } }, { $project: { route: ""$identifier.route_id"", vehicle: ""$identifier.vehicle_id"", estimatedArrival: ""$response.event.location.estimated_arrival"" } } ]); ","List the estimated arrival times, along with the corresponding route and vehicle identifiers, for transit events that have a specified next stop."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $lookup: { from: ""transit_events"", localField: ""identifier.route_id"", foreignField: ""identifier.route_id"", as: ""events"" } }, { $match: { ""events.response.event.status"": ""Cancelled"" } } ]); ","Retrieve records of transit events where the event status is marked as cancelled, after associating each event by matching the route identifiers across all transit events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $lookup: { from: ""transit_events"", localField: ""identifier.route_id"", foreignField: ""identifier.route_id"", as: ""events"" } }, { $match: { ""events.response.event.status"": ""Cancelled"" } } ]); ","List all transit events that have been recorded with a cancellation status, obtained by linking events through their shared route identifiers across the dataset."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.boarding_time"": { $gt: new Date(""2023-01-01T00:00:00Z"") } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Retrieve the total fare amounts associated with each unique ticket ID for passengers who boarded after January 1, 2023, ensuring that the information includes only those passengers from recorded transit events."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $match: { ""response.event.passengers.boarding_time"": { $gt: new Date(""2023-01-01T00:00:00Z"") } } }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Summarize the fare totals for each distinct ticket ID, focusing on passengers who have boarding times later than January 1, 2023, based on transit event records."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } } } }, { $match: { averageFare: { $gt: 15 } } } ]); ","Group the transportation events by their route identifiers and calculate the average fare amount collected from passengers for each route, filtering the results to include only those routes where the average fare exceeds $15."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: { $sum: ""$response.event.passengers.fare_amount"" } } } }, { $match: { averageFare: { $gt: 15 } } } ]); ","Aggregate the data by route ID to compute the average passenger fare amount for each transportation event, ensuring to show only the routes with an average fare greater than $15."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $group: { _id: null, totalOnTime: { $sum: 1 } } } ]); ","Count the total occurrences of events where the status is recorded as ""OnTime,"" without extracting any specific details from the records."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.status"": ""OnTime"" } }, { $group: { _id: null, totalOnTime: { $sum: 1 } } } ]); ","Calculate the total number of instances where events are marked as ""OnTime,"" without retrieving any additional information from those records."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $project: { route_id: ""$identifier.route_id"", vehicle_id: ""$identifier.vehicle_id"", fare_count: { $size: ""$response.event.passengers"" } } }, { $match: { fare_count: { $gt: 5 } } } ]); ","Extract the route identifiers and vehicle identifiers along with the count of passengers associated with each event, selecting only those records where the passenger count exceeds five."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $project: { route_id: ""$identifier.route_id"", vehicle_id: ""$identifier.vehicle_id"", fare_count: { $size: ""$response.event.passengers"" } } }, { $match: { fare_count: { $gt: 5 } } } ]); ","Gather the identifiers for both routes and vehicles while calculating the number of passengers for each transit event, retaining only those entries that have more than five passengers."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", uniqueDestinations: { $addToSet: ""$response.event.passengers.destination_stop"" } } } ]); ","Unwind the list of passengers from the events, and group the data by each passenger's ticket identifier, collecting a unique set of destination stops for each ticket."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", uniqueDestinations: { $addToSet: ""$response.event.passengers.destination_stop"" } } } ]); ","Separate the passenger details from the events, and aggregate the information by ticket ID, ensuring that each ticket ID corresponds to a distinct list of unique destination stops."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $sort: { ""response.event.location.estimated_arrival"": -1 } }, { $limit: 10 }, { $project: { route_id: ""$identifier.route_id"", estimated_arrival: ""$response.event.location.estimated_arrival"" } } ]); ","Retrieve the route identifiers along with the estimated arrival times for the most recent ten transit events, ordered by the estimated arrival time in descending sequence."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $sort: { ""response.event.location.estimated_arrival"": -1 } }, { $limit: 10 }, { $project: { route_id: ""$identifier.route_id"", estimated_arrival: ""$response.event.location.estimated_arrival"" } } ]); ","Select the top ten transit events based on their estimated arrival times, displaying both the route identifiers and these arrival times, sorted from the latest to the earliest."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Incident"" } }, { $group: { _id: ""$identifier.route_id"", incidentCount: { $sum: 1 } } }, { $sort: { incidentCount: -1 } } ]); ","Count the number of incidents associated with each bus or train route, considering only those events classified as incidents. The results should be grouped by route identifier and sorted in descending order based on the number of incidents for each route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.type"": ""Incident"" } }, { $group: { _id: ""$identifier.route_id"", incidentCount: { $sum: 1 } } }, { $sort: { incidentCount: -1 } } ]); ","Aggregate the total incidents reported for each route, focusing exclusively on events categorized as incidents, with the results organized by route identifier and ordered from highest to lowest incident count."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, lastBoardingTime: { $max: ""$response.event.passengers.boarding_time"" } } } ]); ","Compile a list of unique ticket identifiers alongside the total fare collected and the latest boarding time for each passenger on transit events. This data should be aggregated by ticket identifier, summing the fare amounts and selecting the most recent boarding times."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" }, lastBoardingTime: { $max: ""$response.event.passengers.boarding_time"" } } } ]); ","Generate a summary of ticket IDs with their corresponding total fares and the most recent boarding times for passengers. The information should be grouped by ticket ID, calculating the total fare and capturing the latest boarding event for each."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.location.estimated_arrival"": { $lt: new Date() } } }, { $group: { _id: ""$identifier.route_id"", cancelledCount: { $sum: { $cond: [ { $eq: [""$response.event.status"", ""Cancelled""] }, 1, 0 ] } } } } ]); ",Count the number of cancelled transit events for each bus or train route where the estimated arrival time has already passed. The results should be grouped by route identification and should reflect the total number of cancellations.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.location.estimated_arrival"": { $lt: new Date() } } }, { $group: { _id: ""$identifier.route_id"", cancelledCount: { $sum: { $cond: [ { $eq: [""$response.event.status"", ""Cancelled""] }, 1, 0 ] } } } } ]); ","Aggregate the total number of cancelled events for each transportation route, filtering only those occurrences whose estimated arrival times are earlier than the current date and time. The output should be organized by route identifier, highlighting the count of cancellations per route."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: ""$response.event.passengers.fare_amount"" } } }, { $sort: { averageFare: -1 } } ]); ",Calculate the average fare amount paid by passengers on each bus or train route by first expanding the passenger data associated with each event. The results should be grouped by route identifier and sorted in descending order based on the average fare amount.
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $unwind: ""$response.event.passengers"" }, { $group: { _id: ""$identifier.route_id"", averageFare: { $avg: ""$response.event.passengers.fare_amount"" } } }, { $sort: { averageFare: -1 } } ]); ","Determine the average fare collected from passengers per route, beginning with the individual passenger records tied to each event. Group the results by the route identifier and arrange them in decreasing order of the average fare amount."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-09-01T00:00:00Z"") } }).project({ identifier: 1, ""response.event.passengers.ticket_id"": 1 }); ","Retrieve the identifiers and ticket IDs of passengers whose boarding time is on or after September 1, 2023. The results should include all relevant information about the passengers while adhering to the specified date constraint."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.find({ ""response.event.passengers.boarding_time"": { $gte: new Date(""2023-09-01T00:00:00Z"") } }).project({ identifier: 1, ""response.event.passengers.ticket_id"": 1 }); ","List the identifiers along with ticket IDs for passengers who boarded on or after September 1, 2023, ensuring that only the necessary details concerning their boarding times are included."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.destination_stop"": ""Central Station"" } }, { $project: { ticketId: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Select the ticket identifiers and the total fare amounts for passengers whose destination stop is Central Station, aggregating the fare values for each ticket."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.transit_events.aggregate([ { $match: { ""response.event.passengers.destination_stop"": ""Central Station"" } }, { $project: { ticketId: ""$response.event.passengers.ticket_id"", totalFare: { $sum: ""$response.event.passengers.fare_amount"" } } } ]); ","Gather the ticket IDs along with the summed fare totals for passengers heading to Central Station, ensuring that the fare amounts are combined for each respective ticket."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the statuses and types of transit events, along with details of passengers, for specific buses or trains, focusing on events such as those marked as OnTime, Delayed, or Cancelled. The results should only include events that occurred after a specified date and be organized by the event's estimated arrival times in ascending order."
transit_event,"{
  ""collections"": [{
    ""name"": ""transit_events"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""route_id"": {""description"": ""Filter by bus or train route""},
            ""vehicle_id"": {""description"": ""Filter by specific vehicle""}
          }
        },
        ""response"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""event"": {
              ""properties"": {
                ""status"": {""description"": ""OnTime, Delayed, Cancelled""},
                ""type"": {""description"": ""ArrivalDeparture, Maintenance, Incident""},
                ""passengers"": {
                  ""bsonType"": ""array"",
                  ""items"": {
                    ""properties"": {
                      ""ticket_id"": {
                        ""bsonType"": ""string"",
                        ""pattern"": ""^[A-Z]{3}[0-9]{6}$""
                      },
                      ""boarding_time"": {""bsonType"": ""date""},
                      ""destination_stop"": {""bsonType"": ""string""},
                      ""fare_amount"": {""bsonType"": ""decimal""}
                    }
                  }
                },
                ""location"": {
                  ""bsonType"": ""object"",
                  ""properties"": {
                    ""coordinates"": {
                      ""bsonType"": ""array"",
                      ""items"": {""bsonType"": ""double""}
                    },
                    ""next_stop"": {""bsonType"": ""string""},
                    ""estimated_arrival"": {""bsonType"": ""date""}
                  }
                }
              }
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the types and statuses of transit events along with passenger information for designated vehicles, concentrating on arrivals or departures that are OnTime, Delayed, or Cancelled. The output should include events that happened after a particular date and be sorted by the time of estimated arrival in chronological order."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ","Retrieve the records of individuals whose first name is ""John"" from the dataset containing employee information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ","Select entries for employees with the first name ""John"" from the information repository that details employee personal and professional records."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gte: 60000 } }); ","Retrieve all employee records where the salary is equal to or greater than 60,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gte: 60000 } }); ","Select all employees who earn at least 60,000, ensuring that all relevant records are included."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": ""EMP000001"" }); ","Retrieve the details of the employee whose unique identifier is ""EMP000001."" This search is specifically focused on extracting the complete record associated with this employee ID."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": ""EMP000001"" }); ","Look up and return the full information for the employee identified by ""EMP000001."" The retrieval should encompass all available details connected to this specific employee identifier."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }); ",Retrieve the records of employees who are provided with health insurance benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }); ",List all employees who have health insurance included in their benefits package.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $in: [""JavaScript"", ""Python""] } }); ",Retrieve records of individuals who possess skills in either JavaScript or Python.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $in: [""JavaScript"", ""Python""] } }); ",List the entries for individuals who have specified skills that include JavaScript or Python.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }); ","Retrieve the records of individuals whose date of birth is prior to January 1, 1980."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }); ","Select the entries for people born before January 1, 1980."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"" }).limit(5); ","Retrieve details of employees whose job title is ""Software Engineer,"" limiting the results to the first five records found."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"" }).limit(5); ","List the first five employees who hold the position of ""Software Engineer,"" including all relevant details for each employee."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""DEP001"" }); ","Retrieve all employee records that belong to the department identified by the code ""DEP001."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""DEP001"" }); ","List every employee who is associated with the department having the identifier ""DEP001."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }); ","Fetch all records of employees whose performance ratings are four or higher, indicating satisfactory or outstanding evaluations."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }); ","Retrieve the details of employees who have received a performance rating of four or above, reflecting good to excellent assessments in their performance evaluations."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Project Alpha"" }); ","Find all employee records of individuals who have worked on a project titled ""Project Alpha."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Project Alpha"" }); ","Retrieve records of employees associated with the ""Project Alpha"" project."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.comments"": { $regex: /excellent/i } }); ","Retrieve all records of employees who have performance comments containing the word ""excellent,"" regardless of case sensitivity."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.comments"": { $regex: /excellent/i } }); ","Identify any employees whose performance reviews include comments that describe their work as ""excellent,"" using a case-insensitive search to capture all relevant instances."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $gt: 15 } }); ",Retrieve the records of individuals who have more than 15 vacation days available in their benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $gt: 15 } }); ","Identify employees with vacation days exceeding 15, focusing on their benefits information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ email: { $regex: /@company.com$/ } }); ",Find all employee records that include email addresses ending with the domain '@company.com'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ email: { $regex: /@company.com$/ } }); ",Gather the employee information for individuals whose email addresses conclude with '@company.com'.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gt: new Date(""2020-01-01"") } }); ","Retrieve the records of individuals who were hired after January 1, 2020, focusing on their employment details."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gt: new Date(""2020-01-01"") } }); ","List the employees whose hire dates are later than January 1, 2020, highlighting their employment information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.role"": { $eq: ""Lead"" } }); ","Identify the records of individuals who have taken on the role of ""Lead"" within their respective projects."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.role"": { $eq: ""Lead"" } }); ","Select the entries for employees whose project involvement includes the position of ""Lead."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $exists: true, $not: { $size: 0 } } }); ","Retrieve the records of employees who have performance evaluations, ensuring that only those with at least one performance review are included in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $exists: true, $not: { $size: 0 } } }); ","List the employees who possess performance feedback, restricting the selection to individuals who have received one or more performance reviews."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": ""Doe"", ""identifier.department_id"": ""DEP002"" }); ","Find the records of individuals with the last name ""Doe"" who belong to the department identified as ""DEP002."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": ""Doe"", ""identifier.department_id"": ""DEP002"" }); ","Select entries for employees whose last name is ""Doe"" and who are associated with the department labeled ""DEP002."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP000010"" }); ","Find all employee records where the manager identifier matches ""EMP000010""."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP000010"" }); ","Select employee information for individuals who report to the manager identified by ""EMP000010""."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $size: 3 } }); ",Retrieve all employee records that possess exactly three distinct skills listed in their profiles.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": { $size: 3 } }); ",Select records of employees who have a skill set comprising precisely three different skills.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.retirement_plan"": false }); ",Retrieve the details of employees who do not have a retirement plan included in their benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.retirement_plan"": false }); ",Identify employees whose benefits package lacks a retirement plan.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the employee identifiers, names, and salaries of employees who have a hire date after January 1, 2020, and a performance rating of at least 4. The results should be grouped by department and sorted in ascending order based on salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the identifiers, names, and salaries of employees hired after January 1, 2020, who have received a performance rating of 4 or higher, organizing the data by department and arranging it in order of increasing salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gt: 60000 } }); ","Retrieve the records of employees whose salaries exceed 60,000, highlighting those who earn more than this amount."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gt: 60000 } }); ","List the employees with salaries greater than 60,000, focusing on those individuals who meet this financial criterion."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ","Fetch the records of individuals whose first name is ""John"" from the employee dataset."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ","Select and return all entries for employees with the first name ""John"" in the personal information section."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": ""EMP123456"" }); ","Obtain the records of the individual whose unique employee identifier is ""EMP123456."" This will return all information associated with this specific employee."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": ""EMP123456"" }); ","Fetch the details for the employee identified by the employee ID ""EMP123456,"" including all available data related to their profile and employment status."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }); ",Retrieve records of employees who are eligible for health insurance benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }); ",List all employees that have their health insurance benefits activated.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }); ",Find all employees whose performance ratings are at least 4. This selection will include those individuals who have received ratings reflecting strong performance.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }); ","Identify employees who have earned performance ratings of 4 or higher, which indicates that they have demonstrated considerable proficiency in their roles."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"" }).sort({ ""employment_details.hire_date"": -1 }); ","Fetch records of individuals whose job title is ""Software Engineer,"" and arrange these records in descending order based on their hiring date."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"" }).sort({ ""employment_details.hire_date"": -1 }); ","Retrieve the entries for employees identified as ""Software Engineers,"" sorting the results from the most recently hired to the oldest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": ""JavaScript"" }); ",Retrieve the records of employees who possess skills in JavaScript. The query should return all relevant details for those individuals identified in the dataset.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": ""JavaScript"" }); ","Select all employee records that include JavaScript as a skill, ensuring all corresponding information for these employees is retrieved in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Website Redesign"" }); ","Retrieve the records of employees who have worked on the ""Website Redesign"" project. The search should include all relevant information pertaining to those employees' professional details and personal information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""Website Redesign"" }); ","List all employees associated with the ""Website Redesign"" project, including their employment and personal details for comprehensive information retrieval."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $lt: 15 } }); ",Retrieve all employee records where the number of vacation days provided is less than 15.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $lt: 15 } }); ",List the employees who have been granted fewer than 15 vacation days in their benefits package.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: 5 } } }); ",Retrieve the records of employees who have received a performance rating of five in any of their evaluations.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: 5 } } }); ",List all employees who have achieved a perfect performance rating of five in their review history.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.findOne({ ""identifier.department_id"": ""DEP001"" }); ","Retrieve the details of a single employee whose department identifier is ""DEP001."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.findOne({ ""identifier.department_id"": ""DEP001"" }); ","Find one employee record associated with the department labeled ""DEP001."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP654321"" }); ","Retrieve the records of employees whose manager is identified by the unique employee identifier ""EMP654321."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP654321"" }); ","Compile a list of employees that report to the manager with the unique identifier ""EMP654321."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1990-01-01"") } }); ","Retrieve the records of individuals whose date of birth is earlier than January 1, 1990. The response should contain the relevant personal information for these employees."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1990-01-01"") } }); ","List all employees born before January 1, 1990, and provide their personal details in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: new Date(""2022-01-01"") } }); ","Retrieve records of employees whose projects have a start date on or after January 1, 2022."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: new Date(""2022-01-01"") } }); ","List the employee records that include projects beginning from January 1, 2022, or later."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gte: 50000, $lt: 70000 } }); ","Retrieve all employee records where the salary of their employment details is between 50,000 and 70,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gte: 50000, $lt: 70000 } }); ","Gather the employee records that have a salary within the range of 50,000 to 70,000 in their employment information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": { $regex: /^S/, $options: 'i' } }); ","Retrieve all records of individuals whose last names begin with the letter 'S', regardless of capitalization."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": { $regex: /^S/, $options: 'i' } }); ","List all employees whose last names start with 'S', considering uppercase and lowercase variations."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.comments"": { $exists: true, $ne: """" } }); ","Retrieve the records of employees who have received performance reviews containing comments, ensuring that these comments are neither absent nor empty."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.comments"": { $exists: true, $ne: """" } }); ","Identify all employees whose performance evaluations include comments, filtering out any records where such comments do not exist or are left blank."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": { $in: [""EMP123456"", ""EMP654321""] } }); ","Retrieve the records of employees whose unique identifiers match either ""EMP123456"" or ""EMP654321."" Only the relevant information for these employees will be provided."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.employee_id"": { $in: [""EMP123456"", ""EMP654321""] } }); ","Select the details of employees with employee IDs that are either ""EMP123456"" or ""EMP654321,"" ensuring that only the matching records are included in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gte: new Date(""2021-01-01"") } }).sort({ ""employment_details.hire_date"": 1 }); ","Retrieve the employment records of individuals hired on or after January 1, 2021, ordered by their hiring dates in ascending sequence."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gte: new Date(""2021-01-01"") } }).sort({ ""employment_details.hire_date"": 1 }); ","List all employees who began their employment after January 1, 2021, and arrange the results in chronological order based on their respective hiring dates."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.retirement_plan"": false }); ",Retrieve records of employees who do not have access to a retirement plan.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.retirement_plan"": false }); ",List all employees who are not enrolled in a retirement plan.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the personal details and employment information of employees whose hire date is after January 1, 2020, along with their job titles and salaries. The results should be organized in descending order based on salary, limiting the output to the top ten highest-paid employees."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the details of employees hired after January 1, 2020, including their personal information, job titles, and salaries, sorted from highest to lowest salary, showing only the top ten highest earners."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ","Retrieve the records of individuals whose first name is ""John."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""personal_info.first_name"": ""John"" }); ","List all entries for persons named ""John"" in the relevant data."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gt: 70000 } }); ","Retrieve the records of employees whose salary exceeds $70,000, ensuring that only those meeting this salary threshold are included in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.salary"": { $gt: 70000 } }); ","List the employees with a salary greater than $70,000, returning only the records that satisfy this salary condition."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"", ""benefits.health_insurance"": true }); ",Retrieve the records of individuals employed as Software Engineers who are also enrolled in health insurance benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": ""Software Engineer"", ""benefits.health_insurance"": true }); ",Gather information about employees whose job title is Software Engineer and who have health insurance coverage as part of their benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }).sort({ ""personal_info.last_name"": 1 }); ","Fetch the records of employees whose performance ratings are four or higher, arranging the results in ascending order based on the last names of those individuals."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.rating"": { $gte: 4 } }).sort({ ""personal_info.last_name"": 1 }); ","Identify employees with performance ratings of at least four, and display the information sorted by their last names in alphabetical order."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.hire_date"": { $gte: new Date(""2020-01-01"") } } }, { $group: { _id: ""$identifier.department_id"", avgSalary: { $avg: ""$employment_details.salary"" } } } ]); ","Extract the average salary of employees grouped by their department for those who were hired on or after January 1, 2020."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.hire_date"": { $gte: new Date(""2020-01-01"") } } }, { $group: { _id: ""$identifier.department_id"", avgSalary: { $avg: ""$employment_details.salary"" } } } ]); ","Calculate the average salary for each department based on employees hired from January 1, 2020, onward."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": ""Project Management"" }).sort({ ""employment_details.hire_date"": -1 }); ","Retrieve the records of individuals who possess the skill ""Project Management,"" with the results organized in descending order based on their hire dates to show the most recently hired employees first."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""skills"": ""Project Management"" }).sort({ ""employment_details.hire_date"": -1 }); ","List employees who have ""Project Management"" listed among their skills, and sort the results so that those hired more recently appear at the top of the list."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $lt: 15 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ",Retrieve the first and last names of employees who have fewer than 15 vacation days included in their benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.vacation_days"": { $lt: 15 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ","List the names, specifically the first and last, of employees with vacation days totaling less than 15 as part of their benefits package."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", avgRating: { $avg: ""$performance.rating"" } } }, { $match: { avgRating: { $gte: 4 } } } ]); ","Calculate the average performance rating for each employee by breaking down their performance reviews, and select only those employees whose average rating is four or higher."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", avgRating: { $avg: ""$performance.rating"" } } }, { $match: { avgRating: { $gte: 4 } } } ]); ","Determine the average rating from performance evaluations for each employee, ensuring that only those with an average rating of at least four are included in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""New Website"", ""projects.end_date"": { $lt: new Date() } }); ","Retrieve the records of employees who have worked on the project titled ""New Website"" and whose involvement in that project has concluded before the current date."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.project_name"": ""New Website"", ""projects.end_date"": { $lt: new Date() } }); ","Identify employees associated with the ""New Website"" project whose participation has ended prior to today, ensuring only those records that meet these criteria are included."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gte: 80000 } } }, { $project: { ""identifier.employee_id"": 1, ""employment_details.salary"": 1, ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } } ]); ","Retrieve the employee identifiers, salaries, and names of individuals whose salaries are at least $80,000, displaying only their unique employee IDs along with their first and last names."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gte: 80000 } } }, { $project: { ""identifier.employee_id"": 1, ""employment_details.salary"": 1, ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } } ]); ","List the unique employee IDs, salaries, and names of employees earning $80,000 or more, including only their identifiers and personal information such as first and last names."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP000001"" }); ","Retrieve the records of employees who report to a manager with the identifier ""EMP000001""."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.manager_id"": ""EMP000001"" }); ","List all employees who have ""EMP000001"" as their manager's identifier."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalEmployees: { $sum: 1 }, avgSalary: { $avg: ""$employment_details.salary"" } } }, { $sort: { totalEmployees: -1 } } ]); ","Aggregate the employee records to count the total number of employees and compute the average salary, grouped by department identifiers. The results should be sorted in descending order based on the total employee count."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalEmployees: { $sum: 1 }, avgSalary: { $avg: ""$employment_details.salary"" } } }, { $sort: { totalEmployees: -1 } } ]); ","Calculate the total employees and average salary for each department, grouping by the department identifiers, and arrange the results in descending order of total employee count."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ","Retrieve the records of individuals who have an email address that ends with ""@example.com""."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ","List all employees whose email addresses conclude with ""@example.com""."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.retirement_plan"": true } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } } ]); ",Select the records of employees who are enrolled in a retirement plan and join their information with the details of their managers based on the manager's identifier.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.retirement_plan"": true } }, { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } } ]); ",Gather the details of employees participating in a retirement plan and link these to their managers' information using the unique identifier associated with the manager’s employment record.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.review_date"": { $gt: new Date(""2022-01-01"") } }).project({ ""identifier.employee_id"": 1, ""performance.$"": 1 }); ","Retrieve the employee identifiers and their associated performance reviews for those who received a performance review after January 1, 2022, including only relevant performance data."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance.review_date"": { $gt: new Date(""2022-01-01"") } }).project({ ""identifier.employee_id"": 1, ""performance.$"": 1 }); ","List the employee IDs along with their performance reviews for individuals who had a performance review dated later than January 1, 2022, displaying only the pertinent performance information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { employee_id: ""$identifier.employee_id"", totalProjects: { $size: ""$projects"" } } }, { $match: { totalProjects: { $gt: 2 } } } ]); ",Retrieve the unique employee identifiers and the count of projects for employees who have been assigned to more than two projects.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { employee_id: ""$identifier.employee_id"", totalProjects: { $size: ""$projects"" } } }, { $match: { totalProjects: { $gt: 2 } } } ]); ",List the employee identifiers along with the total number of projects for those employees whose project assignments exceed two.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": { $in: [ ""Developer"", ""Manager"" ] } }); ","Retrieve all employee records for individuals whose job titles are either ""Developer"" or ""Manager."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.job_title"": { $in: [ ""Developer"", ""Manager"" ] } }); ","List the employees holding the positions of ""Developer"" or ""Manager"" within the organization."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $match: { ""projects.role"": ""Lead"" } }, { $group: { _id: ""$identifier.employee_id"", projectsCount: { $sum: 1 } } } ]); ","Count the number of projects where employees served in the role of ""Lead,"" grouping the results by each unique employee identifier. Only include those records that feature ""Lead"" as the designated role within the projects."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $match: { ""projects.role"": ""Lead"" } }, { $group: { _id: ""$identifier.employee_id"", projectsCount: { $sum: 1 } } } ]); ","Aggregate the total number of projects for employees identified as ""Lead"" in their respective roles, categorizing the results by employee identifier while filtering specifically for instances where the role is ""Lead."""
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1990-01-01"") } }).sort({ ""personal_info.date_of_birth"": 1 }); ","Retrieve the records of employees whose date of birth is earlier than January 1, 1990, and arrange the results in ascending order based on their date of birth."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1990-01-01"") } }).sort({ ""personal_info.date_of_birth"": 1 }); ","List the employees born before January 1, 1990, sorting the resulting records by their date of birth from the earliest to the latest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the employee identifiers, names, and hire dates of those who were hired after January 1, 2020, along with their annual salary, displaying the results in ascending order of hire date and limited to the first ten records."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the identifiers, names, and hire dates of employees who started their employment on or after January 1, 2020, including their salaries, sorting the output by the date of hire in ascending order and restricting the results to the first ten entries."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gte: 60000 } }); ","Retrieve the records of employees whose salary is greater than or equal to 60,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.find({ ""employment_details.salary"": { $gte: 60000 } }); ","List all employees earning at least 60,000 in salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": ""Smith"" }).sort({ ""personal_info.first_name"": 1 }); ","Retrieve the records of individuals whose last name is ""Smith,"" and arrange the results alphabetically by their first name."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.last_name"": ""Smith"" }).sort({ ""personal_info.first_name"": 1 }); ","List all entries for people with the last name ""Smith,"" sorted in ascending order according to their first name."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", avgSalary: { $avg: ""$employment_details.salary"" } } } ]); ","Group the records by job title and calculate the average salary for each title, providing a summary of the average salaries associated with each distinct job title within the employment details."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", avgSalary: { $avg: ""$employment_details.salary"" } } } ]); ","Aggregate the data to determine the average salary linked to each job title, organizing the results by the specific job titles found in the employment details, and presenting these average salaries for insight."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 4 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } } ]); ",Retrieve the first and last names of employees who have received performance ratings of four or higher in their reviews.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 4 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } } ]); ","List the names of employees whose performance evaluations include ratings that are at least four, displaying their first and last names only."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.role"": ""Lead"" }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""projects.project_name"": 1 }); ","Retrieve the first and last names of employees who hold the role of ""Lead"" on any project, along with the names of those projects they are involved in."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.role"": ""Lead"" }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""projects.project_name"": 1 }); ","List the first and last names of all employees assigned as ""Lead"" for projects, including the corresponding project names in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", avgRating: { $avg: ""$performance.rating"" } } }, { $match: { avgRating: { $gte: 4 } } } ]); ","Calculate the average performance rating for each employee by first breaking down their performance reviews, and then return only those employees whose average rating is 4 or higher."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", avgRating: { $avg: ""$performance.rating"" } } }, { $match: { avgRating: { $gte: 4 } } } ]); ","Aggregate the performance ratings of employees by unfolding their individual reviews, then filter the results to include only those employees whose average rating meets or exceeds 4."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true, ""benefits.retirement_plan"": true }); ",Retrieve the records of employees who have both health insurance and a retirement plan included in their benefits.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true, ""benefits.retirement_plan"": true }); ",List the employees that are provided with both health insurance and a retirement plan as part of their benefits package.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gt: new Date(""2020-01-01"") } }).sort({ ""employment_details.hire_date"": 1 }); ","Retrieve all records of employees who were hired after January 1, 2020, and arrange these records in ascending order based on their hiring dates."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""employment_details.hire_date"": { $gt: new Date(""2020-01-01"") } }).sort({ ""employment_details.hire_date"": 1 }); ","List the details of employees whose hire dates are more recent than January 1, 2020, sorted by the date of hiring from the earliest to the latest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""skills"": { $in: [""JavaScript"", ""MongoDB""] } } }, { $project: { ""personal_info"": 1, ""skills"": 1 } } ]); ",Retrieve the personal information and skills of employees who possess either JavaScript or MongoDB expertise. The results should include relevant personal details alongside their skill sets.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""skills"": { $in: [""JavaScript"", ""MongoDB""] } } }, { $project: { ""personal_info"": 1, ""skills"": 1 } } ]); ",List the personal details and skills of individuals who have skills in JavaScript or MongoDB. The output should showcase their personal information in conjunction with their identified skills.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalEmployees: { $sum: 1 } } }, { $sort: { totalEmployees: -1 } } ]); ","Group the employee records by department identifier to calculate the total number of employees in each department, and sort the results in descending order based on the employee count."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalEmployees: { $sum: 1 } } }, { $sort: { totalEmployees: -1 } } ]); ",Summarize the total number of employees for each department identifier and arrange the departments in order of highest to lowest employee totals.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: 5 } } }); ","Retrieve records of individuals who have received a performance rating of five in their evaluations, indicating exceptional performance."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""performance"": { $elemMatch: { rating: 5 } } }); ","List individuals who have attained a rating of five in their performance reviews, showcasing those recognized for outstanding achievement."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.manager_id"", employeeCount: { $sum: 1 } } }, { $lookup: { from: ""employee_records"", localField: ""_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } } ]); ","Group the records by the identifier of each employee's manager and calculate the total number of employees managed by each. Additionally, gather detailed information about the managers by matching their identifiers to the respective employee records."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.manager_id"", employeeCount: { $sum: 1 } } }, { $lookup: { from: ""employee_records"", localField: ""_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } } ]); ","Aggregate the data based on each employee's manager identifier to determine how many employees are associated with each manager, while also retrieving comprehensive details about the managers from the employee records."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { ""fullName"": { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, ""salary"": ""$employment_details.salary"" } }, { $match: { salary: { $gt: 70000 } } } ]); ","Return the complete names and salaries of employees whose salaries exceed $70,000. The names should be formatted by concatenating the first and last names from their personal information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { ""fullName"": { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, ""salary"": ""$employment_details.salary"" } }, { $match: { salary: { $gt: 70000 } } } ]); ","Select the full names and salary amounts of employees earning more than $70,000, where the full names are created by combining the first and last names from their personal data."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $lt: new Date(""2021-01-01""), $gt: new Date(""2019-01-01"") } }); ","Retrieve records of employees whose project start dates fall between January 1, 2019, and January 1, 2021."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $lt: new Date(""2021-01-01""), $gt: new Date(""2019-01-01"") } }); ","List employees that are involved in projects that commenced within the date range from January 1, 2019, to January 1, 2021."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { ""yearOfBirth"": { $year: ""$personal_info.date_of_birth"" }, ""salary"": ""$employment_details.salary"" } }, { $group: { _id: ""$yearOfBirth"", totalSalary: { $sum: ""$salary"" } } } ]); ","Calculate the total salary for each year of birth by extracting the birth year from the personal information of employees and summing their respective salaries, presenting the results grouped by year of birth."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { ""yearOfBirth"": { $year: ""$personal_info.date_of_birth"" }, ""salary"": ""$employment_details.salary"" } }, { $group: { _id: ""$yearOfBirth"", totalSalary: { $sum: ""$salary"" } } } ]); ","Summarize the total salaries of employees by their year of birth, derived from their date of birth, while aggregating the salary amounts into yearly totals."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ","Retrieve the records of individuals whose email addresses end with '@example.com,' focusing on their personal information details."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ","List all individuals that have email addresses concluding with '@example.com,' specifically retrieving their personal information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.vacation_days"": { $gte: 15 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } } ]); ",Retrieve the first and last names of employees who have at least 15 vacation days available in their benefits package.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.vacation_days"": { $gte: 15 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } } ]); ","Select the names of employees who are entitled to a minimum of 15 vacation days as part of their benefits, displaying both their first and last names."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.project_name"", totalMembers: { $sum: 1 } } }, { $sort: { totalMembers: -1 } } ]); ","Retrieve the names of all projects alongside the total number of employees involved in each project, with the results grouped by project name and sorted in descending order based on the number of participants."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $group: { _id: ""$projects.project_name"", totalMembers: { $sum: 1 } } }, { $sort: { totalMembers: -1 } } ]); ","Identify the total count of team members for each project and present the project names, ensuring the data is categorized by the project title and organized from the most to least represented projects."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""D01"" }).project({ ""personal_info"": 1, ""employment_details.job_title"": 1 });","Retrieve the personal information and job titles of employees who belong to the department identified as ""D01."" This will include details about their first and last names, date of birth, email, phone number, and job title within their employment details."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""identifier.department_id"": ""D01"" }).project({ ""personal_info"": 1, ""employment_details.job_title"": 1 });","List the personal details and job titles of staff members assigned to the department labeled ""D01,"" including their first name, last name, date of birth, email address, phone number, and employment title."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gte: 80000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""employment_details.salary"": 1 } } ]); ","Retrieve the first and last names of employees whose salaries are at least $80,000. The results should include only their names alongside the corresponding salary information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.employee_records.aggregate([ { $match: { ""employment_details.salary"": { $gte: 80000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""employment_details.salary"": 1 } } ]); ","Select the names of employees with salaries equal to or greater than $80,000, displaying both their first and last names along with their salary details."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", averageRating: { $avg: ""$performance.rating"" } } }, { $match: { averageRating: { $gte: 4 } } } ]); ","Calculate the average performance rating of employees by their unique identifiers, selecting only those whose average rating is four or higher, after unrolling their individual performance reviews."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$performance"" }, { $group: { _id: ""$identifier.employee_id"", averageRating: { $avg: ""$performance.rating"" } } }, { $match: { averageRating: { $gte: 4 } } } ]); ","Determine the mean rating from performance evaluations for each employee, filtering to include only those with an average rating of at least four, following the expansion of their performance review entries."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } }, { $unwind: ""$manager_info"" }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""manager_info.personal_info.first_name"": 1, ""manager_info.personal_info.last_name"": 1 } } ]); ","Retrieve the first and last names of employees along with the first and last names of their managers, ensuring that each employee's manager is identified by a unique employee identifier present in their employment details. The results should be displayed in a structured format that includes both the employee and manager's names for easy reference."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""employment_details.manager_id"", foreignField: ""identifier.employee_id"", as: ""manager_info"" } }, { $unwind: ""$manager_info"" }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""manager_info.personal_info.first_name"": 1, ""manager_info.personal_info.last_name"": 1 } } ]); ","List the first and last names of all employees alongside the first and last names of their respective managers, using the manager's employee identifier found within the employment details to establish the connection between them. The output should clearly present the names of both the employees and their managers for comprehensive understanding."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", totalEmployees: { $sum: 1 }, averageSalary: { $avg: ""$employment_details.salary"" } } }, { $sort: { averageSalary: -1 } } ]); ","Group the employee records by job title, calculating the total number of employees and the average salary for each job title. Afterwards, sort the results in descending order based on the average salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$employment_details.job_title"", totalEmployees: { $sum: 1 }, averageSalary: { $avg: ""$employment_details.salary"" } } }, { $sort: { averageSalary: -1 } } ]); ","Aggregate the employee data by job title to determine the total count of employees and the mean salary for those job titles, then arrange the findings in descending order by average salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }).sort({ ""personal_info.last_name"": 1 }); ","Retrieve records of individuals who receive health insurance benefits, sorted in ascending order by their last names."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""benefits.health_insurance"": true }).sort({ ""personal_info.last_name"": 1 }); ","List all employees who are eligible for health insurance, arranging the results alphabetically based on their last names."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""projects.role"": ""Lead"" } }, { $project: { ""personal_info.first_name"": 1, ""projects"": 1 } } ]); ","Retrieve the first names of employees who hold the role of ""Lead"" in their respective projects, along with the details of those projects."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""projects.role"": ""Lead"" } }, { $project: { ""personal_info.first_name"": 1, ""projects"": 1 } } ]); ","List the first names of individuals who are assigned the role of ""Lead"" in any projects they are involved with, including all relevant project information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 3 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""performance"": 1 } }, { $unwind: ""$performance"" }, { $sort: { ""performance.review_date"": -1 } } ]); ","Find the first and last names of employees whose performance ratings are 3 or higher, along with their performance details. The performance entries should be sorted in descending order according to the review date, and each employee's performance records should be expanded to show individual reviews."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gte: 3 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""performance"": 1 } }, { $unwind: ""$performance"" }, { $sort: { ""performance.review_date"": -1 } } ]); ","Retrieve the names of employees with performance ratings of 3 or more, including all related performance details. The individual performance reviews for each employee should be sorted in reverse chronological order based on the review date."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: ISODate(""2022-01-01"") } }).count(); ","Count the total number of records for individuals who have projects that commenced on or after January 1, 2022."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""projects.start_date"": { $gte: ISODate(""2022-01-01"") } }).count(); ","Determine the number of individuals with projects that started from January 1, 2022, onwards."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.hire_date"": { $lt: ISODate(""2020-01-01"") } } }, { $sort: { ""employment_details.hire_date"": -1 } }, { $limit: 5 } ]); ","Select the five most recently hired employees who joined before January 1, 2020, ordered by their hire dates in descending order."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""employment_details.hire_date"": { $lt: ISODate(""2020-01-01"") } } }, { $sort: { ""employment_details.hire_date"": -1 } }, { $limit: 5 } ]); ","Identify the five latest hires from the workforce who were employed prior to January 1, 2020, sorting these individuals by their hire dates starting with the most recent."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { fullName: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, salary: ""$employment_details.salary"" } }, { $sort: { salary: -1 } } ]); ","Retrieve the full names and salaries of employees, with their names created by combining their first and last names, and sort the results in descending order based on the salary."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $project: { fullName: { $concat: [""$personal_info.first_name"", "" "", ""$personal_info.last_name""] }, salary: ""$employment_details.salary"" } }, { $sort: { salary: -1 } } ]); ","List the salaries and complete names of employees by joining their first and last names, arranging the outcome from the highest salary to the lowest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.vacation_days"": { $gte: 15 } } }, { $group: { _id: null, averageVacationDays: { $avg: ""$benefits.vacation_days"" } } } ]); ",Retrieve the average number of vacation days for employees who have at least 15 vacation days available as part of their benefits. This calculation should aggregate the records without grouping them by any specific identifier.
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""benefits.vacation_days"": { $gte: 15 } } }, { $group: { _id: null, averageVacationDays: { $avg: ""$benefits.vacation_days"" } } } ]); ","Calculate the mean vacation days for employees who possess a minimum of 15 vacation days in their benefits package, with the results being a singular average figure without any grouping of individual records."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gt: 4 } } }, { $group: { _id: ""$identifier.department_id"", topPerformers: { $push: ""$personal_info.first_name"" } } } ]); ","Identify the first names of employees who have received performance ratings greater than 4, grouping them by their respective department identifiers to list the top performers for each department."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $match: { ""performance.rating"": { $gt: 4 } } }, { $group: { _id: ""$identifier.department_id"", topPerformers: { $push: ""$personal_info.first_name"" } } } ]); ","Gather the names of employees with performance ratings above 4 and categorize them according to department, creating a list of the top performers within each department based on their first names."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $match: { ""projects.end_date"": { $lt: ISODate(""2023-12-31"") } } }, { $project: { project_name: ""$projects.project_name"", project_id: ""$projects.project_id"" } } ]); ","Retrieve the names and identifiers of projects that have concluded before December 31, 2023, by first separating each project within employee records."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $unwind: ""$projects"" }, { $match: { ""projects.end_date"": { $lt: ISODate(""2023-12-31"") } } }, { $project: { project_name: ""$projects.project_name"", project_id: ""$projects.project_id"" } } ]); ","List the project names and IDs for those projects that were completed prior to December 31, 2023, after expanding the project details within each employee record."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", maxSalary: { $max: ""$employment_details.salary"" } } }, { $match: { maxSalary: { $gt: 100000 } } } ]); ","Group the employee records by department identifier and determine the maximum salary within each department, then filter the results to only include departments where the maximum salary exceeds $100,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", maxSalary: { $max: ""$employment_details.salary"" } } }, { $match: { maxSalary: { $gt: 100000 } } } ]); ","Aggregate the records by department ID to find the highest salary in each department, and subsequently return only those departments that report a maximum salary greater than $100,000."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""identifier.employee_id"", foreignField: ""employment_details.manager_id"", as: ""managedEmployees"" } }, { $project: { ""personal_info.first_name"": 1, ""managedEmployees.personal_info.last_name"": 1 } } ]); ","Retrieve the first names of employees along with the last names of employees they manage, where the management relationship is determined by the unique employee identifiers matching the manager fields in the employment records."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $lookup: { from: ""employee_records"", localField: ""identifier.employee_id"", foreignField: ""employment_details.manager_id"", as: ""managedEmployees"" } }, { $project: { ""personal_info.first_name"": 1, ""managedEmployees.personal_info.last_name"": 1 } } ]); ","List the first names of employees alongside the last names of their subordinates, based on a match between the unique identifiers of the employees and the managers recorded in the employment details."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(new Date().setFullYear(new Date().getFullYear() - 30)) } }).limit(10); ","Find the first ten individuals whose date of birth indicates they are older than thirty years as of today, focusing on retrieving their personal information."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.find({ ""personal_info.date_of_birth"": { $lt: new Date(new Date().setFullYear(new Date().getFullYear() - 30)) } }).limit(10); ","Select a maximum of ten employees who are over thirty years old based on their date of birth, ensuring only their personal details are included in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $addFields: { totalReviews: { $size: ""$performance"" } } }, { $match: { totalReviews: { $gt: 5 } } } ]); ","Retrieve the total number of performance evaluations for employees, specifically those who have received more than five reviews. The results will include a new field that indicates the count of these evaluations."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $addFields: { totalReviews: { $size: ""$performance"" } } }, { $match: { totalReviews: { $gt: 5 } } } ]); ","Identify employees who have undergone over five performance reviews and calculate the total number of reviews for each individual, including this count as an additional detail in the results."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalSalaries: { $sum: ""$employment_details.salary"" } } }, { $sort: { totalSalaries: -1 } } ]);","Aggregate the total salaries of employees by department, grouping the results based on the department identifier, and present the totals in descending order from highest to lowest."
employee_recode,"{
  ""collections"": [{
    ""name"": ""employee_records"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""employee_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$"",
              ""description"": ""Unique employee identifier""
            },
            ""department_id"": {
              ""bsonType"": ""string"",
              ""description"": ""Department identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""employment_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""job_title"": {""bsonType"": ""string""},
            ""hire_date"": {""bsonType"": ""date""},
            ""salary"": {""bsonType"": ""decimal""},
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^EMP[0-9]{6}$""
            }
          }
        },
        ""performance"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""review_date"": {""bsonType"": ""date""},
              ""rating"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
              ""comments"": {""bsonType"": ""string""}
            }
          }
        },
        ""skills"": {
          ""bsonType"": ""array"",
          ""items"": {""bsonType"": ""string""}
        },
        ""projects"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""project_id"": {""bsonType"": ""string""},
              ""project_name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""role"": {""bsonType"": ""string""}
            }
          }
        },
        ""benefits"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""health_insurance"": {""bsonType"": ""bool""},
            ""retirement_plan"": {""bsonType"": ""bool""},
            ""vacation_days"": {""bsonType"": ""int""}
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.employee_records.aggregate([ { $group: { _id: ""$identifier.department_id"", totalSalaries: { $sum: ""$employment_details.salary"" } } }, { $sort: { totalSalaries: -1 } } ]);","Summarize the salaries paid to employees, organizing the data by department identifier and sorting the summed totals in descending order, prioritizing those departments with the highest total salary payouts."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.management_team.find({}); ,"Retrieve all available records of the management team, including personal information, position details, compensation, performance metrics, team size, budget responsibility, certifications, and strategic initiatives."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",db.management_team.find({}); ,"List every document associated with the management team, capturing all pertinent details such as personal profiles, job information, salary structures, performance evaluations, team composition, financial responsibilities, qualifications, and strategic efforts."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.first_name"": ""John"" }); ","Retrieve the records of individuals named John, focusing specifically on their personal information."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.first_name"": ""John"" }); ","List all entries where the first name of the individuals is John, emphasizing the details related to their personal information."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ","Retrieve the details of all individuals whose job level is equal to or greater than three, focusing specifically on their position attributes."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ","List all employees holding a position at level three or higher, providing information about their respective roles and responsibilities."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }); ","Retrieve the records of team members who have fewer than five direct reports, providing details about their roles and responsibilities."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }); ","List the team members with a direct report count of less than five, including relevant information about their positions and team structure."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 70000 } }); ","Retrieve the details of individuals whose base salary exceeds $70,000, providing all relevant information from the management team records."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 70000 } }); ","Gather information on members of the management team who earn a base salary greater than $70,000, including all applicable data pertaining to those individuals."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""Project Management Professional"" }); ","Retrieve all records of individuals who hold a certification named ""Project Management Professional."""
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""Project Management Professional"" }); ","List every person who has obtained a certification specifically designated as ""Project Management Professional."""
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2023 }); ",Retrieve the performance metrics for team members who registered achievements in the year 2023. The results should include all relevant performance data associated with this specific year.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2023 }); ","List the performance statistics of individuals who have recorded metrics for the year 2023, ensuring that all data pertinent to that year's performance is included."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $lt: 1000000 } }); ",Retrieve the details of managers whose annual budget responsibilities are less than one million. This should include all relevant information for each manager meeting this budget constraint.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $lt: 1000000 } }); ","Select the information associated with managers who have an annual budget responsibility below one million, ensuring all pertinent details for these managers are included in the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 80 } }); ",Retrieve all records of individuals who have strategic initiatives with a success rate of 80 percent or higher.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 80 } }); ",List all entries reflecting personnel involved in strategic initiatives that achieved a success rate equal to or exceeding 80 percent.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""identifier.manager_id"": ""MGR00001"" }); ","Retrieve all details of the manager whose unique identifier is ""MGR00001."" This includes their personal information, position details, team size, compensation, performance metrics, certifications, budget responsibility, and any strategic initiatives associated with them."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""identifier.manager_id"": ""MGR00001"" }); ","Gather comprehensive information for the manager identified by ""MGR00001,"" encompassing their personal details, professional role, team composition, salary structure, performance records, certifications held, budget oversight, and related strategic efforts."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.email"": { $regex: /@example.com$/ } }); ","Retrieve the personal information of individuals whose email addresses end with ""@example.com""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.email"": { $regex: /@example.com$/ } }); ","List the details of all individuals that have an email domain matching ""@example.com""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.kpi_achievement"": { $in: [90, 95] } }); ",Retrieve the records of individuals whose key performance indicators have achieved scores of either 90 or 95.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.kpi_achievement"": { $in: [90, 95] } }); ",Select the entries for personnel with KPI achievements of 90 or 95.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $between: [10, 50] } }); ",Retrieve records of individuals whose total team size falls between 10 and 50 members. The results should showcase only those entries that meet the specified team size criteria.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $between: [10, 50] } }); ",List entries for managers who oversee teams with a member count ranging from 10 to 50. Only include records that satisfy the established total team size restrictions.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.q1_spend"": { $gt: 100000 } }); ","Retrieve the information of individuals who have expenditures in the first quarter exceeding $100,000 in their budget responsibilities."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.q1_spend"": { $gt: 100000 } }); ","List all individuals whose spending in the first quarter is greater than $100,000 within their financial responsibilities."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.date_acquired"": { $gt: ISODate(""2021-01-01"") } }); ","Retrieve all records of individuals who have obtained certifications after January 1, 2021, including their personal and professional details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.date_acquired"": { $gt: ISODate(""2021-01-01"") } }); ","List individuals who have successfully acquired certifications since January 1, 2021, along with their relevant information regarding personal and job-related attributes."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.name"": ""Increase Market Share"" }); ","Retrieve all records of individuals who have a strategic initiative named ""Increase Market Share."""
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.name"": ""Increase Market Share"" }); ","List all employees associated with the strategic initiative called ""Increase Market Share."""
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00010"" }); ","Retrieve all records of individuals whose position details indicate they report to the manager with the identifier ""MGR00010""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00010"" }); ","List every entry of team members that have the manager identifier ""MGR00010"" as their reporting manager in the position details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.phone_number"": { $regex: /^\+1/ } }); ","Retrieve the records of individuals whose phone numbers begin with the country code ""+1""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.phone_number"": { $regex: /^\+1/ } }); ","List all entries for persons with phone numbers starting with ""+1"", indicating they are from the specified country."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.bonus_percentage"": { $gte: 20 } }); ",Retrieve all records of individuals whose bonus percentage is 20 or greater.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.bonus_percentage"": { $gte: 20 } }); ",List all personnel with a bonus percentage of at least 20%.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gt: 5 } }); ",Retrieve the data of individuals whose performance metrics indicate that they have completed more than five projects.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gt: 5 } }); ",Collect the records of team members who have achieved a project completion count greater than five in their performance evaluations.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the information about managers, including their identifiers, personal details, position titles, and performance metrics, for those whose annual budget responsibility exceeds $500,000. The resulting data should be presented in ascending order by their management identifier."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the details of managers, such as identifiers, personal information, job titles, and performance metrics, specifically for those who are accountable for an annual budget that is greater than $500,000. Arrange the findings in chronological order based on their unique identifiers."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ","Retrieve the details of individuals whose position level is three or higher, ensuring no records with a lower level are included."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ","Identify members of the team who hold positions at level three or above, filtering out any individuals at a lower level."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ","Retrieve the records of individuals whose email addresses end with ""@example.com""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.email"": { $regex: /@example\.com$/ } }); ","List all entries for people whose email information concludes with ""@example.com""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 100000 } }); ","Retrieve all management staff whose base salary exceeds $100,000. The selection should include individuals from various divisions who meet this salary criterion."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 100000 } }); ","Identify all members of the management team earning more than $100,000 in base salary, ensuring that the results encompass personnel across different divisions."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }); ","Select records of individuals whose date of birth is earlier than January 1, 1980, specifically focusing on their personal information."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }); ","Identify individuals born before January 1, 1980, retrieving their personal information details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ",Retrieve the details of individuals in the management team who hold the PMP certification.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ",List all members of the management team that possess a PMP certification.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }); ",Retrieve all records of individuals who supervise fewer than five direct reports within the management team.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }); ","List all managers who have less than five direct reports in their teams, displaying their details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $gt: 500000 } }); ","Retrieve the details of individuals whose annual budget responsibility exceeds 500,000, ensuring that only records matching this financial threshold are included in the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.annual_budget"": { $gt: 500000 } }); ","Identify the records of personnel that have an annual budget responsibility greater than 500,000, including only those that meet this specific monetary criterion in the output."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022, ""performance_metrics.kpi_achievement"": { $gte: 90 } }); ",Retrieve the records of individuals who achieved a key performance indicator score of 90 or higher during the year 2022. The results should include all relevant details pertaining to these individuals' performance metrics.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022, ""performance_metrics.kpi_achievement"": { $gte: 90 } }); ","Collect information on all individuals who met or exceeded a 90% achievement in their performance metrics for the year 2022, ensuring that comprehensive details about their performance are included."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 80 } }); ",Retrieve all records of individuals whose strategic initiatives have a success rate of at least 80 percent.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 80 } }); ",List all entries for persons whose strategic initiatives achieve a success rate of 80 or higher.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.title"": ""Senior Manager"" }).sort({ ""compensation.base_salary"": -1 }); ","Retrieve all individuals holding the position of ""Senior Manager,"" and arrange the results by their base salary in descending order."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.title"": ""Senior Manager"" }).sort({ ""compensation.base_salary"": -1 }); ","Collect data on employees with the title ""Senior Manager"" and present the findings sorted from the highest to the lowest base salary."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $eq: 10 } }); ",Fetch the records of individuals who lead teams consisting of exactly ten members. This should include all relevant information about the team leaders but only those with a total team size of ten.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.total_team_members"": { $eq: 10 } }); ","Select the data for managers supervising teams that have precisely ten members, retrieving complete details for those specific team leaders."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR12345"" }); ","Find all individuals in management whose direct supervisor is identified by the unique manager ID ""MGR12345""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR12345"" }); ","Select records of management team members who report directly to the manager with the ID ""MGR12345""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gt: 5 } }); ",Select the records of individuals whose performance metrics indicate that they have completed more than five projects.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gt: 5 } }); ",Gather data on individuals where the count of completed projects in their performance metrics exceeds five.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.expiry_date"": { $gt: new Date() } }); ",Retrieve all records of individuals whose certifications have expiration dates that are later than the current date.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.expiry_date"": { $gt: new Date() } }); ","Identify all entries where the expiration dates of certifications are still valid, meaning they fall after today's date."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.budget_allocated"": { $lte: 10000 } }); ","Select records of individuals whose strategic initiatives have been allocated a budget not exceeding 10,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.budget_allocated"": { $lte: 10000 } }); ","Gather data on individuals with strategic initiatives that feature a budget equal to or below 10,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.q1_spend"": { $gt: 0 } }); ",Retrieve records of individuals whose quarterly spending in the first quarter exceeds zero.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""budget_responsibility.q1_spend"": { $gt: 0 } }); ",List entries where the amount spent in the first quarter is greater than zero.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.bonus_percentage"": { $gt: 20 } }); ",Retrieve entries for individuals whose bonus percentage exceeds 20. This will include all relevant details associated with those individuals' compensation.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.bonus_percentage"": { $gt: 20 } }); ","List all individuals that have a bonus percentage greater than 20, displaying all pertinent information related to their compensation details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.countDocuments({ ""personal_info.last_name"": ""Smith"" }); ","Count the number of individuals whose last name is ""Smith"" within the records of personal information."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.countDocuments({ ""personal_info.last_name"": ""Smith"" }); ","Determine how many entries exist where the last name in the personal details matches ""Smith."""
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""identifier.division_code"": ""DIV01"" }).sort({ ""personal_info.first_name"": 1 }); ","Retrieve all records of personnel whose division code is designated as ""DIV01,"" and sort these results in ascending order by their first names."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""identifier.division_code"": ""DIV01"" }).sort({ ""personal_info.first_name"": 1 }); ","Collect the details of staff members belonging to the division identified by ""DIV01,"" ensuring that the results are arranged in alphabetical order according to their first names."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.start_date"": { $lt: new Date(""2020-01-01"") } }); ","Retrieve all records of individuals whose position details indicate a start date prior to January 1, 2020."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.start_date"": { $lt: new Date(""2020-01-01"") } }); ","Select the entries for personnel with position details that show they began their roles before January 1, 2020."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the personal information and professional details of managers who oversee teams with more than five direct reports, ensuring that the records are sorted by the managers' last names in alphabetical order."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the details (including personal information and job titles) of managers who lead teams consisting of more than five direct reports, organized in alphabetical order according to their last names."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ","Retrieve all records of individuals whose first name is ""John"" from the management team, showcasing their full personal details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ","Identify and list all members of the management team with the first name ""John,"" including their complete personal information in the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ","Retrieve the details of individuals whose job positions have a level equal to or greater than three, encompassing all related information in the management team."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ","Identify members of the management team with job positions at level three or above, including all their details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $lt: 80000 } }); ","Retrieve the details of individuals whose base salary is below $80,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $lt: 80000 } }); ","List the records of employees earning less than $80,000 in base salary."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": 5 }).sort({ ""personal_info.last_name"": 1 }); ","Retrieve the details of managers who have exactly five direct reports, and arrange the results in alphabetical order by their last name."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": 5 }).sort({ ""personal_info.last_name"": 1 }); ","Identify managers with a team of five direct reports, sorting the output by their last names in ascending order."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gte: 1000000 } } }, { $group: { _id: ""$identifier.manager_id"", totalSalary: { $sum: ""$compensation.base_salary"" } } } ]); ","Retrieve the manager identifiers and the combined base salaries of those whose annual budget responsibility is at least one million. The results should group the data by each manager, summing up their individual base salaries."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gte: 1000000 } } }, { $group: { _id: ""$identifier.manager_id"", totalSalary: { $sum: ""$compensation.base_salary"" } } } ]); ","Identify the unique manager IDs along with the total of their base salaries for managers responsible for an annual budget of one million or more, aggregating the salaries by manager."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $group: { _id: ""$performance_metrics.year"", averageKPI: { $avg: ""$performance_metrics.kpi_achievement"" } } } ]); ","Calculate the average Key Performance Indicator (KPI) achievement for each year by first breaking down the performance metrics for all individuals, and then grouping the results by year to find the mean KPI scores."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $group: { _id: ""$performance_metrics.year"", averageKPI: { $avg: ""$performance_metrics.kpi_achievement"" } } } ]); ","Determine the mean KPI achievement per year by unwinding the performance metrics of each individual, then aggregating the data to summarize the average KPI values by year."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""certifications.name"": ""PMP"" } }, { $project: { manager_id: ""$identifier.manager_id"", title: ""$position_details.title"" } } ]); ",Retrieve the manager identifiers and job titles of individuals who hold a certification in PMP.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""certifications.name"": ""PMP"" } }, { $project: { manager_id: ""$identifier.manager_id"", title: ""$position_details.title"" } } ]); ",List the job titles and manager identifiers of managers who possess PMP certification.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $lt: 50 } }).sort({ ""budget_responsibility.annual_budget"": -1 }); ","Retrieve records of individuals involved in strategic initiatives where the success rate is below 50 percent, and arrange these records in descending order based on their annual budget responsibility."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $lt: 50 } }).sort({ ""budget_responsibility.annual_budget"": -1 }); ","Identify individuals associated with strategic initiatives that have a success rate of less than 50 percent, and sort these individuals by their annual budget responsibility in descending order."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", avgBonus: { $avg: ""$compensation.bonus_percentage"" } } } ]); ","Calculate the average bonus percentage for each distinct job title among the managers, consolidating the data to show the average value for each position."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", avgBonus: { $avg: ""$compensation.bonus_percentage"" } } } ]); ","Determine the average bonus percentages associated with different job titles held by managers, grouping the results by title to present the average for each one."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""team_size.total_team_members"": { $gt: 10 } } }, { $project: { manager_id: ""$identifier.manager_id"", total_budget: ""$budget_responsibility.annual_budget"" } } ]); ",Retrieve the manager identifiers and total annual budgets of managers who oversee more than ten team members. This data should include only those records that meet the specified team size condition.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""team_size.total_team_members"": { $gt: 10 } } }, { $project: { manager_id: ""$identifier.manager_id"", total_budget: ""$budget_responsibility.annual_budget"" } } ]); ","List the identifiers of managers along with their total annual budget, filtering for those who manage teams consisting of over ten members. The output should exclusively include managers who satisfy this team size criterion."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.team_satisfaction_score"": { $gte: 4 } }); ","Retrieve the records of individuals whose team satisfaction scores are four or higher, as indicated in their performance metrics."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.team_satisfaction_score"": { $gte: 4 } }); ","Identify individuals with a team satisfaction score of at least four in their performance metrics, and return their respective details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$certifications"" }, { $group: { _id: ""$certifications.name"", count: { $sum: 1 } } } ]); ","Aggregate and count the number of individual certifications held by team members, ensuring that each certification is treated as a distinct entry and grouped by its name."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$certifications"" }, { $group: { _id: ""$certifications.name"", count: { $sum: 1 } } } ]); ","Count and categorize the different certifications acquired by team members, with each unique certification name represented and the total occurrences computed accordingly."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.start_date"": { $gte: new Date('2020-01-01') } }); ","Retrieve all records of individuals whose position start date is on or after January 1, 2020."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.start_date"": { $gte: new Date('2020-01-01') } }); ","Select entries for team members that began their positions from January 1, 2020, onwards."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""compensation.stock_options"": { $gt: 100 } } }, { $sort: { ""compensation.base_salary"": -1 } } ]); ","Retrieve the details of individuals whose stock options exceed 100, and sort the results in descending order based on their base salary."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""compensation.stock_options"": { $gt: 100 } } }, { $sort: { ""compensation.base_salary"": -1 } } ]); ","Identify all managers with more than 100 stock options, organizing the information by base salary in a descending manner for better visibility of higher earners."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", avgDirectReports: { $avg: ""$team_size.direct_reports"" } } } ]); ","Aggregate the total number of direct reports for each division, calculating the average across all managers in that division. The results will group data by the unique division identifier, providing an average of direct reports for each group."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", avgDirectReports: { $avg: ""$team_size.direct_reports"" } } } ]); ","Determine the average count of direct reports held by managers organized by division, grouping the data according to division identifiers and calculating the mean number of direct reports for each division."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gt: 3 } }); ",Retrieve all records of managers whose performance metrics indicate they have completed more than three projects.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.projects_completed"": { $gt: 3 } }); ",List all managers whose reported number of completed projects exceeds three in their performance metrics.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.q1_spend"": { $lt: 250000 } } }, { $project: { manager_id: ""$identifier.manager_id"", remaining_budget: { $subtract: [""$budget_responsibility.annual_budget"", ""$budget_responsibility.q1_spend""] } } } ]); ","Retrieve the manager identifiers for those responsible for budgets where the first quarter spending is less than $250,000, along with the remaining budget calculated by subtracting the first quarter spending from the total annual budget."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.q1_spend"": { $lt: 250000 } } }, { $project: { manager_id: ""$identifier.manager_id"", remaining_budget: { $subtract: [""$budget_responsibility.annual_budget"", ""$budget_responsibility.q1_spend""] } } } ]); ","Identify managers whose first quarter expenditures fall below $250,000, and compute their remaining budget by deducting the first quarter spending from the annual budget amount, returning the manager identifiers alongside this calculated value."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); ","Retrieve the details of all individuals whose position reports to a manager with the identifier ""MGR00001."" This search will return data including personal and position information applicable to those under this specific manager's supervision."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.reports_to"": ""MGR00001"" }); ","Find the information for team members who directly report to the manager identified as ""MGR00001."" This will include relevant details about their personal and position attributes for all individuals under this manager."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $group: { _id: ""$strategic_initiatives.initiative_id"", avgSuccessRate: { $avg: ""$strategic_initiatives.success_rate"" } } } ]); ","Calculate the average success rate for each strategic initiative by first expanding the list of initiatives associated with each manager, then grouping the results by initiative ID to aggregate the average success rate for each initiative."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $group: { _id: ""$strategic_initiatives.initiative_id"", avgSuccessRate: { $avg: ""$strategic_initiatives.success_rate"" } } } ]); ","Determine the average success rate of strategic initiatives by unwinding the initiatives attached to each manager, followed by grouping these records based on initiative ID to compute the average success rate for every distinct initiative."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve details about managers, including their unique identifiers, personal information, position details, compensation, performance metrics, team size, budget responsibility, certifications, and strategic initiatives, filtering for those with a total team size of at least five members. The resulting data should be sorted by the managers' titles in ascending order and limited to the first twenty managers."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Gather information on managers, encompassing their identifiers, personal backgrounds, roles, compensation packages, performance indicators, team sizes, budget management, certifications, and ongoing strategic initiatives, specifically targeting managers who supervise a team of five or more. Organize the findings by the titles of the managers in alphabetical order and restrict the output to the top twenty entries."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ",Retrieve all records of management team members whose position level is three or higher.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""position_details.level"": { $gte: 3 } }); ",List all individuals in the management team whose job level is equal to or exceeds three.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 100000 } }).sort({ ""personal_info.last_name"": 1 }); ","Find the records of individuals whose annual base salary surpasses $100,000, and arrange the results in ascending order based on their last names."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gt: 100000 } }).sort({ ""personal_info.last_name"": 1 }); ","Retrieve details for personnel with base salaries greater than $100,000, sorting the output by their last names in alphabetical order."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $group: { _id: ""$identifier.division_code"", avgSalary: { $avg: ""$compensation.base_salary"" } } }]); ","Calculate the average base salary of employees grouped by their division code, ensuring to summarize this information for each distinct division identified within the management team."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $group: { _id: ""$identifier.division_code"", avgSalary: { $avg: ""$compensation.base_salary"" } } }]); ","Determine the average salary for employees, organizing the results by division code to provide a clear representation of the average base compensation associated with each division in the management team."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""performance_metrics.kpi_achievement"": { $gt: 75 } } }, { $sort: { ""personal_info.first_name"": 1 } }]); ","Select all individuals whose performance metrics indicate a key performance indicator achievement greater than 75, and arrange the results in ascending order based on their first names."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""performance_metrics.kpi_achievement"": { $gt: 75 } } }, { $sort: { ""personal_info.first_name"": 1 } }]); ",Identify team members with KPI achievements exceeding 75 and sort these individuals by their first names in a sequential manner.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ","Retrieve the records of individuals who possess a certification with the name ""PMP."""
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ","List all entities that have been awarded a certification titled ""PMP."""
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $unwind: ""$performance_metrics"" }, { $group: { _id: ""$performance_metrics.year"", avgSatisfaction: { $avg: ""$performance_metrics.team_satisfaction_score"" } } }]); ","Aggregate the team satisfaction scores from the performance metrics, breaking down the results by year to calculate the average satisfaction for each year represented in the data."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $unwind: ""$performance_metrics"" }, { $group: { _id: ""$performance_metrics.year"", avgSatisfaction: { $avg: ""$performance_metrics.team_satisfaction_score"" } } }]); ","Compute the average team satisfaction scores for each year by first expanding the performance metrics data and then grouping the results according to the year, yielding a summary of average satisfaction for each year recorded."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ",Retrieve the first and last names of individuals who supervise fewer than five direct reports.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""team_size.direct_reports"": { $lt: 5 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ","List the names of managers who have less than five direct reports, including only their first and last names in the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""budget_responsibility.annual_budget"": { $gt: 1000000 } } }, { $project: { _id: 0, ""personal_info.email"": 1, ""budget_responsibility.annual_budget"": 1 } }]); ","Select the email addresses and annual budgets of individuals whose annual budget responsibility exceeds one million, excluding the unique identifiers from the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""budget_responsibility.annual_budget"": { $gt: 1000000 } } }, { $project: { _id: 0, ""personal_info.email"": 1, ""budget_responsibility.annual_budget"": 1 } }]); ","Gather the email information and budget figures for members responsible for an annual budget greater than one million, omitting any unique identifiers in the output."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $lookup: { from: ""management_team"", localField: ""position_details.reports_to"", foreignField: ""identifier.manager_id"", as: ""reporting_manager"" } }]); ","Retrieve the details of managers, including their identifiers, who oversee other managers by linking the reports from the current management team with the manager identifiers in their records. This data is sourced through a relationship based on the reporting structure defined by the manager identifiers."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $lookup: { from: ""management_team"", localField: ""position_details.reports_to"", foreignField: ""identifier.manager_id"", as: ""reporting_manager"" } }]); ","Gather information about managers, including their unique identifiers, by matching those who report to other managers in the management team, establishing connections through the specified manager identifiers in the reporting details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $group: { _id: ""$position_details.title"", totalBudget: { $sum: ""$budget_responsibility.annual_budget"" } } }, { $sort: { totalBudget: -1 } }]); ","Group the records by the job titles of team members, calculating the total annual budget associated with each title, and then present the results sorted in descending order based on the total budget."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $group: { _id: ""$position_details.title"", totalBudget: { $sum: ""$budget_responsibility.annual_budget"" } } }, { $sort: { totalBudget: -1 } }]); ","Aggregate the data by position titles to determine the sum of annual budgets for each title, sorting the final results from highest to lowest total budget."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 50 } }).sort({ ""strategic_initiatives.start_date"": 1 }); ","Retrieve records of individuals whose strategic initiatives have a success rate of 50 percent or higher, arranged in ascending order according to the start date of those initiatives."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""strategic_initiatives.success_rate"": { $gte: 50 } }).sort({ ""strategic_initiatives.start_date"": 1 }); ","List all individuals with strategic initiatives that achieved at least a 50 percent success rate, sorted chronologically by the start date of each initiative from earliest to latest."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.budget_allocated"": { $gt: 50000 } } }, { $group: { _id: ""$strategic_initiatives.initiative_id"", avgSuccess: { $avg: ""$strategic_initiatives.success_rate"" } } }]); ","Analyze the strategic initiatives and identify those with an allocated budget greater than 50,000. For each qualified initiative, calculate the average success rate and group the results by the unique identifier of each initiative."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.budget_allocated"": { $gt: 50000 } } }, { $group: { _id: ""$strategic_initiatives.initiative_id"", avgSuccess: { $avg: ""$strategic_initiatives.success_rate"" } } }]); ","Examine initiatives that have a budget allocation exceeding 50,000, and determine the average success rate for each initiative, organizing the output by the initiative's unique identifier."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.bonus_percentage"": { $gt: 10 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ",Retrieve the first and last names of individuals whose bonus percentage exceeds 10%. Only these name fields should be returned for those qualifying individuals.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.bonus_percentage"": { $gt: 10 } }).project({ ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 }); ",List the names (first and last) of employees who have a bonus percentage greater than 10%. The output should include only these fields for those who meet the specified criteria.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""performance_metrics.year"": 2022 } }, { $group: { _id: null, totalProjects: { $sum: ""$performance_metrics.projects_completed"" } } }]); ","Calculate the total number of projects completed by all team members during the year 2022, aggregating the data without separating it into distinct groups."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""performance_metrics.year"": 2022 } }, { $group: { _id: null, totalProjects: { $sum: ""$performance_metrics.projects_completed"" } } }]); ","Sum the total projects that were completed in the year 2022 across all individuals in the management team, providing a single cumulative total without categorization."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }).limit(10); ","Retrieve the details of individuals whose date of birth is prior to January 1, 1980, and limit the results to ten entries."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""personal_info.date_of_birth"": { $lt: new Date(""1980-01-01"") } }).limit(10); ","Select a maximum of ten records for individuals born before January 1, 1980, including their personal information."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $project: { managerId: ""$identifier.manager_id"", totalBudget: ""$budget_responsibility.annual_budget"" } }, { $match: { totalBudget: { $gt: 200000 } } }]); ","Retrieve the unique manager identifiers along with the total annual budget for each manager where the budget is greater than $200,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $project: { managerId: ""$identifier.manager_id"", totalBudget: ""$budget_responsibility.annual_budget"" } }, { $match: { totalBudget: { $gt: 200000 } } }]); ","List each manager's identifier alongside their annual budget, but only include those whose budget exceeds $200,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""team_size.total_team_members"": { $gte: 10 } } }, { $project: { _id: 0, name: { $concat: [ ""$personal_info.first_name"", "" "", ""$personal_info.last_name"" ] } } }]); ","Retrieve the names of individuals from the management team whose total number of team members is at least 10, combining their first and last names into a single field while excluding any identification details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""team_size.total_team_members"": { $gte: 10 } } }, { $project: { _id: 0, name: { $concat: [ ""$personal_info.first_name"", "" "", ""$personal_info.last_name"" ] } } }]); ","List the combined first and last names of managers that oversee teams with a total membership of 10 or more, ensuring that only the names are presented without any other identifying information."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""performance_metrics.kpi_achievement"": { $lte: 40 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } }]); ",Retrieve the first and last names of individuals whose key performance indicator achievement is 40 or lower. All records must meet this criterion.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([{ $match: { ""performance_metrics.kpi_achievement"": { $lte: 40 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1 } }]); ",List the first and last names of all personnel who have a key performance metric achievement of no more than 40. Only those meeting this performance condition should be included in the results.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the full names and performance rating scores of managers whose teams have completed more than ten projects in the past year, with the results organized in descending order based on the KPI achievement scores."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the names and team performance metrics of managers with over ten completed projects last year, arranging the outcomes in order of highest to lowest KPI achievement scores."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ","Retrieve all records of individuals whose first name is ""John""."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","db.management_team.find({ ""personal_info.first_name"": ""John"" }); ","Identify and list every entry corresponding to persons named ""John"" in their first name field."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gte: 100000 } }); ","Retrieve records of individuals from the management team whose base salary is greater than or equal to $100,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""compensation.base_salary"": { $gte: 100000 } }); ","List all members of the management team whose base salary meets or exceeds $100,000."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $eq: 3 }, ""team_size.direct_reports"": { $gt: 5 } }); ",Retrieve the details of individuals who hold a position at level three and have more than five direct reports within their team.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""position_details.level"": { $eq: 3 }, ""team_size.direct_reports"": { $gt: 5 } }); ","Identify the individuals occupying level three positions who manage teams with more than five direct reports, extracting their associated details."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022, ""performance_metrics.kpi_achievement"": { $gte: 90 } }); ",Retrieve the records of individuals who achieved a key performance indicator score of at least 90 in the year 2022.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""performance_metrics.year"": 2022, ""performance_metrics.kpi_achievement"": { $gte: 90 } }); ",List the individuals from 2022 who have attained a key performance indicator achievement of 90 or more.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ","Retrieve records of individuals who possess a certification with the name ""PMP."" This should include all personal and professional details associated with those individuals."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.find({ ""certifications.name"": ""PMP"" }); ","List all individuals who hold a certification titled ""PMP,"" including their relevant personal and job-related data."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gt: 500000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""budget_responsibility.annual_budget"": 1 } } ]); ","Retrieve the first and last names, along with the annual budget, of individuals who are responsible for budgets exceeding $500,000. Only the relevant details should be included in the results."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""budget_responsibility.annual_budget"": { $gt: 500000 } } }, { $project: { ""personal_info.first_name"": 1, ""personal_info.last_name"": 1, ""budget_responsibility.annual_budget"": 1 } } ]); ","Identify individuals with annual budgets greater than $500,000 and display their first and last names along with the amount of the annual budget, ensuring that only these key pieces of information are presented."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $match: { ""performance_metrics.projects_completed"": { $gt: 10 } } }, { $group: { _id: ""$identifier.manager_id"", avgSatisfaction: { $avg: ""$performance_metrics.team_satisfaction_score"" } } } ]); ",Retrieve the manager identifiers and the average team satisfaction scores of managers whose teams have completed more than ten projects. The results should be aggregated and presented by each manager's unique identifier.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $match: { ""performance_metrics.projects_completed"": { $gt: 10 } } }, { $group: { _id: ""$identifier.manager_id"", avgSatisfaction: { $avg: ""$performance_metrics.team_satisfaction_score"" } } } ]); ","Summarize the average satisfaction scores of managers based on their identifier, including only those whose teams achieved over ten completed projects. The output should group the data by manager identifier for clarity."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", totalBaseSalary: { $sum: ""$compensation.base_salary"" } } }, { $sort: { totalBaseSalary: -1 } } ]); ","Aggregate the total base salary for each job title from the position details, grouping by title and summing the base salaries from the compensation section, with the results sorted in descending order based on the total salary amount."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.title"", totalBaseSalary: { $sum: ""$compensation.base_salary"" } } }, { $sort: { totalBaseSalary: -1 } } ]); ","Group the employees by their job titles and calculate the total base salary for each title by summing the base salaries found in the compensation details, then sort the results in descending order of the total salary."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $project: { initiator: ""$identifier.manager_id"", initiatives: ""$strategic_initiatives.name"", successRate: ""$strategic_initiatives.success_rate"" } } ]); ",Select the manager identifiers along with the names and success rates of strategic initiatives that have achieved a success rate of 75% or higher. The information should be gathered for each manager from the respective initiatives they are responsible for.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""strategic_initiatives.success_rate"": { $gte: 75 } } }, { $project: { initiator: ""$identifier.manager_id"", initiatives: ""$strategic_initiatives.name"", successRate: ""$strategic_initiatives.success_rate"" } } ]); ",Retrieve the identifiers of managers along with the names and success rates of their strategic initiatives that are rated at or above 75% for success. This should include details for all managers related to their successful initiatives.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.level"", avgSalary: { $avg: ""$compensation.base_salary"" }, totalMembers: { $sum: ""$team_size.total_team_members"" } } } ]); ","Group the data by the levels of positions held, calculating the average base salary for each level and the total number of team members associated with each position level."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$position_details.level"", avgSalary: { $avg: ""$compensation.base_salary"" }, totalMembers: { $sum: ""$team_size.total_team_members"" } } } ]); ","Aggregate the information based on position levels, determining the mean base salary for each level while also summing up the total team members linked to each specific level of position."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$certifications"" }, { $match: { ""certifications.expiry_date"": { $lt: new Date() } } }, { $group: { _id: ""$identifier.manager_id"", expiredCertifications: { $push: ""$certifications.name"" } } } ]); ","Identify the managers who have certifications that have expired, collecting the names of these expired certifications for each unique manager identifier. Only include certifications where the expiry date is earlier than the current date."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$certifications"" }, { $match: { ""certifications.expiry_date"": { $lt: new Date() } } }, { $group: { _id: ""$identifier.manager_id"", expiredCertifications: { $push: ""$certifications.name"" } } } ]); ","Gather the names of certifications that have lapsed for each manager, ensuring that only those certifications with an expiry date prior to today are included, and group the results by unique manager identifier."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { managerId: ""$identifier.manager_id"", totalSpend: { $add: [""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend""] } } }, { $sort: { totalSpend: -1 } } ]); ","Retrieve the unique manager identifiers along with the total expenditures made by each manager across all four quarters of the fiscal year, and arrange the results in descending order based on these total expenditures."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { managerId: ""$identifier.manager_id"", totalSpend: { $add: [""$budget_responsibility.q1_spend"", ""$budget_responsibility.q2_spend"", ""$budget_responsibility.q3_spend"", ""$budget_responsibility.q4_spend""] } } }, { $sort: { totalSpend: -1 } } ]); ","List the manager IDs and their corresponding total spending across Q1 to Q4, sorting the results from highest to lowest total spending."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.start_date"": { $gt: new Date(""2023-01-01"") } } }, { $group: { _id: ""$identifier.manager_id"", totalAllocatedBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); ","Retrieve the total allocated budget for each manager, calculated from the strategic initiatives that commenced after January 1, 2023, with each manager identified by their unique manager ID."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$strategic_initiatives"" }, { $match: { ""strategic_initiatives.start_date"": { $gt: new Date(""2023-01-01"") } } }, { $group: { _id: ""$identifier.manager_id"", totalAllocatedBudget: { $sum: ""$strategic_initiatives.budget_allocated"" } } } ]); ","Summarize the total budget allocation for managers based on their strategic initiatives starting from January 1, 2023, categorizing the results by each manager's unique ID."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""position_details.reports_to"": { $exists: true } } }, { $lookup: { from: ""management_team"", localField: ""position_details.reports_to"", foreignField: ""identifier.manager_id"", as: ""reporting_manager"" } }, { $unwind: ""$reporting_manager"" }, { $project: { managerId: ""$identifier.manager_id"", reportingManagerId: ""$reporting_manager.identifier.manager_id"" } } ]); ","Retrieve the manager identifiers of individuals whose position details include a reporting manager, along with the corresponding identifiers of these reporting managers. This includes only those records where a reporting relationship exists, and the resulting data will contain each manager's ID and their reporting manager's ID."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $match: { ""position_details.reports_to"": { $exists: true } } }, { $lookup: { from: ""management_team"", localField: ""position_details.reports_to"", foreignField: ""identifier.manager_id"", as: ""reporting_manager"" } }, { $unwind: ""$reporting_manager"" }, { $project: { managerId: ""$identifier.manager_id"", reportingManagerId: ""$reporting_manager.identifier.manager_id"" } } ]); ","List the identifiers of managers who have a reporting relationship, alongside the identifiers of their respective reporting managers. The selection will filter for those with an established reporting connection and will present the manager ID alongside the corresponding reporting manager ID."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $match: { ""performance_metrics.kpi_achievement"": { $gte: 85 } } }, { $group: { _id: ""$identifier.manager_id"", countHighPerformance: { $count: {} } } } ]); ","Identify the manager identifiers of those whose performance metrics show a key performance indicator achievement of 85 or above, and count the total number of high performers associated with each manager."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $unwind: ""$performance_metrics"" }, { $match: { ""performance_metrics.kpi_achievement"": { $gte: 85 } } }, { $group: { _id: ""$identifier.manager_id"", countHighPerformance: { $count: {} } } } ]); ","Count the number of managers whose team members have achieved a key performance indicator score of at least 85, grouping the results by unique manager identifiers."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", averageBonus: { $avg: ""$compensation.bonus_percentage"" } } }, { $sort: { averageBonus: -1 } } ]); ",Calculate the average bonus percentage for each division by grouping the data based on division codes and then sorting the results in descending order according to the average bonus.
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $group: { _id: ""$identifier.division_code"", averageBonus: { $avg: ""$compensation.bonus_percentage"" } } }, { $sort: { averageBonus: -1 } } ]); ","Determine the average bonus percentage allocated to each division, organizing the data by division codes and presenting the findings sorted from the highest to the lowest average bonus."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { managerId: ""$identifier.manager_id"", totalCertifications: { $size: ""$certifications"" }, totalTeamSize: ""$team_size.total_team_members"" } }, { $match: { totalCertifications: { $gt: 2 }, totalTeamSize: { $gt: 10 } } } ]); ","Select the identifiers of managers along with the count of their certifications and the total number of their team members, but only for those managers who have more than two certifications and lead a team of more than ten members."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
","
db.management_team.aggregate([ { $project: { managerId: ""$identifier.manager_id"", totalCertifications: { $size: ""$certifications"" }, totalTeamSize: ""$team_size.total_team_members"" } }, { $match: { totalCertifications: { $gt: 2 }, totalTeamSize: { $gt: 10 } } } ]); ","Gather the manager identifiers alongside the total number of certifications they hold and the overall size of their teams, applying restrictions to include only those managers with over two certifications and more than ten team members."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"Retrieve the manager identifiers and their respective direct report counts for those managers who have a total team size of more than ten members, ensuring that the information is sorted by the number of direct reports in descending order."
management_team,"{
  ""collections"": [{
    ""name"": ""management_team"",
    ""document"": {
      ""properties"": {
        ""identifier"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""manager_id"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$"",
              ""description"": ""Unique manager identifier""
            },
            ""division_code"": {
              ""bsonType"": ""string"",
              ""description"": ""Division identifier""
            }
          }
        },
        ""personal_info"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""first_name"": {""bsonType"": ""string""},
            ""last_name"": {""bsonType"": ""string""},
            ""date_of_birth"": {""bsonType"": ""date""},
            ""email"": {""bsonType"": ""string""},
            ""phone_number"": {""bsonType"": ""string""}
          }
        },
        ""position_details"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""title"": {""bsonType"": ""string""},
            ""level"": {""bsonType"": ""int"", ""minimum"": 1, ""maximum"": 5},
            ""start_date"": {""bsonType"": ""date""},
            ""reports_to"": {
              ""bsonType"": ""string"",
              ""pattern"": ""^MGR[0-9]{5}$""
            }
          }
        },
        ""compensation"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""base_salary"": {""bsonType"": ""decimal""},
            ""bonus_percentage"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
            ""stock_options"": {""bsonType"": ""int""}
          }
        },
        ""performance_metrics"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""year"": {""bsonType"": ""int""},
              ""kpi_achievement"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100},
              ""team_satisfaction_score"": {""bsonType"": ""double"", ""minimum"": 1, ""maximum"": 5},
              ""projects_completed"": {""bsonType"": ""int""}
            }
          }
        },
        ""team_size"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""direct_reports"": {""bsonType"": ""int""},
            ""total_team_members"": {""bsonType"": ""int""}
          }
        },
        ""budget_responsibility"": {
          ""bsonType"": ""object"",
          ""properties"": {
            ""annual_budget"": {""bsonType"": ""decimal""},
            ""q1_spend"": {""bsonType"": ""decimal""},
            ""q2_spend"": {""bsonType"": ""decimal""},
            ""q3_spend"": {""bsonType"": ""decimal""},
            ""q4_spend"": {""bsonType"": ""decimal""}
          }
        },
        ""certifications"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""name"": {""bsonType"": ""string""},
              ""date_acquired"": {""bsonType"": ""date""},
              ""expiry_date"": {""bsonType"": ""date""}
            }
          }
        },
        ""strategic_initiatives"": {
          ""bsonType"": ""array"",
          ""items"": {
            ""bsonType"": ""object"",
            ""properties"": {
              ""initiative_id"": {""bsonType"": ""string""},
              ""name"": {""bsonType"": ""string""},
              ""start_date"": {""bsonType"": ""date""},
              ""end_date"": {""bsonType"": ""date""},
              ""budget_allocated"": {""bsonType"": ""decimal""},
              ""success_rate"": {""bsonType"": ""double"", ""minimum"": 0, ""maximum"": 100}
            }
          }
        }
      }
    }
  }],
  ""version"": 2
}
",,"List the identifiers of managers alongside the counts of their direct reports, but only for those managing teams exceeding ten members in size, with results arranged from the highest to the lowest direct report count."
