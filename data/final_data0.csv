database_id,schema,mongo_query,natural_language_query
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ department: 'Sales' }),Get employees in the 'Sales' department.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ status: 'active' }),Retrieve active employees from the 'employees' collection.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ salary: { $gte: 50000 } }),"Get employees with a salary of at least 50,000."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.findOne({ employeeId: 'E123' });,Get an employee document from the 'employees' collection with ID 'E123'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ location: 'New York' });,Get departments located in New York.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ budget: { $lt: 100000 } });,"Get documents from the 'departments' collection with a budget under 100,000."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ status: 'approved' });,Get all approved leave records.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ leaveType: 'sick' }),Get all leave records where the leave type is 'sick'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ managerId: ObjectId('60d221f2f7d2bb3e12e7b404') });,Find employees managed by the manager with ObjectId '60d221f2f7d2bb3e12e7b404'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ hireDate: { $gte: ISODate('2020-01-01') } });,"Fetch employees hired on or after January 1, 2020."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.findOne({ headId: ObjectId(""60d221f2f7d2bb3e12e7b405"") });",Get a document from the 'departments' collection where 'headId' is '60d221f2f7d2bb3e12e7b405'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ firstName: 'John' }),Get employees from the 'employees' collection with the first name 'John'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ lastName: 'Doe' });,Get documents of employees with the last name 'Doe'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ employeeId: ObjectId('60d221f2f7d2bb3e12e7b406') }),Get all leave records for the employee with ID 60d221f2f7d2bb3e12e7b406.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ startDate: { $lte: new Date('2023-01-01') } });,"Get leave records where the start date is on or before January 1, 2023."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ department: 'HR', status: 'active' });",Get all active employees in the HR department.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ createdAt: { $gte: new Date('2021-01-01') } });,"Get departments created on or after January 1, 2021."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.findOne({ _id: ObjectId('60d221f2f7d2bb3e12e7b407') });,Get the leave record with ID '60d221f2f7d2bb3e12e7b407'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ 'EmergencyContact.relationship': 'parent' }),Find employees with an emergency contact whose relationship is 'parent'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ department: 'IT', salary: { $gt: 70000 } });","Retrieve employees from the 'employees' collection in the 'IT' department with a salary over 70,000."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ name: 'Engineering' });,Get departments where the name is 'Engineering'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ status: 'active' }, { firstName: 1, lastName: 1, email: 1 }).sort({ hireDate: 1 })","Retrieve active employees' first name, last name, and email, sorted by hire date in ascending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ department: 'Sales' }),Get employees in the 'Sales' department.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ status: 'Active' }),Get all active employees from the 'employees' collection.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ salary: { $gte: 50000 } }),"Retrieve employees with a salary of at least 50,000."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ hireDate: { $gte: new Date('2020-01-01') } }),"Get employees hired on or after January 1, 2020."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ email: { $regex: '@gmail\.com$' } });,Retrieve employees whose email addresses end with '@gmail.com'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ location: 'New York' });,Get documents from the 'departments' collection with the location 'New York'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ budget: { $lt: 100000 } });,"Find departments with a budget under 100,000."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ status: 'Approved' }),Get all leave records with an 'Approved' status.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ leaveType: 'Sick Leave' }),Get the leave records where the leave type is 'Sick Leave'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ employeeId: ObjectId('605c72f23a00b4bcf03a8d71') }),Get all leave records for the employee with ID '605c72f23a00b4bcf03a8d71'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ managerId: ObjectId('605c72f23a00b4bcf03a8d70') });,Get the employees whose manager ID is '605c72f23a00b4bcf03a8d70'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ position: { $in: ['Developer', 'Designer'] } });",Retrieve employees who are either 'Developer' or 'Designer'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.findOne({ employeeId: 'E12345' });,Get the employee document with employeeId 'E12345'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.findOne({ name: 'Human Resources' });,Get one department document where the name is 'Human Resources'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ appliedDate: { $gte: new Date('2023-01-01') } });,"Get leave records where the applied date is on or after January 1, 2023."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ firstName: 'John', lastName: 'Doe' })",Get employees with the first name 'John' and last name 'Doe'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ headId: ObjectId('605c72f23a00b4bcf03a8d72') }),Retrieve departments where the headId is '605c72f23a00b4bcf03a8d72'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ 'EmergencyContact.relationship': 'Brother' });,Retrieve employees with an emergency contact labeled as 'Brother'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ phone: { $regex: '^123' } });,Get employees from the 'employees' collection whose phone numbers begin with '123'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ endDate: { $lte: new Date() } });,Get leave records where the end date is today or earlier.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.find({ status: 'approved' }, { employeeId: 1, leaveType: 1, startDate: 1, endDate: 1, reason: 1, appliedDate: 1 })","Retrieve approved leave records, including 'employeeId', 'leaveType', 'startDate', 'endDate', 'reason', and 'appliedDate'."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $group: { _id: ""$department"", totalSalary: { $sum: ""$salary"" } } }])",Group employees by department and calculate the total salary for each department.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ status: 'active' }).sort({ hireDate: -1 });,"Retrieve active employees from the 'employees' collection, sorted by hire date in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([{ $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'departmentHead' } }])","Retrieve departments and include their corresponding employee documents where 'headId' matches '_id', naming the resulting field 'departmentHead'."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $match: { status: 'approved' } }, { $group: { _id: '$leaveType', totalLeaves: { $sum: 1 } } }])",Get the count of approved leave records grouped by leave type.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ department: 'Sales' }, { firstName: 1, lastName: 1, salary: 1 });","Get the first name, last name, and salary of employees in the Sales department."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([{ $group: { _id: ""$location"", averageBudget: { $avg: ""$budget"" } } }])",Group departments by location and calculate the average budget for each location.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find({ startDate: { $gte: new Date('2023-01-01') } }).sort({ startDate: 1 });,"Get all leave records with a 'startDate' on or after January 1, 2023, sorted by 'startDate' ascending."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { managerId: { $ne: null } } }, { $lookup: { from: 'employees', localField: 'managerId', foreignField: '_id', as: 'managerDetails' } } ])",Retrieve employees who have a manager and include their manager details.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $group: { _id: ""$position"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Group employees by position and count them, then sort the counts in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", leaveCount: { $sum: 1 } } }, { $match: { leaveCount: { $gt: 5 } } } ])",Count leave records for each employee and include only those with more than 5 records.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({}).sort({ createdAt: -1 }).limit(5);,Get the last five departments sorted by creation date in descending order.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveInfo' } }, { $unwind: '$leaveInfo' }, { $match: { 'leaveInfo.status': 'pending' } }])",Retrieve all employees and their leave information where the leave status is 'pending'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $match: { status: 'approved' } }, { $group: { _id: '$approvedBy', count: { $sum: 1 } } }])","Count the approved leave records in the 'leaveRecords' collection, grouped by the approver's ID."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ status: 'inactive' }, { firstName: 1, lastName: 1, department: 1 })","Get the first name, last name, and department of inactive employees."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.find({ budget: { $gt: 100000 } }, { name: 1, location: 1 });","Retrieve the names and locations of departments with a budget over 100,000."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $group: { _id: ""$reason"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Group 'leaveRecords' by 'reason' and count occurrences, sorting results in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $project: { firstName: 1, lastName: 1, 'departmentDetails.description': 1 } }])",Get the first and last names of employees along with their department descriptions from the 'employees' and 'departments' collections.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.countDocuments({ endDate: { $lt: new Date() } }),Count expired leave records where the endDate is before today.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find().sort({ salary: -1 }).limit(10);,Retrieve the top 10 employees with the highest salaries from the 'employees' collection.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", lastUpdated: { $max: ""$lastUpdated"" } } }, { $sort: { lastUpdated: -1 } } ])","Group leave records by employee ID and find the latest lastUpdated date for each employee, sorted in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $match: { status: 'active' } }, { $group: { _id: '$department', totalSalary: { $sum: '$salary' } } }])",Get the total salary of active employees grouped by department.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([{ $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $project: { name: 1, headId: 1, employeeCount: { $size: '$employees' } } }])",Aggregate departments with their employee count by joining the 'departments' collection with the 'employees' collection on department ID.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $match: { status: 'approved' } }, { $group: { _id: '$leaveType', totalLeaves: { $sum: { $subtract: ['$endDate', '$startDate'] } } } } ])","Aggregate approved leave records by leave type to calculate the total number of days taken, using the difference between end date and start date."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_info' } }, { $unwind: '$department_info' }, { $sort: { 'department_info.budget': -1 } } ])","Join the 'employees' collection with 'departments' on the 'department' field in employees and the 'name' field in departments, unwind the results, and sort by department budget in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.departments.find({ location: 'New York' }).sort({ createdAt: -1 });,"Get the departments located in New York, sorted by created date in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { managerId: { $ne: null } } }, { $group: { _id: ""$managerId"", totalEmployees: { $sum: 1 } } } ])","Get the count of employees grouped by their managerId from the employees collection, where managerId is not null."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $group: { _id: ""$employeeId"", totalLeaves: { $sum: 1 } } }, { $match: { totalLeaves: { $gt: 5 } } }])","Group leave records by 'employeeId' to count the total leaves per employee, filtering for those who took more than 5 leaves."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $group: { _id: ""$position"", averageSalary: { $avg: ""$salary"" } } }, { $sort: { averageSalary: -1 } }]);","Group employees by position and calculate the average salary for each, sorting the results in descending order of average salary."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $match: { department: ""Sales"" } }, { $lookup: { from: 'leaveRecords', localField: 'employeeId', foreignField: 'employeeId', as: 'leaveInfo' } }])",Get employees in the 'Sales' department along with their leave information.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $match: { approvedBy: { $ne: null } } }, { $group: { _id: ""$approvedBy"", leaveCount: { $sum: 1 } } }])","Count the leave records for each approver in the 'leaveRecords' collection, excluding records where 'approvedBy' is null."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $lookup: { from: 'leaveRecords', localField: 'employeeId', foreignField: 'employeeId', as: 'leaves' } }, { $project: { firstName: 1, lastName: 1, totalLeaves: { $size: '$leaves' } } }])","Aggregate employees with their leave records, showing first name, last name, and total number of leaves."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([{ $group: { _id: null, totalBudget: { $sum: ""$budget"" } } }])",Sum the 'budget' field from all documents in the 'departments' collection to calculate the total budget.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $match: { startDate: { $gte: new Date('2023-01-01') }, status: 'approved' } }, { $count: 'approvedLeaveCount' } ]);","Count the approved leave records from the 'leaveRecords' collection with a 'startDate' on or after January 1, 2023."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([{ $group: { _id: ""$department"", highestSalary: { $max: ""$salary"" } } }])",Group employees by department and find the highest salary in each department.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $group: { _id: ""$leaveType"", averageDuration: { $avg: { $subtract: [""$endDate"", ""$startDate""] } } } }, { $sort: { averageDuration: -1 } } ])","Compute the average leave duration for each leave type, group by 'leaveType', and sort by average duration in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.find({ ""EmergencyContact.relationship"": ""Parent"" }).sort({ hireDate: 1 });","Find employees with an emergency contact relationship of 'Parent', sorted by hire date in ascending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([{ $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'head' } }, { $project: { name: 1, headFirstName: { $arrayElemAt: ['$head.firstName', 0] } } }])","Retrieve the names of all departments and the first names of their heads from the employees collection, using the headId field."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $match: { status: 'pending' }}, { $group: { _id: '$employeeId', count: { $sum: 1 } }}])",Count pending leave records grouped by employee ID.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $unwind: '$departmentDetails' }, { $addFields: { departmentBudget: '$departmentDetails.budget' } } ])","Retrieve employee information from the 'employees' collection and add each employee's department budget from the 'departments' collection, matching the department field in employees with the name field in departments."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.leaveRecords.find().sort({ appliedDate: -1 }).limit(1),Get the most recent leave record from the 'leaveRecords' collection based on 'appliedDate'.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_info' } }, { $unwind: '$department_info' }, { $group: { _id: '$department_info.name', totalSalary: { $sum: '$salary' }, employeeCount: { $sum: 1 } } } ])","Aggregate data from the 'employees' collection by joining it with the 'departments' collection based on the department field, creating an array 'department_info' for matched details. Unwind this array and group by department name to calculate total salary and employee count."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $group: { _id: '$leaveType', totalLeaves: { $sum: 1 }, leaveStatus: { $push: '$status' } } }, { $match: { totalLeaves: { $gt: 5 } } }])","Group leave records by leave type, count the total leaves for each type, collect their statuses, and filter to show only types with more than 5 leaves."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $unwind: '$employees' }, { $group: { _id: '$name', averageSalary: { $avg: '$employees.salary' } } } ])","Get the average salary of employees grouped by department name, joining the 'employees' collection with the 'departments' collection."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { status: 'active' } }, { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveRecords' } }, { $unwind: { path: '$leaveRecords', preserveNullAndEmptyArrays: true } }, { $group: { _id: '$firstName', totalApprovedLeaves: { $sum: { $cond: [ { $eq: ['$leaveRecords.status', 'approved'] }, 1, 0 ] } } } } ]);","Retrieve active employees and their leave records, unwinding the records and grouping by first name to count approved leave records."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([ { $group: { _id: '$location', totalBudget: { $sum: '$budget' }, departmentCount: { $sum: 1 } } }, { $sort: { totalBudget: -1 } } ])","Group the departments by location, calculate the total budget and count of departments for each location, and sort by total budget in descending order."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $group: { _id: '$managerId', employeeCount: { $sum: 1 } } }, { $lookup: { from: 'employees', localField: '_id', foreignField: 'employeeId', as: 'managers' } }, { $unwind: '$managers' }, { $project: { managerName: { $concat: ['$managers.firstName', ' ', '$managers.lastName'] }, employeeCount: 1 } } ])","Count employees under each manager by grouping the 'employees' collection by 'managerId', then join with the same collection to get manager names and total counts."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $group: { _id: { $year: '$startDate' }, totalLeaves: { $sum: 1 }, approvedLeaves: { $sum: { $cond: [ { $eq: ['$status', 'approved'] }, 1, 0 ] } } } } ]);","Group leave records by the year of 'startDate', counting total leaves and approved leaves (only where status is 'approved')."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $project: { name: 1, employeeCount: { $size: '$employees' }, averageSalary: { $avg: '$employees.salary' } } } ])","Aggregate the 'departments' collection, joining it with the 'employees' collection on department ID, to get the department name, count of employees, and average salary."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { status: 'active' } }, { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveRecords' } }, { $unwind: { path: '$leaveRecords', preserveNullAndEmptyArrays: true } }, { $group: { _id: '$_id', totalLeaveDays: { $sum: { $subtract: ['$leaveRecords.endDate', '$leaveRecords.startDate'] } } } } ]);","Get active employees and their leave records, calculating total leave days by subtracting 'startDate' from 'endDate', grouped by employee ID."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveRecords' } }, { $unwind: '$leaveRecords' }, { $match: { 'leaveRecords.status': 'approved' } }, { $group: { _id: '$_id', totalApprovedLeaves: { $sum: 1 } } } ]);",Get the count of approved leaves for each employee by joining the 'employees' and 'leaveRecords' collections and summing approved leaves per employee.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $match: { status: 'pending' } }, { $group: { _id: '$employeeId', pendingLeaveCount: { $sum: 1 } } }, { $lookup: { from: 'employees', localField: '_id', foreignField: 'employeeId', as: 'employeeDetails' } } ])","Aggregate pending leave records by employeeId, counting the number of pending leaves and including corresponding employee details."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.departments.aggregate([ { $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'departmentHead' } }, { $project: { name: 1, headName: { $concat: [{ $arrayElemAt: ['$departmentHead.firstName', 0] }, ' ', { $arrayElemAt: ['$departmentHead.lastName', 0] }] } }, budget: 1 } } ]);","Aggregate the 'departments' collection, joining with 'employees' on 'headId' to '_id'. Select the department name, concatenate the head's first and last names, and include the department budget."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { position: 'Software Engineer' } }, { $group: { _id: '$department', averageSalary: { $avg: '$salary' }, employeeCount: { $sum: 1 } } } ])","Get the average salary and the number of employees in the 'employees' collection who are 'Software Engineers', grouped by department."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([ { $group: { _id: '$reason', totalCount: { $sum: 1 } } }, { $sort: { totalCount: -1 } }, { $limit: 5 } ])","Group the leave records by reason, count occurrences for each reason, sort by count in descending order, and limit to the top five reasons."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { salary: { $gt: 70000 } } }, { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $project: { firstName: 1, lastName: 1, department: { $arrayElemAt: ['$departmentDetails', 0] } } } ])","Get employees with a salary above 70,000, including their first name, last name, and first department detail."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $match: { status: 'approved' }}, { $group: { _id: null, totalHours: { $sum: { $divide: [{ $subtract: ['$endDate', '$startDate'] }, 3600000] } } } } }])",Calculate the total approved leave hours from the 'leaveRecords' collection by summing the duration of each approved leave record.
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_info' } }, { $unwind: '$department_info' }, { $group: { _id: '$department_info.headId', totalSalaries: { $sum: '$salary' } } } ])","Aggregate employee data with department information, grouping by department head ID and summing salaries."
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.leaveRecords.aggregate([{ $match: { status: 'approved' } }, { $lookup: { from: 'employees', localField: 'approvedBy', foreignField: '_id', as: 'approverInfo' } }, { $unwind: '$approverInfo' }, { $group: { _id: '$approverInfo.firstName', totalApprovedLeaves: { $sum: 1 } } }])","Count approved leave records from 'leaveRecords', grouped by the first names of the approvers from 'employees'."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true });,Retrieve active products from the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ category: 'Electronics' }),Retrieve products in the 'Electronics' category.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ price: { $lt: 100 } }),Get products with a price less than 100.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ stockQuantity: { $gt: 0 } }),Retrieve products with stock quantity greater than zero.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ name: /phone/i });,"Get products from the 'products' collection where the name includes 'phone', case insensitive."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ status: 'Pending' });,Get all orders with a status of 'Pending'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ totalAmount: { $gte: 50 } });,Get all orders with a total amount of at least 50.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ 'shippingAddress.city': 'New York' }),Retrieve orders with a shipping address in New York.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ orderDate: { $gte: new Date('2023-01-01') } });,"Get all orders placed on or after January 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ customerId: 'C123' }),Get all orders for customer 'C123'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.findOne({ _id: ObjectId('60c72b2f9b1df4f3d8e7d921') }),Get the product document with ID '60c72b2f9b1df4f3d8e7d921' from the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.findOne({ _id: ObjectId('60c72b2f9b1df4f3d8e7d933') });,Get the order with the ID '60c72b2f9b1df4f3d8e7d933' from the orders collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ isActive: true, category: 'Home Appliances' })",Retrieve active products from the 'products' collection in the 'Home Appliances' category.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ 'items.productId': ObjectId('60c72b2f9b1df4f3d8e7d921') }),Get all orders that contain a product with the ID '60c72b2f9b1df4f3d8e7d921'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ name: { $exists: true } });,Get all products that have a name.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ paymentMethod: 'Credit Card' }),Get all orders with payment method 'Credit Card'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ description: { $exists: true, $ne: null } });",Retrieve all products where the description is not null.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.find({ 'shippingAddress.country': 'USA', status: 'Shipped' })",Get orders where the shipping address country is 'USA' and the status is 'Shipped'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ stockQuantity: { $lte: 10 } });,Retrieve products with a stock quantity of 10 or less.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ lastUpdated: { $gte: new Date('2023-02-01') } });,"Retrieve all orders updated on or after February 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ createdAt: { $lt: new Date('2022-01-01') } }),"Retrieve products from the 'products' collection created before January 1, 2022."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true }).sort({ price: 1 }),Get all active products sorted by price in ascending order.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({}),Retrieve all products.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true }),Get all active products from the 'products' collection where 'isActive' is true.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ category: 'Electronics' }),Get products from the 'products' collection that belong to the 'Electronics' category.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ price: { $lt: 100 } });,Get products with a price less than 100.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({}),Retrieve all orders.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ status: 'Shipped' }),Get all orders with the status 'Shipped'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ customerId: '12345' });,Get all orders where the customer ID is '12345'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ 'shippingAddress.city': 'New York' });,Get orders from the 'orders' collection where the shipping address city is 'New York'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ stockQuantity: { $gt: 0 } });,Get the products with stock quantity greater than zero.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ totalAmount: { $gte: 50 } });,Retrieve orders where the total amount is at least 50.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ name: { $regex: 'phone', $options: 'i' } });","Find products with names containing 'phone', case insensitive."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ orderDate: { $gte: new Date('2023-01-01') } });,"Get all orders placed on or after January 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ createdAt: { $lt: new Date('2022-01-01') } }),"Find products created before January 1, 2022."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ name: 'Laptop', isActive: true });",Get active products with the name 'Laptop' from the products collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ paymentMethod: 'Credit Card' });,Get all orders with the payment method 'Credit Card'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ category: 'Furniture', isActive: false });",Retrieve inactive products from the 'Furniture' category.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.find({ 'items.quantity': { $gt: 2 }, status: 'Pending' });",Retrieve all orders where any item has a quantity greater than 2 and the status is 'Pending'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ price: { $gt: 500, $lt: 1500 } });",Find products with a price between 500 and 1500.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ lastUpdated: { $gte: new Date('2023-01-01') } });,"Retrieve all orders updated on or after January 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ 'items.productId': ObjectId('60d5b2d319c8e93d8e4e2a01') });,Retrieve orders that contain items with product ID '60d5b2d319c8e93d8e4e2a01'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ description: { $regex: 'wireless', $options: 'i' } })","Fetch products from the 'products' collection with a description that includes the word 'wireless', case insensitive."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $match: { status: 'shipped' } }, { $unwind: '$items' }, { $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productInfo' } }, { $project: { customerId: 1, 'items.quantity': 1, 'items.price': 1, totalAmount: 1, shippingAddress: 1, orderDate: 1, productInfo: 1 } } ])",Retrieve all shipped orders with related product information from the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true }),Retrieve active products from the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $match: { category: 'Electronics' } }, { $group: { _id: null, averagePrice: { $avg: '$price' } } }]);",Find the average price of products in the 'Electronics' category.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ status: 'Shipped' }).sort({ orderDate: -1 });,"Get orders with status 'Shipped', sorted by order date in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { paymentMethod: ""Credit Card"" } }, { $group: { _id: ""$customerId"", totalSpending: { $sum: ""$totalAmount"" } } }]);",Aggregate orders with 'Credit Card' payment method by customer ID to calculate total spending.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ stockQuantity: { $lt: 10 } });,Get products with a stock quantity less than 10.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $unwind: ""$items"" }, { $group: { _id: ""$items.productId"", totalQuantitySold: { $sum: ""$items.quantity"" } } }]);",Unwind the items in the orders and group by product ID to calculate the total quantity sold for each product.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ category: 'Books' }).sort({ price: 1 }).limit(5);,"Get the first five products from the 'products' collection in the 'Books' category, sorted by price in ascending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { orderDate: { $gte: new Date('2023-01-01') } } }, { $count: 'totalOrders' }])","Count the total number of orders from the 'orders' collection with an 'orderDate' on or after January 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ name: { $regex: 'phone', $options: 'i' } });","Find products in the 'products' collection where the name contains 'phone', ignoring case."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { status: 'Pending' } }, { $group: { _id: null, total: { $sum: '$totalAmount' } } }]);",Calculate the total of all pending orders.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $group: { _id: ""$category"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Count and group products by category, then sort the groups by count in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productDetails' } }, { $unwind: '$productDetails' }, { $match: { 'productDetails.category': 'Electronics' } }]);",Retrieve all orders with product details for products in the 'Electronics' category.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ 'shippingAddress.city': 'New York' });,Get orders from the 'orders' collection with a shipping address city of 'New York'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ price: { $gte: 20, $lte: 100 } }, { name: 1, price: 1 });","Retrieve products with a price between 20 and 100, including only the name and price."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $group: { _id: { $year: ""$orderDate"" }, totalOrders: { $sum: 1 } } }])",Group the orders by year of order date and count the total orders for each year.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ totalAmount: { $gt: 500 } }).sort({ orderDate: 1 });,"Retrieve orders with a total amount greater than 500, sorted by order date in ascending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $group: { _id: ""$isActive"", count: { $sum: 1 } } }])",Count the number of products grouped by their 'isActive' status.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.updateMany({ status: 'Cancelled' }, { $set: { lastUpdated: new Date() } });",Update all orders with status 'Cancelled' to set lastUpdated to the current date and time.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ createdAt: { $gte: new Date('2022-01-01') } }),"Fetch products created on or after January 1, 2022."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.find({ orderDate: { $gte: new Date('2023-01-01') } }, { customerId: 1, totalAmount: 1 });","Fetch the 'customerId' and 'totalAmount' from orders where 'orderDate' is on or after January 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true }).sort({ price: 1 }),Get all active products sorted by price in ascending order.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { status: 'Shipped' } }, { $group: { _id: '$customerId', totalSpent: { $sum: '$totalAmount' } } }]);","Get the total amount spent by each customer from the 'orders' collection for orders with status 'Shipped', grouped by customer ID."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $match: { isActive: true } }, { $sort: { price: 1 } }, { $group: { _id: '$category', averagePrice: { $avg: '$price' } } }])","Get active products from the 'products' collection, sorted by price in ascending order, and calculate the average price for each category."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $group: { _id: { $dateToString: { format: ""%Y-%m"", date: ""$orderDate"" } }, totalOrders: { $sum: 1 }, totalRevenue: { $sum: ""$totalAmount"" } } }, { $sort: { _id: 1 } }])","Group orders by month of 'orderDate' to calculate total orders and total revenue for each month, then sort by month in ascending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.find({ paymentMethod: 'Credit Card', orderDate: { $gte: new Date('2023-01-01') } });","Get orders with a payment method of 'Credit Card' placed on or after January 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $lookup: { from: 'orders', localField: '_id', foreignField: 'items.productId', as: 'orderDetails' } }, { $match: { 'orderDetails.0': { $exists: true } } }])",Retrieve products that have been ordered at least once from the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $unwind: '$items' }, { $group: { _id: '$items.productId', totalQuantity: { $sum: '$items.quantity' }, totalRevenue: { $sum: { $multiply: ['$items.quantity', '$items.price'] } } } }, { $sort: { totalQuantity: -1 } }])","Aggregate order items by unwinding the 'items' array, grouping by 'productId' to calculate total quantity sold and total revenue, then sorting by quantity sold in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ stockQuantity: { $lt: 10 }, isActive: true })",Get active products with a stock quantity less than 10 from the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { status: 'Pending' } }, { $group: { _id: '$customerId', count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Count the pending orders in the 'orders' collection, grouped by 'customerId', and sort the results by count in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ 'shippingAddress.city': 'New York' });,Get orders with a shipping address in New York.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $group: { _id: '$category', totalStock: { $sum: '$stockQuantity' } } }, { $sort: { totalStock: -1 } }])","Group products by category and sum the stock quantity for each, sorting the results by total stock quantity in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { status: 'Completed' } }, { $group: { _id: '$customerId', orderCount: { $sum: 1 }, totalAmount: { $sum: '$totalAmount' } } }, { $sort: { totalAmount: -1 } }])","Get the count and total amount of completed orders grouped by customerId, sorted by total amount in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ price: { $gte: 50, $lt: 100 }, isActive: true });",Retrieve active products with a price between 50 and 100 from the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $group: { _id: { $year: '$orderDate' }, totalOrders: { $sum: 1 }, totalAmount: { $sum: '$totalAmount' } } }, { $sort: { _id: 1 } } ]);","Group orders by the year of 'orderDate' and calculate the total number of orders and total amount for each year, sorted by year in ascending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ category: 'Electronics', description: /wireless/i });","Find products in the 'Electronics' category with a description that includes the word 'wireless', case insensitive."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { totalAmount: { $gte: 100 } } }, { $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productDetails' } }])","Retrieve all orders where the total amount is at least 100, including details of the related products based on the product IDs in the order items."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true }).sort({ createdAt: -1 }).limit(5);,"Fetch the five most recently created active products from the 'products' collection, sorted by creation date in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.orders.find({ lastUpdated: { $lte: new Date('2023-01-01T00:00:00Z') } });,"Retrieve orders with a 'lastUpdated' date on or before January 1, 2023."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $group: { _id: '$category', totalValue: { $sum: { $multiply: ['$price', '$stockQuantity'] } } } }])","Calculate the total value of products for each category by summing the product of price and stock quantity, grouped by category."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productItems' } }, { $unwind: '$productItems' }, { $match: { 'productItems.price': { $gte: 20 } } }])","Aggregate data from the 'orders' collection, joining with the 'products' collection to match order item product IDs with product IDs, include product information as 'productItems', unwind these items, and filter for orders where product prices are at least 20."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.findOne({ customerId: '12345', status: 'Refunded' });",Retrieve one order with 'customerId' '12345' and status 'Refunded'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $match: { isActive: true } }, { $project: { name: 1, price: 1, stockQuantity: { $divide: ['$stockQuantity', 2] } } }])","Retrieve active products from the 'products' collection, including the name, price, and half of the stock quantity."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $unwind: ""$items"" }, { $group: { _id: ""$items.productId"", totalSold: { $sum: ""$items.quantity"" } } }, { $lookup: { from: ""products"", localField: ""_id"", foreignField: ""_id"", as: ""productInfo"" } }, { $project: { productName: { $arrayElemAt: [""$productInfo.name"", 0] }, totalSold: 1 } } ])","Aggregate order data by unwinding the 'items' array, grouping by productId to calculate total quantity sold, looking up related product information, and projecting product name and total quantity sold."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $match: { isActive: true }}, { $group: { _id: ""$category"", totalProducts: { $sum: 1 }, totalStock: { $sum: ""$stockQuantity"" }}}, { $sort: { price: 1 }}])","Retrieve active product categories, counting the total products and stock quantity for each category, sorted by price."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $match: { status: 'Shipped' } }, { $group: { _id: '$customerId', totalSpent: { $sum: '$totalAmount' }, totalOrders: { $sum: 1 } } }, { $sort: { totalSpent: -1 } } ])","Aggregate orders where the status is 'Shipped', grouping by customer ID to calculate total spent and total orders, sorted by total spent in descending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.find({ stockQuantity: { $lt: 10 }, isActive: true }, { name: 1, stockQuantity: 1 })",Get the names and stock quantities of active products with stock less than 10.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $match: { paymentMethod: 'Credit Card' } }, { $group: { _id: '$shippingAddress.city', totalOrders: { $sum: 1 }, totalAmount: { $sum: '$totalAmount' } } } ])","Get the count and total amount of orders from the 'orders' collection for 'Credit Card' payments, grouped by city from the shipping address."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $group: { _id: { year: { $year: ""$orderDate"" }, month: { $month: ""$orderDate"" } }, totalSales: { $sum: ""$totalAmount"" } } }, { $sort: { ""_id.year"": 1, ""_id.month"": 1 } } ])","Group orders by year and month of 'orderDate', summing total sales, and sort results by year and month."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $lookup: { from: 'orders', let: { productId: '$_id' }, pipeline: [{ $unwind: '$items' }, { $match: { $expr: { $eq: ['$$productId', '$items.productId'] } } }, { $count: 'totalOrders' }], as: 'orderDetails' } }, { $project: { name: 1, stockQuantity: 1, totalOrders: { $ifNull: [{ $arrayElemAt: ['$orderDetails.totalOrders', 0] }, 0] } } }])","Retrieve the product name, stock quantity, and total number of orders for each product from the 'products' collection, using the order details from the 'orders' collection based on matching product IDs."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $unwind: ""$items"" }, { $group: { _id: ""$items.productId"", totalRevenue: { $sum: { $multiply: [""$items.quantity"", ""$items.price""] } } } }, { $lookup: { from: ""products"", localField: ""_id"", foreignField: ""_id"", as: ""productInfo"" } }, { $project: { productName: { $arrayElemAt: [""$productInfo.name"", 0] }, totalRevenue: 1 } } ]);","Aggregate orders by unwinding the 'items' array, grouping by product ID, calculating total revenue, and retrieving the product name from the 'products' collection."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([ { $match: { price: { $gt: 100 } } }, { $group: { _id: ""$category"", averagePrice: { $avg: ""$price"" } } } ])",Get the average price of products in each category where the price exceeds 100.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $match: { orderDate: { $gte: new Date('2023-01-01'), $lte: new Date('2023-12-31') } } }, { $group: { _id: '$status', count: { $sum: 1 } } } ])",Count orders grouped by status for the year 2023.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { status: 'Completed' } }, { $group: { _id: '$customerId', totalSpent: { $sum: '$totalAmount' }, totalItems: { $sum: { $sum: '$items.quantity' } } } }])","Get the total amount spent and total quantity of items ordered by each customer from completed orders, grouped by customer ID."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $match: { 'shippingAddress.country': 'USA' } }, { $group: { _id: null, totalOrders: { $sum: 1 }, totalRevenue: { $sum: '$totalAmount' } } }])",Count the total orders and total revenue from the 'orders' collection with shipping addresses in the 'USA'.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([ { $match: { isActive: true } }, { $group: { _id: { $year: ""$createdAt"" }, totalProducts: { $sum: 1 } } }, { $sort: { _id: 1 } } ])","Get the count of active products from the 'products' collection, grouped by the year of creation and sorted by year in ascending order."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([{ $unwind: ""$items"" }, { $lookup: { from: ""products"", localField: ""items.productId"", foreignField: ""_id"", as: ""productDetails"" } }, { $unwind: ""$productDetails"" }, { $group: { _id: ""$productDetails.category"", totalOrders: { $sum: 1 } } }])","Aggregate orders by joining the 'products' collection to retrieve product details using product IDs from order items, unwind the results, and group by product category to count total orders for each category."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([ { $group: { _id: ""$category"", totalStock: { $sum: ""$stockQuantity"" }, totalActive: { $sum: { $cond: [ ""$isActive"", 1, 0 ] } } } } ]);","Group documents from the 'products' collection by category, summing the total stock quantity and counting active products for each category."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $match: { status: 'Pending' } }, { $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productDetails' } }, { $unwind: '$productDetails' }, { $group: { _id: '$productDetails.name', totalPendingOrders: { $sum: 1 } } } ]);",Retrieve all pending orders and count the number of orders for each product by joining the orders with product details.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $match: { stockQuantity: { $gte: 0 }, isActive: true } }, { $project: { name: 1, stockValue: { $multiply: ['$price', '$stockQuantity'] } } }])","Retrieve products where 'stockQuantity' is at least zero and 'isActive' is true, showing the 'name' and calculating 'stockValue' as the product of 'price' and 'stockQuantity'."
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productDetails' } }, { $unwind: '$productDetails' }, { $match: { 'productDetails.price': { $gt: 200 } } }, { $group: { _id: '$customerId', totalCount: { $sum: 1 } } } ])",Count the expensive items (price > 200) for each customer by merging order items with product details.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.products.aggregate([{ $group: { _id: null, totalActiveProducts: { $sum: { $cond: ['$isActive', 1, 0] } }, averagePrice: { $avg: '$price' } } } }])",Count the active products and calculate the average price of products in the 'products' collection.
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","[{ $match: { orderDate: { $gte: ISODate('2023-01-01') } } }, { $unwind: '$items' }, { $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productInfo' } }, { $project: { _id: 1, customerId: 1, items: 1, totalAmount: 1, status: 1, paymentMethod: 1, shippingAddress: 1, orderDate: 1, lastUpdated: 1, productInfo: { $arrayElemAt: ['$productInfo', 0] } } }]","Retrieve all orders placed on or after January 1, 2023, including related product information."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({}),Get all documents from the 'projects' collection.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ status: 'completed' }),Get tasks from the 'tasks' collection with a status of 'completed'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ name: 'Design Team' });,Get teams with the name 'Design Team' from the teams collection.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ userId: ObjectId('605c72f756c8a6950c2e2fda') });,Get all timeSheet records for the user with ObjectId '605c72f756c8a6950c2e2fda'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ status: 'ongoing' });,Get all ongoing projects from the 'projects' collection.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ priority: 'high' });,Get all tasks with high priority.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.find({ leadId: ObjectId(""605c72f756c8a6950c2e2fdb"") });",Get all teams where the leadId is '605c72f756c8a6950c2e2fdb'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.find({ date: { $gte: new Date('2023-01-01'), $lte: new Date('2023-12-31') } });","Get timeSheets with a date from January 1, 2023, to December 31, 2023."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ priority: 'urgent' }),Get projects with a priority of 'urgent' from the projects collection.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ assignedTo: ObjectId('605c72f756c8a6950c2e2fda') });,Retrieve tasks assigned to the user with ObjectId '605c72f756c8a6950c2e2fda' from the 'tasks' collection.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ createdAt: { $gte: new Date('2022-01-01') } });,"Get all teams created on or after January 1, 2022."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ projectId: ObjectId('605c72f756c8a6950c2e2fdc') });,Get all timeSheets documents with projectId '605c72f756c8a6950c2e2fdc'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ clientId: ObjectId('605c72f756c8a6950c2e2fde') });,Get all projects associated with the client ID '605c72f756c8a6950c2e2fde' from the projects collection.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ dueDate: { $lt: new Date('2023-05-01') } });,"Retrieve tasks with a due date before May 1, 2023."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ 'Members.userId': ObjectId('605c72f756c8a6950c2e2feb') });,Get teams from the 'teams' collection that include a member with userId '605c72f756c8a6950c2e2feb'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ status: 'submitted' }),Get all time sheets with a status of 'submitted'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ budget: { $gte: 10000 } });,"Retrieve projects with a budget of at least 10,000."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.find({ dependencies: { $exists: true, $eq: [] } });",Retrieve tasks from the 'tasks' collection that have no dependencies.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ name: { $regex: /Team/i } });,"Find teams in the 'teams' collection whose names contain 'Team', ignoring case."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ hours: { $gt: 8 } });,Get time sheets where the logged hours exceed 8.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ startDate: { $lt: ISODate('2023-01-01') } });,"Fetch projects from the 'projects' collection with a 'startDate' before January 1, 2023."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.find({ status: 'completed', assignedTo: userId })",Retrieve all completed tasks assigned to the specified user.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ status: 'active' });,Get all active projects from the 'projects' collection.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ priority: 'high' }).sort({ startDate: 1 });,"Get projects with a 'high' priority from the 'projects' collection, sorted by start date in ascending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ status: 'in-progress' });,Get all tasks with the status 'in-progress'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ dueDate: { $lt: new Date() } });,Get tasks from the 'tasks' collection with a due date before today.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ name: 'Development' });,Get teams with the name 'Development'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ 'Members.role': 'developer' }),Get all teams where a member has the role of 'developer.'
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ userId: ObjectId('60b8d8e5e3d1f378c4f888a1') }),Get all timeSheets records for the user with ObjectId '60b8d8e5e3d1f378c4f888a1'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ projectId: ObjectId('60b8d8e5e3d1f378c4f888a2') }),Get all time sheets with the project ID '60b8d8e5e3d1f378c4f888a2'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ clientId: ObjectId('60b8d8e5e3d1f378c4f888a3') });,Retrieve all projects where the clientId is '60b8d8e5e3d1f378c4f888a3'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ assignedTo: ObjectId('60b8d8e5e3d1f378c4f888a4') }),Get tasks from the 'tasks' collection assigned to the user with ID '60b8d8e5e3d1f378c4f888a4'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ budget: { $gt: 10000 } });,"Find projects in the 'projects' collection with a budget over 10,000."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ createdAt: { $gte: new Date('2023-01-01') } });,"Get all teams created on or after January 1, 2023."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ status: 'submitted' }).sort({ submittedAt: -1 });,"Get all submitted time sheets, sorted by submission date in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.find({ priority: 'low', completedDate: { $exists: true } })",Retrieve tasks with a 'low' priority that are completed.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ startDate: { $gte: new Date('2023-01-01') } });,"Retrieve all projects that start on or after January 1, 2023."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.teams.find({ leadId: ObjectId('60b8d8e5e3d1f378c4f888a5') });,Get all teams where the leadId is '60b8d8e5e3d1f378c4f888a5'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ dependencies: ObjectId('60b8d8e5e3d1f378c4f888a6') });,Retrieve tasks from the 'tasks' collection that depend on the task with ObjectId '60b8d8e5e3d1f378c4f888a6'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ tags: 'urgent' }),Get all projects with the tag 'urgent'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.timeSheets.find({ hours: { $gte: 8 } });,Get all timeSheets documents with 8 or more hours.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ projectId: ObjectId('60b8d8e5e3d1f378c4f888a7') }).sort({ dueDate: 1 });,"Retrieve all tasks for the project with ID '60b8d8e5e3d1f378c4f888a7', sorted by due date ascending."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ endDate: { $lt: new Date() } }).sort({ endDate: -1 });,"Fetch projects with an 'endDate' before today, sorted by 'endDate' in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","[{'$match': {'status': 'ongoing'}}, {'$lookup': {'from': 'tasks', 'localField': '_id', 'foreignField': 'projectId', 'as': 'tasks'}}]",Retrieve all ongoing projects and their corresponding tasks.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $match: { status: 'ongoing' } }, { $group: { _id: '$priority', totalBudget: { $sum: '$budget' } } }]);","Get the total budget for ongoing projects, grouped by priority."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([{ $match: { status: 'completed' } }, { $group: { _id: ""$projectId"", count: { $sum: 1 } } }])","Count completed tasks in the 'tasks' collection, grouped by project ID."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([{ $lookup: { from: 'projects', localField: 'projects', foreignField: '_id', as: 'projectDetails' } }, { $unwind: '$projectDetails' }, { $group: { _id: '$leadId', teamName: { $first: '$name' }, projectCount: { $sum: 1 } } }]);","Aggregate teams and their project details, then group by team ID, selecting the team name and counting associated projects."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" } } }, { $sort: { totalHours: -1 } }])","Group the timeSheets by userId and sum the hours for each user, then sort the results in descending order by total hours."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.find({ clientId: ObjectId('60d21b4667d0d8992e610c85') }, { name: 1, budget: 1, status: 1 })","Get the names, budgets, and statuses of projects for the client with ID '60d21b4667d0d8992e610c85'."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([{ $match: { priority: { $in: [""high"", ""medium""] } } }, { $group: { _id: ""$priority"", count: { $sum: 1 } } }])","Count tasks with 'high' or 'medium' priority, grouped by priority."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([{ $lookup: { from: 'tasks', localField: 'projects', foreignField: 'projectId', as: 'taskDetails' } }, { $unwind: '$taskDetails' }, { $match: { 'taskDetails.status': 'in-progress' } }])",Retrieve team details and related tasks marked as 'in-progress' from the 'teams' and 'tasks' collections.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $match: { status: 'approved' } }, { $group: { _id: '$projectId', totalApprovedHours: { $sum: '$hours' } } }])","Get the total hours from 'timeSheets' where the status is 'approved', grouped by projectId."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $lookup: { from: 'teams', localField: 'managerId', foreignField: 'leadId', as: 'managedTeams' } }, { $match: { 'managedTeams.name': { $regex: 'Team A', $options: 'i' } } }]);",Retrieve all projects and their associated teams where the team's lead ID matches the project's manager ID and the team's name contains 'Team A'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ assignedTo: ObjectId('60d21b4667d0d8992e610c84') }).sort({ dueDate: 1 });,"Get tasks assigned to the user with ID '60d21b4667d0d8992e610c84', sorted by due date in ascending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $group: { _id: ""$date"", totalHours: { $sum: ""$hours"" } } }, { $sort: { _id: 1 } }])","Group the timeSheets by date and sum the hours worked for each date, sorted in ascending order by date."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.find({ startDate: { $gt: new Date('2022-01-01') } }, { name: 1, endDate: 1, status: 1 });","Fetch projects starting after January 1, 2022, showing only the 'name', 'endDate', and 'status'."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([{ $lookup: { from: 'projects', localField: 'projectId', foreignField: '_id', as: 'projectDetails' } }, { $match: { 'projectDetails.status': 'completed' } }])",Get all tasks and their related projects where the project status is 'completed'.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([{ $project: { name: 1, totalMembers: { $size: ""$Members"" } } }, { $sort: { totalMembers: -1 } }])","Get the names of teams and the total number of members in each team, sorted by total members in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $match: { userId: ObjectId('60d21b4667d0d8992e610c84') } }, { $group: { _id: '$taskId', totalHours: { $sum: '$hours' } } }])","Get the total hours spent on each task by the user with ID '60d21b4667d0d8992e610c84', grouped by task ID."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $group: { _id: ""$clientId"", totalBudget: { $sum: ""$budget"" } } }, { $sort: { totalBudget: -1 } }])","Group projects by clientId and calculate the total budget for each client, then sort by total budget in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([{ $group: { _id: ""$priority"", avgCompletionTime: { $avg: { $subtract: [""$completedDate"", ""$dueDate""] } } } } }])",Group tasks by priority and calculate the average time to complete each task as the difference between the completed date and due date.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $match: { projectId: ObjectId(""60d21b4667d0d8992e610c87"") } }, { $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" } } }]);","Get the total hours logged for the project with ID '60d21b4667d0d8992e610c87', grouped by user ID."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([{ $lookup: { from: 'tasks', localField: 'projects', foreignField: 'projectId', as: 'taskDetails' } }, { $project: { teamName: '$name', taskTitle: '$taskDetails.title' } }]);","Retrieve team names from the 'teams' collection and the titles of their associated tasks from the 'tasks' collection, preserving teams with no associated tasks."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $addFields: { duration: { $subtract: [ '$endDate', '$startDate' ] } } }, { $match: { duration: { $gt: 604800000 } } }]);",Retrieve projects from the 'projects' collection where the duration (endDate - startDate) exceeds 604800000 milliseconds.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.find({assignedTo: {$ne: []}, status: 'completed'}).populate('projectId')","Retrieve completed tasks assigned to users, along with their associated projects."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $match: { status: 'active' } }, { $group: { _id: '$managerId', totalBudget: { $sum: '$budget' } } }])","Get the total budget for active projects, grouped by manager ID."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([{ $match: { status: 'completed' } }, { $group: { _id: '$projectId', count: { $sum: 1 } } }])","Count completed tasks from the 'tasks' collection, grouped by project IDs."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([ { $lookup: { from: 'projects', localField: 'projects', foreignField: '_id', as: 'projectDetails' } }, { $unwind: '$projectDetails' }, { $group: { _id: '$_id', totalProjects: { $sum: 1 }, firstProject: { $first: '$projectDetails.name' } } } ])","Aggregate teams with their associated projects, unwinding project details and grouping by team ID to count total projects and capture the first project's name."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([ { $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" }, tasksCount: { $sum: 1 } } }, { $match: { totalHours: { $gt: 40 } } } ]);","Group the 'timeSheets' entries by 'userId' to sum the hours worked and count the tasks, including only users with over 40 logged hours."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([ { $lookup: { from: 'teams', localField: 'managerId', foreignField: 'leadId', as: 'teamDetails' } }, { $match: { 'teamDetails.name': 'Development' } } ])","Retrieve projects and their related team details where the project manager is the team lead, filtering for teams named 'Development'."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([ { $lookup: { from: 'projects', localField: 'projectId', foreignField: '_id', as: 'projectInfo' } }, { $match: { 'projectInfo.priority': 'high' } }, { $sort: { dueDate: 1 } } ])","Retrieve all tasks from the 'tasks' collection along with their related project information, filtering for projects with a 'high' priority, and sort the tasks by due date in ascending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $match: { status: 'pending' } }, { $group: { _id: '$projectId', pendingCount: { $sum: 1 } } }])",Get the number of pending time sheets grouped by project ID.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $group: { _id: ""$clientId"", totalProjects: { $sum: 1 }, totalBudget: { $sum: ""$budget"" } } }, { $sort: { totalBudget: -1 } }])","Group projects by 'clientId', count the projects and sum the budgets for each client, then sort by total budget in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([ { $lookup: { from: 'timeSheets', localField: 'projects', foreignField: 'projectId', as: 'timeEntries' } }, { $unwind: '$timeEntries' }, { $group: { _id: '$_id', totalHours: { $sum: '$timeEntries.hours' } } } ])","Join 'teams' with 'timeSheets' using project IDs, flatten the results, and group by team ID to calculate total hours recorded."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([ { $match: { priority: 'high' } }, { $lookup: { from: 'timeSheets', localField: '_id', foreignField: 'taskId', as: 'timeRecords' } }, { $addFields: { timeSpent: { $sum: '$timeRecords.hours' } } }, { $project: { title: 1, timeSpent: 1 } } ]);",Retrieve all high-priority tasks and include the total hours recorded in the timeSheets for each task.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $lookup: { from: 'tasks', localField: '_id', foreignField: 'projectId', as: 'taskInfo' } }, { $project: { name: 1, taskCount: { $size: '$taskInfo' } } }]);",Get project names and the number of tasks for each project.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $group: { _id: ""$date"", totalHours: { $sum: ""$hours"" } } }, { $sort: { _id: 1 } }])","Group the timeSheets by date and sum the hours for each date, then sort the results by date in ascending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([ { $match: { completedDate: { $ne: null } } }, { $group: { _id: ""$assignedTo"", completedTaskCount: { $sum: 1 } } }, { $sort: { completedTaskCount: -1 } } ])","Count completed tasks grouped by users assigned, including only tasks with a non-null completed date, sorted by count in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $match: { startDate: { $lt: ISODate('2023-01-01') } } }, { $count: 'count' }])","Count the projects in the 'projects' collection with a 'startDate' before January 1, 2023."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([ { $match: { approvedBy: { $ne: null } } }, { $group: { _id: ""$projectId"", count: { $sum: 1 } } } ]);","Count the approved entries in the 'timeSheets' collection where 'approvedBy' is not null, grouped by 'projectId'."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([{ $unwind: ""$Members"" }, { $group: { _id: ""$Members.role"", count: { $sum: 1 } } }])",Count the number of team members for each unique role from the 'teams' collection by unwinding the Members array and grouping by role.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([ { $lookup: { from: 'tasks', localField: '_id', foreignField: 'projectId', as: 'tasks' } }, { $project: { name: 1, ongoingTasks: { $filter: { input: '$tasks', as: 'task', cond: { $eq: ['$$task.status', 'ongoing'] } } } } } ]);",Retrieve project names and ongoing tasks from the 'tasks' collection for each project.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([ { $match: { status: 'in-progress' } }, { $lookup: { from: 'projects', localField: 'projectId', foreignField: '_id', as: 'projectDetails' } }, { $project: { title: 1, projectName: { $arrayElemAt: ['$projectDetails.name', 0] } } } ]);","Retrieve tasks with a status of 'in-progress' and include the project name by matching 'projectId' in tasks to '_id' in projects, selecting task title and project name."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ priority: 'critical' }).sort({ startDate: 1 });,"Get all projects with 'critical' priority, sorted by start date in ascending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([ { $match: { status: 'Completed' } }, { $group: { _id: '$clientId', totalBudget: { $sum: '$budget' } } } ])","Calculate the total budget of completed projects, grouped by client ID."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([ { $lookup: { from: ""projects"", localField: ""projectId"", foreignField: ""_id"", as: ""project_info"" } }, { $unwind: ""$project_info"" }, { $group: { _id: ""$project_info.name"", totalTasks: { $sum: 1 } } } ])","Aggregate tasks by project name, counting the total tasks for each project using the 'tasks' and 'projects' collections."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([{ $unwind: ""$Members"" }, { $group: { _id: ""$Members.role"", memberCount: { $sum: 1 } } }, { $sort: { memberCount: -1 } }])","Count the number of team members by their roles in the 'teams' collection, sorted in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([{ $match: { status: 'Approved' } }, { $group: { _id: '$userId', totalHours: { $sum: '$hours' } } }])",Aggregate 'timeSheets' where the status is 'Approved' and group by userId to calculate total hours for each user.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $project: { name: 1, duration: { $subtract: ['$endDate', '$startDate'] } } }, { $sort: { duration: -1 } }])","Get project names and their durations, sorted by duration in descending order."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([{ $match: { status: 'In Progress' } }, { $group: { _id: '$projectId', taskCount: { $sum: 1 } } }, { $lookup: { from: 'projects', localField: '_id', foreignField: '_id', as: 'project_details' } }])","Count tasks with a status of 'In Progress', grouped by project ID, and include the related project details."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([ { $match: { date: { $gte: new Date('2023-01-01'), $lte: new Date('2023-12-31') } } }, { $group: { _id: '$projectId', totalHours: { $sum: '$hours' } } }, { $lookup: { from: 'projects', localField: '_id', foreignField: '_id', as: 'project_info' } } ])","Aggregate time sheets for the date range January 1, 2023, to December 31, 2023, grouping by projectId to calculate total hours worked and include project details."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $group: { _id: ""$managerId"", totalProjects: { $sum: 1 } } }, { $sort: { totalProjects: -1 } }])",Count projects by manager in the 'projects' collection and sort by the total in descending order.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([{ $group: { _id: ""$priority"", taskCount: { $sum: 1 } } }, { $sort: { taskCount: -1 } }])","Group tasks by priority, count the number of tasks for each priority level, and sort the results in descending order by task count."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([{ $lookup: { from: 'projects', localField: 'projects', foreignField: '_id', as: 'project_details' }}, { $project: { name: 1, totalProjects: { $size: '$project_details' }}}])","Get team names and the number of projects each team has, along with project details from the 'projects' collection."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([ { $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" }, tasksCount: { $sum: 1 } } }, { $project: { userId: ""$_id"", totalHours: 1, tasksCount: 1 } } ])","Group 'timeSheets' documents by 'userId' to calculate the total hours worked and count of tasks for each user, projecting 'userId', total hours, and tasks count."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $group: { _id: ""$status"", totalProjects: { $sum: 1 }, totalBudget: { $sum: ""$budget"" } } }])",Group projects by status and calculate the total number and budget for each status.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([ { $lookup: { from: 'teams', localField: 'assignedTo', foreignField: 'Members.userId', as: 'team_info' } }, { $unwind: '$team_info' }, { $group: { _id: '$team_info.name', totalTasks: { $sum: 1 } } } ]);","Group tasks by team name, aggregating the total number of tasks for each team where 'assignedTo' in tasks matches 'userId' in the teams' members."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([ { $lookup: { from: ""teams"", localField: ""managerId"", foreignField: ""leadId"", as: ""team_info"" } }, { $match: { ""team_info"": { $ne: [] } } }, { $project: { name: 1, teamCount: { $size: ""$team_info"" } } } ])","Get the names of projects that have a manager in a team, including the count of associated teams, only for projects with at least one team."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.timeSheets.aggregate([ { $lookup: { from: 'tasks', localField: 'taskId', foreignField: '_id', as: 'task_info' } }, { $unwind: '$task_info' }, { $group: { _id: '$task_info.projectId', totalHours: { $sum: '$hours' } } } ])",Aggregate total hours from time sheets by looking up related task information and group by project ID.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $match: { startDate: { $gte: new Date('2023-01-01') } } }, { $lookup: { from: 'timeSheets', localField: '_id', foreignField: 'projectId', as: 'timeSheetData' } }, { $project: { name: 1, totalHours: { $sum: '$timeSheetData.hours' } } } }]);","Retrieve projects starting on or after January 1, 2023, along with the total hours logged from the timesheets."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.tasks.aggregate([ { $match: { dependencies: { $exists: true, $ne: [] } } }, { $group: { _id: null, totalDependencies: { $sum: { $size: ""$dependencies"" } } } } ])",Count the total number of dependencies across all tasks that have dependencies.
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.teams.aggregate([ { $lookup: { from: 'timeSheets', localField: 'Members.userId', foreignField: 'userId', as: 'timesheet_data' } }, { $unwind: '$timesheet_data' }, { $group: { _id: '$_id', totalHours: { $sum: '$timesheet_data.hours' } } } ]);","From the 'teams' collection, join with the 'timeSheets' collection by user IDs, unwind the results, and group by team ID to sum the total hours from the time sheet."
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.tasks.find({ status: 'completed' }).sort({ dueDate: 1 }),"Fetch all tasks with 'completed' status, sorted by 'dueDate' in ascending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({}),Fetch all documents in the 'ListingsAndReviews' collection.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ neighborhood: 'Downtown' }),Get all listings in the 'Downtown' neighborhood.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ property_type: 'Apartment', room_type: 'Entire home/apt' });",Get listings where the property type is 'Apartment' and the room type is 'Entire home/apt'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'host.superhost': true }),Get listings where the host is a superhost.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ price: { $lt: 100 } });,Find listings with a price less than 100.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'reviews.count': { $gt: 50 } });,Get documents from 'ListingsAndReviews' where the review count exceeds 50.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'address.city': 'New York' }),Find documents in the 'ListingsAndReviews' collection where the address city is 'New York'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ amenities: 'Pool' });,Find listings in the 'ListingsAndReviews' collection that have a 'Pool' amenity.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ last_scraped: { $gte: ISODate('2023-01-01') } });,"Retrieve documents from 'ListingsAndReviews' where 'last_scraped' is on or after January 1, 2023."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'images.thumbnail': { $exists: true } });,Get documents from 'ListingsAndReviews' where 'images.thumbnail' exists.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'host.name': 'John Doe' }),Get documents from 'ListingsAndReviews' where the host's name is 'John Doe'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ min_nights: '2' });,Find listings that require a minimum booking of 2 nights.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ bathrooms: { $gte: 2 } });,Get listings with 2 or more bathrooms.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ accommodates: { $lt: 5 } });,Retrieve documents from 'ListingsAndReviews' where accommodations are less than 5.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ cancellation_policy: 'flexible' });,Get documents from the 'ListingsAndReviews' collection with a flexible cancellation policy.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'host.location': 'California' }),Get documents from 'ListingsAndReviews' where the host is located in California.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ summary: { $regex: /beach/i } });,"Find documents in the 'ListingsAndReviews' collection where the 'summary' contains 'beach', case insensitive."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ beds: { $exists: true } });,Find all documents in 'ListingsAndReviews' where the 'beds' field is present.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ max_nights: '30' });,Find listings where the maximum stay is 30 nights.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ name: { $regex: 'Cozy', $options: 'i' } });","Find listings where the 'name' contains 'Cozy', ignoring case."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({}, {_id: 1, url: 1, name: 1, price: 1})","Retrieve all listings with the fields '_id', 'url', 'name', and 'price'."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ neighborhood: 'Downtown' }),Get documents from 'ListingsAndReviews' where the neighborhood is 'Downtown'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ property_type: 'Apartment', room_type: 'Entire home/apt' });",Get documents from 'ListingsAndReviews' where 'property_type' is 'Apartment' and 'room_type' is 'Entire home/apt'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'host.superhost': true });,Get all listings where the host is a superhost.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ price: { $lt: 100 } });,Find listings with a price under 100.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'reviews.count': { $gte: 10 } }),Find listings with 10 or more reviews.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ 'host.verified': true, 'host.listings_count': { $gte: 5 } });",Fetch listings where the host is verified and has at least five listings.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ min_nights: { $lte: '2' }, max_nights: { $gte: '14' } });","Retrieve documents from 'ListingsAndReviews' where the minimum stay is 2 nights or fewer, and the maximum stay is 14 nights or more."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'address.city': 'San Francisco' });,Find listings in San Francisco.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'images.thumbnail': { $exists: true } });,Retrieve documents from 'ListingsAndReviews' that have a thumbnail image.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ amenities: { $in: ['WiFi', 'Kitchen'] } });",Retrieve documents from 'ListingsAndReviews' where amenities include 'WiFi' or 'Kitchen'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ last_scraped: { $gt: new Date('2023-01-01') } });,"Retrieve documents from 'ListingsAndReviews' where 'last_scraped' is after January 1, 2023."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'reviews.first_review': { $exists: true } });,Find documents in 'ListingsAndReviews' where the 'first_review' field in 'reviews' exists.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ accommodates: { $gte: 4 } });,Find listings that accommodate 4 or more guests.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ cancellation_policy: { $in: ['flexible', 'moderate'] } });",Retrieve documents from 'ListingsAndReviews' where 'cancellation_policy' is 'flexible' or 'moderate'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ bathrooms: { $gt: 2 }, bedrooms: { $lt: 3 } });",Get listings with more than 2 bathrooms and fewer than 3 bedrooms.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ price: { $gte: 50, $lte: 150 } });",Find documents in the 'ListingsAndReviews' collection where the price is between 50 and 150.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'host.name': 'John Doe' });,Retrieve listings where the host's name is 'John Doe'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ room_type: 'Shared room', price: { $lte: 30 } });",Get listings with 'Shared room' type and a price of $30 or less.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ name: { $regex: 'house', $options: 'i' } });","Find documents in the 'ListingsAndReviews' collection where the 'name' contains 'house', case insensitive."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ url: { $exists: true } });,Get all documents from 'ListingsAndReviews' where the 'url' field is present.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({}, {_id: 1, url: 1, name: 1, summary: 1, description: 1, neighborhood: 1, property_type: 1, room_type: 1, bed_type: 1, min_nights: 1, max_nights: 1, cancellation_policy: 1, last_scraped: 1, accommodates: 1, bedrooms: 1, beds: 1, bathrooms: 1, reviews: 1, amenities: 1, price: 1, security_deposit: 1, cleaning_fee: 1, images: 1, host: 1, address: 1})","Retrieve all documents from the 'ListingsAndReviews' collection, including fields such as id, url, name, summary, description, neighborhood, property type, room type, bed type, minimum nights, maximum nights, cancellation policy, last scraped date, accommodates, bedrooms, beds, bathrooms, reviews, amenities, price, security deposit, cleaning fee, images, host, and address."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { price: { $gt: 100 } } }, { $group: { _id: ""$neighborhood"", avg_price: { $avg: ""$price"" } } }]);",Get the average price of listings in the 'ListingsAndReviews' collection by neighborhood for listings priced over 100.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { 'host.superhost': true } }, { $sort: { 'reviews.count': -1 } }, { $limit: 5 }])","Get the top 5 listings where the host is a superhost, sorted by review count in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: '$room_type', total: { $sum: 1 } } }, { $sort: { total: -1 } }])","Group listings by room type and count them, then sort by the count in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { amenities: { $in: [""Wifi"", ""Kitchen""] } } }, { $project: { name: 1, price: 1, 'host.name': 1 } }])","Retrieve documents from 'ListingsAndReviews' with 'Wifi' or 'Kitchen' in amenities, showing the name, price, and host's name."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: null, total_price: { $sum: ""$price"" }, count: { $sum: 1 } } }, { $project: { avg_price: { $divide: [""$total_price"", ""$count""] } } }])",Calculate the average price of all listings by dividing the total price by the number of listings.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $group: { _id: ""host.id"", listings: { $push: { name: ""$name"", hostName: ""$host.name"" } }, count: { $sum: 1 } } }, { $project: { _id: 0, hostId: ""$_id"", listings: 1, count: 1 } } ])","Aggregate the 'ListingsAndReviews' collection to group listings by host ID, projecting the listing names, host names, and the count of listings for each host."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ 'reviews.count': { $gte: 10 } }, { name: 1, 'reviews.first_review': 1 })",Get the names and first review dates of listings with at least 10 reviews.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $match: { max_nights: { $gte: 30 } } }, { $group: { _id: ""$property_type"", total_listings: { $sum: 1 } } }, { $sort: { total_listings: -1 } } ]);","Get the count of listings grouped by property type where the max nights is 30 or more, sorted by the count in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $project: { name: 1, average_stars: { $cond: [{ $gt: ['$reviews.count', 0] }, 1, 0] } } }])","Retrieve the names of listings and assign 1 star if there are reviews, otherwise assign 0 stars."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ ""host.verified"": true, ""price"": { $lt: 150 } }).sort({ price: 1 });","Get listings where the host is verified and the price is under 150, sorted by price in ascending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $group: { _id: ""$property_type"", avg_beds: { $avg: ""$beds"" } } }, { $sort: { avg_beds: -1 } } ])","Group documents by 'property_type' and calculate the average number of beds, sorting results in descending order by average beds."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ cancellation_policy: 'flexible' }, { name: 1, 'host.name': 1, price: 1 });","Retrieve listings with a 'flexible' cancellation policy, showing the listing name, host name, and price."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $sortByCount: '$room_type' }, { $limit: 3 }])",Get the top three room types in the 'ListingsAndReviews' collection by their occurrence count.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ ""reviews.last_review"": { $gte: new Date(""2022-01-01"") } }, { name: 1, ""reviews.last_review"": 1 })","Get the names and last review dates of listings where the last review date is on or after January 1, 2022."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $group: { _id: ""$neighborhood"", avg_bathrooms: { $avg: ""$bathrooms"" } } }, { $sort: { avg_bathrooms: -1 } } ])","Group the documents by neighborhood, calculate the average number of bathrooms for each, and sort the results in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ price: { $gt: 200 } }, { name: 1, price: 1, address: 1 })","Retrieve listings from 'ListingsAndReviews' where the price is over 200, including name, price, and address."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $lookup: { from: 'ListingsAndReviews', localField: 'host.id', foreignField: 'host.id', as: 'host_listings' } }, { $unwind: '$host_listings' }, { $group: { _id: '$host.id', total_cleaning_fee: { $sum: '$host_listings.cleaning_fee' } } } ])",Aggregate listings by host ID to calculate the total cleaning fee for each host.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ neighborhood: 'Downtown' }).sort({ price: 1 }).limit(10);,"Get the top 10 listings from 'ListingsAndReviews' where the neighborhood is 'Downtown', sorted by price in ascending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ property_type: 'Apartment' }),Get documents from 'ListingsAndReviews' where the property type is 'Apartment'.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'host.superhost': true }),Get listings from 'ListingsAndReviews' where the host is a superhost.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { 'address.city': 'San Francisco' } }, { $group: { _id: '$room_type', average_price: { $avg: '$price' } } }])","Get the average price of listings in San Francisco, grouped by room type."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'reviews.count': { $gt: 10 } });,Get listings with more than 10 reviews.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'price': { $lte: 100 } }).sort({ 'reviews.count': -1 });,"Get listings with a price of 100 or less, sorted by review count in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $group: { _id: '$neighborhood', total_listings: { $sum: 1 }, average_beds: { $avg: '$beds' } } }, { $sort: { total_listings: -1 } } ]);","Group listings by neighborhood, counting total listings and averaging beds, then sort by total listings in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ 'amenities': { $in: ['WiFi', 'Kitchen'] } });",Find listings that have either 'WiFi' or 'Kitchen' as amenities.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ 'last_scraped': { $gte: new Date('2023-01-01') } }, { name: 1, price: 1, 'host.name': 1 });","Get the names, prices, and host names from 'ListingsAndReviews' where 'last_scraped' is on or after January 1, 2023."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $lookup: { from: 'hosts', localField: 'host.id', foreignField: 'id', as: 'host_info' } }, { $unwind: '$host_info' }])","Aggregate data from 'ListingsAndReviews' to join with 'hosts' using the host ID, and unwind the host information."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ bedrooms: { $gte: 2 } }).sort({ price: 1 }).limit(5);,"Find the top 5 listings with at least 2 bedrooms, sorted by price in ascending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: { neighborhood: '$neighborhood', property_type: '$property_type' }, total_listings: { $sum: 1 } } }])",Count the number of listings grouped by neighborhood and property type in the 'ListingsAndReviews' collection.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { 'reviews.first_review': { $gte: new Date('2022-01-01') } } }, { $group: { _id: '$host.id', average_price: { $avg: '$price' } } }])","Aggregate listings with a first review on or after January 1, 2022, grouped by host ID to calculate the average price per host."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ 'images.thumbnail': { $exists: true } }),Get all listings that have a thumbnail image.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: null, average_price: { $avg: '$price' } } }])",Calculate the average price from the 'ListingsAndReviews' collection.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ max_nights: { $gte: 30 } });,Retrieve documents from 'ListingsAndReviews' where the maximum number of nights allowed is at least 30.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { 'host.verified': true } }, { $project: { name: 1, price: 1, 'host.name': 1 } }])","Get the names and prices of listings where the host is verified, including the verified host names."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.countDocuments({ 'cancellation_policy': 'flexible' });,Count the listings with a flexible cancellation policy in the ListingsAndReviews collection.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ 'accommodates': { $gt: 4 } }, { name: 1, price: 1, neighborhood: 1 })","Get listings from 'ListingsAndReviews' that accommodate more than 4 guests, showing only the name, price, and neighborhood."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: '$property_type', average_beds: { $avg: '$beds' } } }, { $sort: { average_beds: -1 } }])","Group the 'ListingsAndReviews' by 'property_type' and find the average number of beds, sorting the results by average beds in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ 'reviews.count': { $gte: 5 } }, { name: 1, price: 1, 'reviews.count': 1 })","Get the name, price, and review count for listings with five or more reviews."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ ""price"": { $gt: 100 } }).sort({ ""reviews.count"": -1 });",Retrieve listings where the price exceeds 100 and sort them by review count in descending order.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: ""$neighborhood"", average_price: { $avg: ""$price"" } } }, { $sort: { average_price: -1 } }])","Group documents by neighborhood and calculate the average price, sorting neighborhoods by average price in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $lookup: { from: ""ListingsAndReviews"", localField: ""host.id"", foreignField: ""host.id"", as: ""host_listings"" } }, { $unwind: ""$host_listings"" }, { $group: { _id: ""$host.id"", total_listings: { $sum: 1 }, average_price: { $avg: ""$host_listings.price"" } } } ]);","Aggregate listings by host ID, joining with other listings from the same collection, then unwind and group by host ID to calculate the count of listings and the average price."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { amenities: 'WiFi' } }, { $group: { _id: '$property_type', total_count: { $sum: 1 } } }])",Get the count of properties grouped by property type that have 'WiFi' in their amenities.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $match: { ""reviews.last_review"": { $gte: new Date(""2022-01-01"") } } }, { $project: { name: 1, url: 1, last_review: ""$reviews.last_review"" } } ]);","Retrieve listings where the last review date is on or after January 1, 2022, and include the name, URL, and last review date."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ ""host.superhost"": true, ""price"": { $lt: 200 } }, { name: 1, price: 1, host: 1 })","Get listings for superhost hosts with a price under 200, showing only name, price, and host details."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $group: { _id: ""$room_type"", total_count: { $sum: 1 }, avg_bathrooms: { $avg: ""$bathrooms"" } } }, { $sort: { total_count: -1 } } ]);","Group listings by room type, counting the total listings and averaging the number of bathrooms per room type, then sort by total listings in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.countDocuments({ 'cancellation_policy': 'flexible' }),Count listings with a 'flexible' cancellation policy in the 'ListingsAndReviews' collection.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $unwind: ""$amenities"" }, { $group: { _id: ""$amenities"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]);","Unwind the amenities array from the 'ListingsAndReviews' collection, group by each unique amenity, count the listings for each amenity, and sort by count in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ $or: [ { 'host.verified': true }, { 'security_deposit': { $gt: 500 } } ] }, { name: 1, host: 1 })",Retrieve the names and host information of listings where the host is verified or the security deposit exceeds 500.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: { city: ""$address.city"", property_type: ""$property_type"" }, average_cleaning_fee: { $avg: ""$cleaning_fee"" } } }, { $sort: { average_cleaning_fee: -1 } }]);","Group the listings by city and property type, calculate the average cleaning fee for each group, and sort by the average cleaning fee in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $project: { name: 1, summarized_description: { $substr: ['$description', 0, 100] } } }])","From the 'ListingsAndReviews' collection, select the 'name' field and the first 100 characters of the 'description' field as 'summarized_description'."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $match: { $expr: { $gt: [ ""$price"", { $divide: [ ""$reviews.count"", 10 ] } ] } } } ]);",Retrieve all listings where the price is greater than the number of reviews divided by 10.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $group: { _id: ""$host.location"", avg_beds: { $avg: ""$beds"" }, listings_count: { $sum: 1 } } }])","Group listings by host location, calculating the average beds and total listings count for each location."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ ""last_scraped"": { $gte: new Date(""2023-01-01"") } }).sort({ ""price"": 1 }).limit(10);","Get the first 10 listings where 'last_scraped' is on or after January 1, 2023, sorted by 'price' in ascending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { ""reviews.count"": { $gt: 0 } } }, { $project: { name: 1, last_review: ""$reviews.last_review"" } }, { $sort: { last_review: -1 } }])","Get the names and last review dates of listings with more than zero reviews, sorted by last review date in descending order."
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.find({ ""bedrooms"": { $gte: 3 } })",Retrieve all listings with 3 or more bedrooms from the 'ListingsAndReviews' collection.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $facet: { by_neighborhood: [{ $group: { _id: ""$neighborhood"", total_listings: { $sum: 1 } } }], by_property_type: [{ $group: { _id: ""$property_type"", average_price: { $avg: ""$price"" } } }] } }])",Aggregate listings by neighborhood to count total listings and by property type to calculate average price.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $match: { 'host.listings_count': { $gt: 5 } }}, { $group: { _id: '$host.name', average_price: { $avg: '$price' } }}])",Get the average price of listings grouped by the host's name for hosts with more than 5 listings.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([{ $addFields: { price_per_bed: { $divide: [""$price"", { $ifNull: [""$beds"", 1] }] } } }, { $sort: { price_per_bed: 1 } }])",Calculate and sort the price per bed for all listings by dividing the price by the number of beds.
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({}),Retrieve all fields from all documents in the 'ListingsAndReviews' collection without any filters.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({}),Retrieve all records from the Shipwrecks collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ feature_type: 'wreck' }),Fetch documents from the 'Shipwrecks' collection where the feature type is 'wreck'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ gps_quality: 'good' });,Retrieve all shipwreck records with 'good' GPS quality.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ depth: '200 meters' });,Get shipwreck records where the depth is '200 meters'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ vessel_terms: { $exists: true } });,Get all documents from 'Shipwrecks' where 'vessel_terms' is present.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ history: { $ne: '' } });,Get documents from 'Shipwrecks' where 'history' is not empty.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ coordinates: { $type: 'array' } });,Get documents from the 'Shipwrecks' collection where 'coordinates' is an array.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ longitude: { $gt: 0 } });,Get shipwreck records with a longitude greater than 0.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ latitude: { $lt: 0 } });,Get shipwreck documents with latitude less than 0.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ record: '2023' });,Get documents from the 'Shipwrecks' collection where 'record' is '2023'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ water_level: 'high' });,Get documents from 'Shipwrecks' where 'water_level' is 'high'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ sounding_type: 'echo' });,Get documents from 'Shipwrecks' where 'sounding_type' is 'echo'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ quasou: { $in: [""observed"", ""predicted""] } });",Get Shipwrecks where the quasou field is 'observed' or 'predicted'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ chart: { $regex: /^Chart/ } });,Retrieve documents from the 'Shipwrecks' collection where the 'chart' field begins with 'Chart'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ depth: { $exists: false } });,Get all documents from the 'Shipwrecks' collection where the 'depth' field is missing.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ feature_type: 'wreck', gps_quality: 'excellent' });",Get shipwreck documents with a feature type of 'wreck' and excellent GPS quality.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ $or: [{ record: '2022' }, { vessel_terms: 'sailing' }] });",Get documents from the 'Shipwrecks' collection where 'record' is '2022' or 'vessel_terms' is 'sailing'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ history: { $regex: /accident/i } }),"Get documents from the 'Shipwrecks' collection where 'history' contains 'accident', case insensitive."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ 'coordinates.0': { $exists: true } }),Find documents in the 'Shipwrecks' collection where the 'coordinates' array contains at least one element.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ latitude: { $gte: 30, $lte: 40 } })","Get documents from 'Shipwrecks' where latitude is between 30 and 40, inclusive."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ feature_type: 'wreck' }).sort({ depth: 1 }),"Get all shipwreck documents where the feature type is 'wreck', sorted by depth in ascending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({}),Get all documents from the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ feature_type: 'wreck' });,Get documents from 'Shipwrecks' where 'feature_type' is 'wreck'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ gps_quality: 'high' }),Get documents from 'Shipwrecks' where 'gps_quality' is 'high'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ depth: { $regex: /^10/ } });,Find documents in the 'Shipwrecks' collection where the 'depth' field begins with '10'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ vessel_terms: { $exists: true } });,Find documents in the 'Shipwrecks' collection where 'vessel_terms' exists.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ coordinates: { $size: 3 } });,Retrieve documents from the 'Shipwrecks' collection with a 'coordinates' array that contains three elements.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ latitude: { $gt: 0 } });,Get documents from the 'Shipwrecks' collection where latitude is greater than 0.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ longitude: { $lt: -100 } });,Get shipwreck documents with longitude less than -100.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.findOne({ record: 'abc123' });,Get one document from 'Shipwrecks' where 'record' is 'abc123'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ history: { $exists: true, $ne: null } });",Retrieve documents from 'Shipwrecks' where 'history' is defined and not null.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ water_level: 'high', sounding_type: 'echo' })",Get shipwreck documents where the water level is high and the sounding type is echo.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ depth: { $in: ['10m', '20m'] } });",Get the shipwrecks where the depth is '10m' or '20m'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ quasou: 'recent' }),Get documents from 'Shipwrecks' where 'quasou' is 'recent'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ chart: { $exists: true, $ne: '' } })",Retrieve documents from the 'Shipwrecks' collection where the 'chart' field exists and is not empty.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ gps_quality: { $regex: /quality/i } });,"Get documents from the 'Shipwrecks' collection where 'gps_quality' contains 'quality', case insensitive."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ feature_type: 'reef', latitude: { $lt: 0 } });",Get shipwreck documents where the feature type is 'reef' and latitude is below 0.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ record: { $regex: '', $options: 'i' } })",Retrieve all documents from the 'Shipwrecks' collection where the 'record' field matches any string case insensitively.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ depth: { $gte: '5' } });,Retrieve documents from 'Shipwrecks' where 'depth' is at least 5.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ history: { $regex: /sinking/i } });,"Find documents in the 'Shipwrecks' collection where the 'history' field includes the term 'sinking', case insensitive."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ water_level: 'low', coordinates: { $gt: 0 } });",Retrieve documents from the 'Shipwrecks' collection where 'water_level' is 'low' and 'coordinates' contains elements greater than 0.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({}, { _id: 1, record: 1, vessel_terms: 1, feature_type: 1, chart: 1, latitude: 1, longitude: 1, gps_quality: 1, depth: 1, sounding_type: 1, history: 1, quasou: 1, water_level: 1, coordinates: 1 })",Retrieve all fields from all documents in the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ feature_type: 'wreck' }),Get shipwreck documents where the feature type is 'wreck'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ gps_quality: { $ne: 'Unknown' } });,Get documents from the 'Shipwrecks' collection where 'gps_quality' is not 'Unknown'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ depth: { $gte: 100 } });,Retrieve documents from the 'Shipwrecks' collection where 'depth' is at least 100.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ vessel_terms: { $regex: 'freighter', $options: 'i' } });","Find documents in the 'Shipwrecks' collection where 'vessel_terms' contains 'freighter', case insensitive."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { history: { $exists: true, $ne: '' } } }, { $group: { _id: '$vessel_terms', count: { $sum: 1 } } }])",Get shipwreck documents with a non-empty 'history' and count occurrences of each 'vessel_terms'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ latitude: { $gt: 30 }, longitude: { $gt: -90 } }).sort({ depth: 1 });","Get all shipwreck records where latitude is over 30 and longitude is over -90, sorted by depth in ascending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([ { $group: { _id: ""$feature_type"", average_depth: { $avg: { $toDouble: ""$depth"" } } } } ]);",Group 'Shipwrecks' documents by 'feature_type' and calculate the average depth as a double.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ coordinates: { $exists: true, $ne: [] } }, { _id: 0, coordinates: 1 })",Get the coordinates of shipwrecks from the 'Shipwrecks' collection where the coordinates field exists and is not empty.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$quasou"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Count and group the Shipwrecks by unique quasou values, then sort the counts in descending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { water_level: { $in: ['low', 'high'] } } }, { $group: { _id: '$water_level', count: { $sum: 1 } } }])","Count the number of records for each distinct 'water_level' value in the 'Shipwrecks' collection, including only 'low' or 'high' water levels."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { gps_quality: { $exists: true } } }, { $group: { _id: ""$gps_quality"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Retrieve and count the occurrences of each unique 'gps_quality' in the 'Shipwrecks' collection, sorting the results in descending order by count."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.count(),Count the total records in the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { depth: { $type: 'string' } } }, { $group: { _id: ""$feature_type"", count: { $sum: 1 } } }])","Count shipwreck records in the 'Shipwrecks' collection where 'depth' is a string, grouped by 'feature_type'."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([ { $match: { history: { $regex: 'sunk', $options: 'i' } } }, { $group: { _id: '$vessel_terms', total: { $sum: 1 } } } ])","Count shipwreck records in the 'Shipwrecks' collection where 'history' contains 'sunk', ignoring case, and group by 'vessel_terms'."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$chart"", unique_vessels: { $addToSet: ""$vessel_terms"" } } }])",Group the documents in the 'Shipwrecks' collection by 'chart' and create a set of unique vessel terms for each chart.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([ { $match: { latitude: { $lte: 0 }, longitude: { $lt: 0 } } }, { $count: 'southwestern_wrecks' } ])","Count shipwreck records with latitude and longitude both less than or equal to 0, labeling this count as 'southwestern_wrecks'."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([ { $group: { _id: ""$depth"", count: { $sum: 1 }, avg_latitude: { $avg: ""$latitude"" } } } ])","Group the shipwrecks by depth, counting the total wrecks and calculating the average latitude for each depth."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([ { $match: { water_level: 'high' } }, { $lookup: { from: 'Shipwrecks', localField: 'feature_type', foreignField: 'feature_type', as: 'related_wrecks' } } ])",Fetch all shipwreck records where the 'water_level' is 'high' and include related shipwrecks with the same 'feature_type'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ latitude: { $gte: 0 }, longitude: { $gte: 0 } }).sort({ depth: -1 }).limit(5);","Get the top 5 shipwreck records where latitude and longitude are both non-negative, sorted by depth in descending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({}),Get all records from the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({}),Get all documents from the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ feature_type: 'Wreck' }),Get the 'Shipwrecks' documents where 'feature_type' is 'Wreck'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ gps_quality: 'High' }).sort({ latitude: 1 });,"Get shipwreck documents where 'gps_quality' is 'High', sorted by latitude ascending."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ depth: { $gte: '100' } });,Find shipwreck documents where the depth is at least 100.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ vessel_terms: { $regex: /sailing/i } });,Find documents in the 'Shipwrecks' collection where 'vessel_terms' contains 'sailing' case-insensitively.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$feature_type"", count: { $sum: 1 } } }])",Count the occurrences of each feature type in the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { water_level: { $ne: 'Unknown' } } }, { $group: { _id: ""$water_level"", avg_depth: { $avg: { $toDouble: ""$depth"" } } } }])","Get the average depth of shipwrecks from the 'Shipwrecks' collection, grouped by water level, excluding 'Unknown' water levels."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ coordinates: { $exists: true, $ne: [] } });",Retrieve documents from the 'Shipwrecks' collection where the 'coordinates' field exists and is not empty.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ history: { $ne: '' } }).sort({ longitude: -1 });,"Retrieve all shipwreck records where the 'history' field is not empty, sorted by 'longitude' in descending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$quasou"", total: { $sum: 1 } } }, { $sort: { total: -1 } }, { $limit: 5 }])","Group 'Shipwrecks' documents by 'quasou', count records in each group, sort by count descending, and limit to the top 5 groups."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ latitude: { $gt: 30, $lt: 50 }, longitude: { $gt: -100, $lt: -80 } });","Retrieve shipwreck documents where latitude is between 30 and 50, and longitude is between -100 and -80."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ depth: { $type: 'number' } }, { record: 1, depth: 1 })",Retrieve the 'record' and 'depth' fields from shipwreck records where the 'depth' is a numeric value.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { vessel_terms: { $exists: true } } }, { $group: { _id: ""$vessel_terms"", unique_records: { $addToSet: ""$record"" } } }]);","Retrieve unique vessel terms from the 'Shipwrecks' collection, grouping by 'vessel_terms' and collecting unique 'record' values for each term."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ gps_quality: { $in: ['Good', 'Average'] } }).sort({ record: 1 });","Get all shipwreck documents with 'gps_quality' as 'Good' or 'Average', sorted by 'record' in ascending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: null, total_depth: { $sum: { $toDouble: ""$depth"" } } } }]);",Sum the depths of all shipwrecks in the 'Shipwrecks' collection as double precision.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { sounding_type: { $ne: null } } }, { $group: { _id: ""$sounding_type"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]);","Count and group the 'Shipwrecks' documents by 'sounding_type' where 'sounding_type' is not null, then sort the groups by count in descending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ history: { $exists: true, $ne: '' } }).limit(10);",Get the first 10 shipwreck documents where the 'history' field is present and not empty.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ water_level: { $regex: /above/i } }, { _id: 0, record: 1, water_level: 1 });","Retrieve shipwreck records where 'water_level' contains 'above', showing only 'record' and 'water_level' fields, excluding '_id'."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find().sort({ latitude: 1, longitude: 1 }).limit(5);",Get the first five shipwreck records sorted by latitude and longitude in ascending order.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ gps_quality: 'Low' }, { record: 1, latitude: 1, longitude: 1 })","Get the 'record', 'latitude', and 'longitude' fields from 'Shipwrecks' where 'gps_quality' is 'Low'."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({}, { _id: 1, record: 1, vessel_terms: 1, feature_type: 1, chart: 1, latitude: 1, longitude: 1, gps_quality: 1, depth: 1, sounding_type: 1, history: 1, quasou: 1, water_level: 1, coordinates: 1 })",Retrieve all fields from all documents in the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$feature_type"", count: { $sum: 1 } } }])",Group the shipwrecks by 'feature_type' and count the total number for each type.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { depth: { $gte: '50' } } }, { $group: { _id: '$vessel_terms', average_latitude: { $avg: '$latitude' } } }])","Get the average latitude of shipwrecks where the depth is at least 50, grouped by vessel terms."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ gps_quality: { $ne: 'bad' } }, { record: 1, latitude: 1, longitude: 1 }).sort({ longitude: 1 });","Fetch documents from the 'Shipwrecks' collection where 'gps_quality' is not 'bad', sorted by 'longitude' in ascending order, including only 'record', 'latitude', and 'longitude'."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$quasou"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])",Count the number of documents in 'Shipwrecks' by unique 'quasou' values and sort the counts in descending order.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { history: { $regex: /sank/i } } }, { $count: 'total_wrecks' }])","Count the number of shipwrecks in the 'Shipwrecks' collection where the 'history' field includes the word 'sank', case insensitive."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ coordinates: { $elemMatch: { $gt: 30 } } }, { _id: 0, record: 1, coordinates: 1 })","Get records from the 'Shipwrecks' collection where 'coordinates' have at least one value greater than 30, showing only 'record' and 'coordinates' while excluding '_id'."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$chart"", wreck_count: { $sum: 1 } } }])",Count the shipwrecks grouped by the 'chart' field from the 'Shipwrecks' collection.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { water_level: { $exists: true } } }, { $group: { _id: ""$water_level"", avg_depth: { $avg: ""$depth"" } } }])","Get the average depth of shipwrecks grouped by water level, including only records with an existing water level."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ depth: { $ne: null } }, { record: 1, depth: 1, coordinates: 1 });","Retrieve the 'record', 'depth', and 'coordinates' fields from the 'Shipwrecks' collection where 'depth' is not null."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: { $substr: ['$history', 0, 10] }, average_latitude: { $avg: '$latitude' } } }, { $sort: { _id: 1 } }])","Group the 'Shipwrecks' documents by the first ten characters of the 'history' field and calculate the average latitude for each group, then sort the results by history."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { feature_type: 'wreck' } }, { $group: { _id: null, total_depth: { $sum: { $toDouble: '$depth' } } } }])",Sum the depth of shipwrecks in the 'Shipwrecks' collection where the feature type is 'wreck'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { depth: { $gt: '100' } } }, { $unwind: '$coordinates' }, { $group: { _id: '$record', coordinate_count: { $sum: 1 } } }])","Count the coordinates for each unique record in the 'Shipwrecks' collection, only including shipwrecks with a depth greater than 100."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $lookup: { from: 'Shipwrecks', localField: 'vessel_terms', foreignField: 'vessel_terms', as: 'similar_vessels' } }, { $match: { 'similar_vessels.record': { $exists: true } } }])","Aggregate the 'Shipwrecks' collection to find vessels with matching 'vessel_terms' and include them as 'similar_vessels', then filter for entries in 'similar_vessels' where 'record' exists."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { latitude: { $lt: 15 } } }, { $group: { _id: ""$vessel_terms"", total_count: { $sum: 1 } } }])","Count the number of shipwrecks in the 'Shipwrecks' collection with a latitude less than 15, grouped by vessel terms."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $group: { _id: ""$gps_quality"", average_longitude: { $avg: ""$longitude"" } } }, { $sort: { average_longitude: -1 } }])","Group 'Shipwrecks' by 'gps_quality' and calculate the average longitude for each group, sorting the results by average longitude in descending order."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.find({ depth: { $ne: null } }, { record: 1, coordinates: { $slice: [ ""$coordinates"", 5 ] }, depth: 1 })","Retrieve the 'record' and 'depth' fields from the 'Shipwrecks' collection, along with the first five elements of the 'coordinates' array, excluding entries where 'depth' is null."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([ { $match: { depth: { $exists: true } } }, { $group: { _id: ""$depth"", vessel_count: { $sum: 1 } } }, { $match: { vessel_count: { $gt: 5 } } } ])","Count the number of vessels for each depth in the 'Shipwrecks' collection, including only depths with more than five vessels."
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([{ $match: { sounding_type: { $in: ['sonar', 'manual'] } } }, { $group: { _id: '$sounding_type', count: { $sum: 1 } } }])",Count shipwrecks grouped by 'sounding_type' where 'sounding_type' is 'sonar' or 'manual'.
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find().sort({ longitude: 1 }).limit(10);,"Get the first 10 documents from the 'Shipwrecks' collection, sorted by longitude in ascending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find(),Get all movies from the 'movies' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ title: 'Inception' });,Get movie documents from the 'movies' collection where the title is 'Inception'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ year: 2020 }),Get movies from the 'movies' collection released in 2020.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ rated: 'PG-13' }),Fetch movies from the 'movies' collection rated 'PG-13'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ genres: 'Action' });,Find movies in the 'movies' collection with the genre 'Action'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'cast': 'Leonardo DiCaprio' });,Retrieve movies from the 'movies' collection that have 'Leonardo DiCaprio' in their cast.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'awards.wins': { $gt: 5 } });,Retrieve movies that have won over 5 awards.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ languages: 'English' });,Find movies where the languages include 'English'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ countries: { $ne: 'USA' } });,Find movies where the 'countries' field excludes 'USA'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'runtime': { $gte: 120 } }),Get movies where the runtime is 120 minutes or more.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.theaters.find({}),Fetch all documents from the 'theaters' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.theaters.find({ 'location.address.city': 'Los Angeles' });,Get the theaters located in Los Angeles.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.theaters.find({ theaterId: 101 });,Get theater documents from the 'theaters' collection with 'theaterId' 101.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.sessions.find({}),Get all documents from the 'sessions' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.users.find({}),Get all users from the collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.users.find({ email: 'user@example.com' });,Get user documents from the 'users' collection with the email 'user@example.com'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.comments.find({}),Get all comments from the comments collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.comments.find({ movie_id: '12345' });,Get all comments for the movie with ID '12345'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.comments.find({ 'date': { $gte: new Date('2022-01-01') } });,"Fetch comments where the date is on or after January 1, 2022."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.comments.find({ name: 'John Doe' }),Get all comments where the name is 'John Doe'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ rated: 'PG-13', year: 2020 }, { title: 1, plot: 1, genres: 1 })","Retrieve all 'movies' with a rating of 'PG-13' released in 2020, showing only the title, plot, and genres."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({}),Get all movies from the collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ rated: 'PG-13' });,Get all movies with a rating of 'PG-13'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ year: 2021 });,Get movies from the 'movies' collection released in 2021.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ genres: 'Action' }),Retrieve movies from the 'movies' collection that are in the 'Action' genre.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ title: /Inception/i }),"Get movies where the title includes 'Inception', ignoring case."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'awards.wins': { $gt: 5 } });,Find movies with more than 5 award wins.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'imdb.rating': { $gte: 8 } });,Get movies from the 'movies' collection with an IMDb rating of 8 or higher.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ released: { $gt: new Date('2020-01-01') } }),"Find all movies released after January 1, 2020."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'cast': 'Leonardo DiCaprio' }),Find movies where 'Leonardo DiCaprio' is in the cast.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ languages: 'English' }),Retrieve movies where the language is 'English'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.theaters.find({}),Get all records from the theaters collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.theaters.find({ 'location.address.city': 'Los Angeles' }),Get theaters located in Los Angeles.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.theaters.find({ 'location.address.state': 'CA' });,Get theaters where the address state is 'CA'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.users.find({}),Get all users from the 'users' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.users.find({ email: 'example@example.com' });,Get user documents from the 'users' collection with the email 'example@example.com'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.comments.find({}),Get all comments from the comments collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.comments.find({ movie_id: '5a9427658b0beebeb69579ae' });,Get all comments for the movie with ID '5a9427658b0beebeb69579ae'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.comments.find({ date: { $gt: new Date('2023-01-01') } });,"Get all comments from the 'comments' collection with a date after January 1, 2023."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.sessions.find({}),Get all documents from the 'sessions' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.sessions.find({ user_id: '12345' });,Get sessions where user_id is '12345'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.sessions.find({ jwt: { $exists: true } });,Get all sessions where the 'jwt' field is present.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({}),Retrieve all details of movies from the movies collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $group: { _id: ""$rated"", averageRating: { $avg: ""$imdb.rating"" } } }]);",Group the movies by their rating and calculate the average IMDb rating for each rating group.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ year: { $gte: 2000 } }).sort({ released: -1 });,"Get all movies from the 'movies' collection released in 2000 or later, sorted by release date in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $lookup: { from: 'comments', localField: '_id', foreignField: 'movie_id', as: 'comments_info' } }, { $project: { title: 1, num_comments: { $size: '$comments_info' } } }])",Get the titles of movies and the count of comments for each movie from the 'movies' collection by joining with the 'comments' collection using the movie's ID.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $match: { genres: 'Action' } }, { $group: { _id: null, totalRuntime: { $sum: '$runtime' } } }])",Calculate the total runtime of Action genre movies.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'awards.wins': { $gt: 0 } }).sort({ 'awards.nominations': -1 }).limit(5);,"Get the top 5 movies that have won at least one award, sorted by nominations in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $group: { _id: ""$movie_id"", totalComments: { $sum: 1 } } }, { $sort: { totalComments: -1 } }])","Group comments by 'movie_id' and count the total for each movie, then sort the results in descending order by total comments."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.theaters.aggregate([{ $group: { _id: ""$location.geo.type"", count: { $sum: 1 } } }]);",Count how many theaters there are for each type of geographic location.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $lookup: { from: 'theaters', localField: 'cast', foreignField: 'theaterId', as: 'theater_info' } }, { $match: { 'theater_info.0': { $exists: true } } }])","Aggregate the 'movies' collection to find related theater information where the movie's cast matches theater IDs, including only movies with available theater data."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ languages: 'English' }, { title: 1, plot: 1, directors: 1 });","Get the titles, plots, and directors of English movies from the 'movies' collection."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { _id: 1 } }]);","Group movies by year and count them, sorting the results by year in ascending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $match: { 'tomatoes.viewer.rating': { $gte: 8 } } }, { $project: { title: 1, 'tomatoes.viewer.rating': 1 } }]);",Get the titles and viewer ratings of movies with a viewer rating of 8 or higher from the 'movies' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $group: { _id: ""$email"", count: { $sum: 1 } } }, { $match: { count: { $gt: 3 } } }])","Group comments by email and count them, including only those with more than 3 comments."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.sessions.aggregate([{ $group: { _id: ""$user_id"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }]);","Group 'sessions' by 'user_id' and count the sessions for each user, keeping only users with more than one session."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ ""imdb.votes"": { $gte: 1000 } }).sort({ ""imdb.rating"": -1 });","Get movies with at least 1000 IMDb votes, sorted by IMDb rating in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.users.aggregate([{ $project: { email: 1, name: { $concat: ['$name', ' <', '$email', '>'] } } }]);",Select the email and the user's name followed by their email in angle brackets from the 'users' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ 'tomatoes.fresh': { $gt: 70 } }, { title: 1, 'tomatoes.fresh': 1 });",Get the titles and fresh tomato ratings for movies with a fresh rating greater than 70.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $group: { _id: { movie_id: ""$movie_id"", email: ""$email"" }, totalComments: { $sum: 1 } } }])","Group comments by 'movie_id' and 'email', counting the total comments for each unique pair."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.theaters.find({ ""location.address.city"": ""Los Angeles"" }, { _id: 0, theaterId: 1, ""location.address.street1"": 1 });","Retrieve theater documents from the 'theaters' collection for the city 'Los Angeles', showing theaterId and street1 address without the _id field."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $lookup: { from: 'comments', localField: '_id', foreignField: 'movie_id', as: 'movie_comments' } }, { $lookup: { from: 'users', localField: 'movie_comments.email', foreignField: 'email', as: 'user_comments' } }])",Aggregate data from the 'movies' collection to include user information related to comments by matching 'comments.email' with 'users.email' and storing the results in 'user_comments'.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $project: { title: 1, boxOffice: { $convert: { input: ""$tomatoes.boxOffice"", to: ""double"" } } } }])",Retrieve the titles and box office earnings of movies from the 'movies' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $match: { rated: 'PG-13' } }, { $group: { _id: '$genres', averageRating: { $avg: '$imdb.rating' } } } ])","Get the average IMDb rating of 'PG-13' rated movies, grouped by genre."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({ 'awards.wins': { $gt: 5 } }).sort({ 'imdb.rating': -1 }),"Get movies with more than 5 awards, sorted by IMDb rating in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $lookup: { from: 'comments', localField: '_id', foreignField: 'movie_id', as: 'comments_info' } }, { $unwind: '$comments_info' }, { $group: { _id: '$title', totalComments: { $sum: 1 }, averageRating: { $avg: '$imdb.rating' } } } ])",Get the titles of movies along with the total number of comments and the average IMDB rating by joining the 'movies' and 'comments' collections.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $group: { _id: ""$year"", totalMovies: { $sum: 1 }, averageRuntime: { $avg: ""$runtime"" } } }, { $sort: { totalMovies: -1 } } ])","Group movies by release year, total the number of movies and average the runtime for each year, and sort by total movies in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.theaters.aggregate([{ $group: { _id: ""$location.geo.type"", count: { $sum: 1 } } }])",Group theaters by geographical location type and count the number of theaters in each group.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $group: { _id: ""$movie_id"", totalComments: { $sum: 1 } } }, { $match: { totalComments: { $gt: 10 } } }])",Count comments by 'movie_id' from the 'comments' collection and retrieve movies with more than 10 comments.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $match: { 'tomatoes.viewer.rating': { $gte: 8 } } }, { $project: { title: 1, 'tomatoes.viewer.rating': 1, 'imdb.rating': 1 } }])","Get the titles, viewer ratings from the tomatoes section, and IMDb ratings of movies with viewer ratings of 8 or higher."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $group: { _id: { $year: ""$released"" }, totalMovies: { $sum: 1 }, totalAwards: { $sum: ""$awards.wins"" } } }, { $sort: { totalAwards: -1 } } ])","Group movies by the year from the 'released' field, count the total movies, sum total awards won, and sort by total awards in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.users.aggregate([{ $project: { email: 1, nameEmail: { $concat: ['$name', ' - ', '$email'] } } }])",Retrieve the email addresses and a concatenated string of names and emails for all users.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.sessions.aggregate([ { $group: { _id: ""$user_id"", totalSessions: { $sum: 1 } } }, { $match: { totalSessions: { $gt: 5 } } } ])",Group sessions by user_id and count sessions for users with more than five.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $lookup: { from: 'theaters', localField: 'countries', foreignField: 'location.address.state', as: 'theater_info' } }, { $match: { 'theater_info.0': { $exists: true } } } ]);","Retrieve all movies with associated theaters where the movie's country matches the theater's state, including only movies with at least one corresponding theater."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $group: { _id: ""$email"", totalComments: { $sum: 1 } } }, { $sort: { totalComments: -1 } }]);","Group comments by email, count the total for each email, and sort the results by total comments in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ ""genres"": ""Action"" }).sort({ ""released"": -1 }).limit(5);","Fetch the top 5 recent movies in the 'Action' genre from the 'movies' collection, sorted by release date in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $match: { date: { $gte: new Date('2022-01-01') } } }, { $group: { _id: '$movie_id', totalComments: { $sum: 1 } } }])","Count the comments from the 'comments' collection where the 'date' is on or after January 1, 2022, grouped by 'movie_id'."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $unwind: '$directors' }, { $group: { _id: '$directors', totalMovies: { $sum: 1 } } }, { $sort: { totalMovies: -1 } } ])","Group the movies by their directors, count the total number of movies for each director, and sort the results in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.theaters.aggregate([ { $lookup: { from: 'sessions', localField: '_id', foreignField: 'user_id', as: 'sessions_info' } }, { $unwind: { path: '$sessions_info', preserveNullAndEmptyArrays: true } } ])","Aggregate theaters with corresponding session information, linking by theater _id and user_id, including theaters without sessions."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ ""fullplot"": { $regex: /sci-fi/i } }, { title: 1, fullplot: 1 });","Retrieve the titles and full plots of movies where the full plot contains 'sci-fi', using a case-insensitive search."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $group: { _id: ""$metacritic"", averageImdb: { $avg: ""$imdb.rating"" }, count: { $sum: 1 } } }])",Group movies by 'metacritic' and compute the average 'imdb.rating' and the total count of movies for each unique 'metacritic' value.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $lookup: { from: 'movies', localField: 'movie_id', foreignField: '_id', as: 'movie_info' }}, { $unwind: '$movie_info' }, { $project: { text: 1, movieTitle: '$movie_info.title' }}])","Retrieve comment text and corresponding movie title for each comment from the 'comments' collection, using the movie ID to look up titles in the 'movies' collection."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.sessions.aggregate([ { $group: { _id: ""$jwt"", count: { $sum: 1 } } }, { $match: { count: { $gt: 2 } } } ]);","Group session documents by the 'jwt' field and count occurrences, filtering for counts greater than 2."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $unwind: ""$genres"" }, { $group: { _id: ""$genres"", averageRating: { $avg: ""$imdb.rating"" } } }, { $sort: { averageRating: -1 } } ]);","Group movies by genre, calculate the average IMDb rating for each genre, and sort the results in descending order of average rating."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $match: { 'awards.wins': { $gt: 5 } } }, { $project: { title: 1, 'awards.wins': 1, 'awards.nominations': 1 } } ])","Retrieve the titles, wins, and nominations from the 'movies' collection for movies with more than 5 wins."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $lookup: { from: 'comments', localField: '_id', foreignField: 'movie_id', as: 'comments' } }, { $unwind: '$comments' }, { $group: { _id: '$title', totalComments: { $sum: 1 } } } ])","Aggregate movies and their comments, unwinding comments to count the total number per movie title."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.theaters.find({ ""location.address.city"": ""Los Angeles"" }, { theaterId: 1, ""location.address.state"": 1 })",Get the theaterId and state for theaters in Los Angeles.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([ { $group: { _id: ""$movie_id"", totalComments: { $sum: 1 } } }, { $lookup: { from: ""movies"", localField: ""_id"", foreignField: ""_id"", as: ""movieDetails"" } } ])",Count all comments grouped by 'movie_id' from the 'comments' collection and retrieve corresponding movie details from the 'movies' collection.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ ""tomatoes.viewer.meter"": { $gte: 80 } }, { title: 1, ""tomatoes.viewer.rating"": 1 })",Get the titles and viewer ratings of movies where the viewer meter rating is 80 or higher.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $unwind: '$directors' }, { $group: { _id: '$directors', totalMovies: { $sum: 1 } } }, { $sort: { totalMovies: -1 } }])","Group the movies by each director, count the number of movies per director, and sort the results in descending order of movie count."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $match: { 'imdb.votes': { $gt: 10000 } } }, { $project: { title: 1, 'imdb.rating': 1 } }, { $sort: { 'imdb.rating': -1 } } ])","Get the titles and IMDb ratings of movies with over 10,000 votes, sorted by IMDb rating in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $match: { num_mflix_comments: { $gt: 0 } } }, { $group: { _id: null, averageComments: { $avg: ""$num_mflix_comments"" } } }])",Get the average number of comments from movies with more than zero comments.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $group: { _id: ""$email"", totalComments: { $sum: 1 } } }, { $sort: { totalComments: -1 } }])","Group comments by email and count the total for each email, then sort by total comments in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.theaters.aggregate([{ $geoNear: { near: { type: 'Point', coordinates: [-118.2437, 34.0522] }, maxDistance: 10000, query: { 'location.address.city': 'Los Angeles' }, spherical: true } } }])","Get theaters within 10,000 meters of coordinates [-118.2437, 34.0522] in Los Angeles."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.sessions.aggregate([ { $group: { _id: ""$user_id"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } } ]);",Count the number of sessions for each user in the 'sessions' collection and include only users with more than one session.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([ { $lookup: { from: 'users', localField: 'email', foreignField: 'email', as: 'user' } }, { $unwind: '$user' }, { $group: { _id: '$user.email', totalMovies: { $sum: 1 } } } ])","Count the number of comments made by each user, grouping the results by user email."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $match: { released: { $gt: new Date('2000-01-01') } } }, { $group: { _id: '$year', count: { $sum: 1 } } }, { $sort: { _id: 1 } } ])","Get the number of movies released after January 1, 2000, grouped by release year and sorted in ascending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $match: { date: { $gte: new Date('2022-01-01') } } }, { $group: { _id: '$movie_id', totalComments: { $sum: 1 } } }])","Count the total comments for each movie from the 'comments' collection where the comment date is on or after January 1, 2022."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.find({ ""tomatoes.critic.meter"": { $lte: 40 } }, { title: 1, ""tomatoes.critic.rating"": 1 })",Get the titles and critic ratings of movies with a critic meter rating of 40 or less.
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $match: { genres: ""Drama"" } }, { $project: { title: 1, rating: ""$imdb.rating"", num_comments: ""$num_mflix_comments"" } }, { $sort: { rating: -1 } } ])","Get the titles, IMDb ratings, and the number of comments from the 'movies' collection for the genre 'Drama', sorted by IMDb ratings in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.comments.aggregate([{ $match: { text: { $regex: /great/i } } }, { $group: { _id: ""$movie_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Count comments containing the word 'great' grouped by movie ID, sorted by count in descending order."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $unwind: '$countries' }, { $group: { _id: '$countries', totalMovies: { $sum: 1 } } }, { $sort: { totalMovies: -1 } } ]);","Group the movies by country, count the total number of movies for each country, and sort the results in descending order by the count."
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({}),Get all documents from the movies collection.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({}),Get all documents from the 'sales' collection.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ couponUsed: true });,Get all sales records where a coupon was used.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ ""customer.gender"": ""female"" });",Get sales documents where the customer's gender is female.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.age': { $gte: 30 } }),Get sales documents for customers aged 30 and above.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ storeLocation: 'New York' });,Fetch sales records where the store location is 'New York'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ ""customer.satisfaction"": { $lt: 3 } });",Retrieve documents from the 'sales' collection where customer satisfaction is below 3.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ saleDate: { $gte: new Date('2023-01-01'), $lte: new Date('2023-12-31') } })","Retrieve all sales records where the sale date is from January 1, 2023, to December 31, 2023."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ items: { $in: [""itemA"", ""itemB""] } });",Get documents from the 'sales' collection where 'items' includes 'itemA' or 'itemB'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ purchaseMethod: 'online' });,Get all sales where the purchase method is online.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.email': /example\.com/ });,Find documents in the 'sales' collection where the customer's email contains 'example.com'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ $or: [{ 'customer.gender': 'male' }, { couponUsed: false }] });",Retrieve documents from the 'sales' collection where the customer is male or the coupon was not used.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ ""customer.age"": 25, ""customer.satisfaction"": { $gte: 4 } });",Get sales documents where the customer is 25 years old and has a satisfaction rating of 4 or higher.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.findOne({ _id: 'sale123' });,Get the sale document from the 'sales' collection with '_id' 'sale123'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ items: { $size: 3 } });,Retrieve sales documents with exactly three items.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ storeLocation: { $regex: /^Los/ } });,Retrieve documents from the 'sales' collection where 'storeLocation' begins with 'Los'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ saleDate: { $ne: new Date('2023-06-15T00:00:00Z') } });,"Get all sales records where the sale date is not June 15, 2023."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ ""customer.satisfaction"": { $gte: 4, $lte: 5 } });","Get sales documents where customer satisfaction is between 4 and 5, inclusive."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ couponUsed: true, purchaseMethod: 'in-store' });",Retrieve documents from the 'sales' collection where 'couponUsed' is true and 'purchaseMethod' is 'in-store'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ saleDate: { $lt: new Date('2023-05-01') }, storeLocation: 'Los Angeles' });","Fetch sales records with a sale date before May 1, 2023, located in Los Angeles."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find().sort({ saleDate: -1 });,Get all sales records sorted by saleDate in descending order.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ items: 'itemC' }).limit(5);,Get up to 5 sales documents where the items include 'itemC'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ couponUsed: true }),Retrieve all sales documents where the 'couponUsed' flag is true.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({}),Get all documents in the 'sales' collection.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ storeLocation: 'New York' }),Get all sales records from New York.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.gender': 'female' }),Get sales documents where the customer is female.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.age': { $gte: 25 } });,Get documents from the 'sales' collection where the customer's age is at least 25.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ couponUsed: true }),Fetch sales documents where a coupon was used.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.satisfaction': { $gt: 8 } }),Get sales records where customer satisfaction is above 8.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ saleDate: { $gte: new Date('2023-01-01') } });,"Retrieve all sales records from January 1, 2023, onwards."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ items: { $in: ['item1', 'item2'] } });",Retrieve documents from the 'sales' collection where 'items' contains either 'item1' or 'item2'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ purchaseMethod: 'online', 'customer.age': { $lt: 30 } });",Retrieve documents from the 'sales' collection where the 'purchaseMethod' is 'online' and the customer is under 30 years old.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ storeLocation: 'Los Angeles', couponUsed: false })",Get sales documents with 'storeLocation' as 'Los Angeles' and 'couponUsed' set to false.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.email': { $regex: '@gmail\.com$' } });,Get sales documents where the customer's email ends with '@gmail.com'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ saleDate: { $gte: new Date('2023-01-01'), $lt: new Date('2023-05-01') } });","Retrieve documents from the 'sales' collection where 'saleDate' is from January 1, 2023, to April 30, 2023."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ $expr: { $eq: [ { $size: '$items' }, 3 ] } })",Retrieve sales documents where the number of items is three.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ 'customer.satisfaction': { $lt: 5 }, 'storeLocation': 'Chicago' })",Get sales documents where customer satisfaction is below 5 and the store is located in Chicago.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.age': { $ne: 40 } });,Retrieve sales documents where the customer's age is not 40.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ saleDate: new Date('2023-04-01') });,"Get documents from the 'sales' collection where 'saleDate' is April 1, 2023."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ $or: [ { storeLocation: 'Miami' }, { couponUsed: true } ] });",Get sales documents where the store location is 'Miami' or a coupon was used.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ storeLocation: 'Seattle', 'customer.gender': 'male' });",Retrieve sales documents where the store location is 'Seattle' and the customer is male.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ items: 'item3', 'customer.satisfaction': { $gte: 6 } });",Find sales records where the items include 'item3' and customer satisfaction is 6 or higher.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ purchaseMethod: 'in-store', saleDate: { $gt: new Date('2023-06-01') } })","Get documents from the 'sales' collection where 'purchaseMethod' is 'in-store' and 'saleDate' is after June 1, 2023."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({}, { saleDate: 1, items: 1, storeLocation: 1, customer: 1, couponUsed: 1, purchaseMethod: 1 })","Retrieve all sales documents, including sale date, items sold, store location, customer details (gender, age, email, satisfaction), coupon usage, and purchase method."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ 'customer.gender': 'female' }),Get sales documents where the customer is female.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } }])",Group the sales documents by storeLocation and count the total sales for each location.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { couponUsed: true } }, { $group: { _id: '$customer.age', totalSales: { $sum: 1 } } } ])","Aggregate sales documents where 'couponUsed' is true, grouping by customer age and counting total sales for each age group."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: null, averageSatisfaction: { $avg: '$customer.satisfaction' } } }])",Calculate the average customer satisfaction from the sales collection.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ 'items': { $in: ['item1', 'item2'] } }).sort({ saleDate: -1 });","Retrieve sales documents where the 'items' contain 'item1' or 'item2', sorted by 'saleDate' in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: '$purchaseMethod', totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } }])","Group sales by 'purchaseMethod' and count total sales for each, then sort by total sales in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: '$customer.gender', totalSales: { $sum: 1 }, averageAge: { $avg: '$customer.age' } } }])","Group sales by customer gender, calculating total sales and average customer age for each gender."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { saleDate: { $gte: new Date('2023-01-01'), $lte: new Date('2023-12-31') } } }, { $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } }]);","Count total sales from the 'sales' collection for each store location where 'saleDate' is between January 1, 2023, and December 31, 2023."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { 'customer.satisfaction': { $gt: 4 } } }, { $count: 'totalHighSatisfactionSales' }])",Count the total sales where customer satisfaction is greater than 4.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: '$storeLocation', averageSatisfaction: { $avg: '$customer.satisfaction' } } }, { $sort: { averageSatisfaction: -1 } }])","Group sales by store location and calculate the average customer satisfaction, then sort by average satisfaction in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ couponUsed: false }, { items: 1, saleDate: 1 })","Retrieve documents from the 'sales' collection where 'couponUsed' is false, showing only 'items' and 'saleDate'."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: '$customer.email', totalSales: { $sum: 1 }, latestSaleDate: { $max: '$saleDate' } } }])","Group the sales documents by customer email, counting total sales and finding the date of the most recent sale for each customer."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $project: { storeLocation: 1, satisfaction: '$customer.satisfaction', itemsCount: { $size: '$items' } } } ])","Select the store location, customer satisfaction, and count of items from the 'sales' collection."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { 'customer.age': { $gte: 30 } } }, { $group: { _id: '$purchaseMethod', totalSales: { $sum: 1 } } } ])",Count the number of sales grouped by purchase method for customers aged 30 and older.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: '$customer.gender', totalCouponsUsed: { $sum: { $cond: [ '$couponUsed', 1, 0 ] } } } } ]);",Group the sales documents by customer gender and count the total number of coupon usages.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { items: 'itemA' } }, { $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } }])",Get the total number of sales for each store location where 'itemA' is sold.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: '$customer.age', totalSales: { $sum: 1 }, averageSatisfaction: { $avg: '$customer.satisfaction' } } }, { $sort: { totalSales: -1 } } ])","Group sales data by customer age, calculating total sales and average satisfaction for each age group, sorted by total sales in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { 'customer.satisfaction': { $gt: 3 } } }, { $project: { saleDate: 1, totalItems: { $size: '$items' } } }])","Retrieve sales documents where customer satisfaction is above 3, showing the sale date and the number of items sold."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { couponUsed: true, storeLocation: 'Store1' } }, { $group: { _id: '$items', totalSales: { $sum: 1 } } } ])",Count the total sales grouped by items in 'sales' where a coupon was used and the store location is 'Store1'.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.countDocuments({ 'customer.age': { $lt: 25 } }),Count the number of sales where the customer's age is under 25.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { couponUsed: true } }, { $group: { _id: ""$storeLocation"", totalSales: { $sum: 1 } } }])","Count the sales where a coupon was used, grouped by store location."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: ""$customer.gender"", averageSatisfaction: { $avg: ""$customer.satisfaction"" } } } ])","Compute the average customer satisfaction from the sales collection, grouped by gender."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ ""customer.age"": { $gte: 30 } }).sort({ saleDate: -1 });","Get all sales where the customer is 30 years or older, sorted by sale date in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: ""$purchaseMethod"", totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } }])","Group sales records by 'purchaseMethod', count the total sales for each method, and sort the results in descending order by total sales."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find({ 'customer.satisfaction': { $lte: 5 } }, { _id: 0, saleDate: 1, storeLocation: 1, customer: 1 })","Find documents in the 'sales' collection where customer satisfaction is 5 or less, showing the 'saleDate', 'storeLocation', and 'customer' fields while omitting the '_id' field."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: { year: { $year: ""$saleDate"" }, month: { $month: ""$saleDate"" } }, totalSales: { $sum: 1 } } }, { $sort: { ""_id.year"": 1, ""_id.month"": 1 } } ]);","Group sales records by year and month of the saleDate, count total sales for each month, and sort the results in ascending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $lookup: { from: 'customers', localField: 'customer.email', foreignField: 'email', as: 'customer_info' } }, { $match: { 'customer_info.gender': 'female' } }])",Retrieve sales data including customer information for female customers.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: ""$storeLocation"", totalItemsSold: { $sum: { $size: ""$items"" } } } } }])",Group sales records by store location and count the total items sold at each location by summing the lengths of the items array.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({ storeLocation: 'Downtown' }).sort({ saleDate: 1 });,Retrieve sales documents from 'Downtown' sorted by 'saleDate' in ascending order.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { ""customer.age"": { $gte: 18, $lte: 25 } } }, { $group: { _id: ""$storeLocation"", averageSatisfaction: { $avg: ""$customer.satisfaction"" } } } ])","Get the average customer satisfaction for sales where the customer's age is between 18 and 25, grouped by store location."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: ""$purchaseMethod"", totalCouponsUsed: { $sum: { $cond: [""$couponUsed"", 1, 0] } } } }])","Count the number of times coupons were used, grouped by purchase method, from the 'sales' collection."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { 'customer.gender': 'male', 'storeLocation': 'Uptown' } }, { $group: { _id: '$saleDate', totalSales: { $sum: 1 } } }])",Aggregate sales data to find the total number of sales per date for male customers at the Uptown store.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.find().sort({ ""customer.satisfaction"": -1 }).limit(5)",Get the top 5 sales documents sorted by customer satisfaction in descending order.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { saleDate: { $gte: new Date('2023-01-01') } } }, { $unwind: '$items' }, { $group: { _id: '$items', totalSales: { $sum: 1 } } } ])","Count the total sales for each item in the 'sales' collection for sales dated on or after January 1, 2023."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $project: { storeLocation: 1, customerSatisfaction: ""$customer.satisfaction"", itemsCount: { $size: ""$items"" } } }])","Retrieve the store location, customer satisfaction, and count of items sold from the sales collection."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { ""customer.email"": { $regex: /gmail.com$/ } } }, { $group: { _id: ""$storeLocation"", count: { $sum: 1 } } } ])",Aggregate sales documents by filtering customers with email addresses ending in 'gmail.com' and counting sales by store location.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: null, averageAge: { $avg: ""$customer.age"" }, totalCouponsUsed: { $sum: { $cond: [""$couponUsed"", 1, 0] } } } } ])","Compute the average age of customers and the total number of coupons used from the 'sales' collection, grouping all results together."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { storeLocation: 'Midtown' } }, { $group: { _id: null, totalSales: { $sum: 1 }, averageSatisfaction: { $avg: '$customer.satisfaction' } } }])",Aggregate sales from the 'sales' collection in 'Midtown' to get total sales and average customer satisfaction.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: ""$customer.gender"", totalSales: { $sum: 1 }, averageAge: { $avg: ""$customer.age"" } } } ]);","Group the sales by customer gender, counting total sales and calculating average age for each gender."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: ""$saleDate"", totalItems: { $sum: { $size: ""$items"" } } } }, { $sort: { totalItems: -1 } }])","Group the sales documents by 'saleDate', sum the total items sold for each date, and sort the results in descending order by total items."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { 'customer.gender': 'female' } }, { $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } }])",Count the number of sales grouped by store location for female customers.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: { $year: ""$saleDate"" }, totalRevenue: { $sum: { $cond: [ { $eq: [ ""$couponUsed"", false ] }, 1, 0 ] } } } }, { $sort: { _id: 1 } } ]);","Group sales by year based on 'saleDate', counting each sale without a coupon, and sort results by year in ascending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { 'customer.satisfaction': { $gt: 4 } } }, { $group: { _id: '$purchaseMethod', avgAge: { $avg: '$customer.age' } } } ])","Get the average age of customers with satisfaction greater than 4, grouped by purchase method."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: ""$storeLocation"", totalSales: { $sum: 1 }, averageSatisfaction: { $avg: ""$customer.satisfaction"" } } }, { $sort: { totalSales: -1 } }])","Group sales by store location, count total sales, calculate average customer satisfaction, and sort results by total sales in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: ""$customer.email"", totalSales: { $sum: 1 }, avgSatisfaction: { $avg: ""$customer.satisfaction"" } } } ])","Aggregate sales data by customer email, calculating the total number of sales and average customer satisfaction for each email."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: ""$couponUsed"", totalSales: { $sum: 1 }, avgAge: { $avg: ""$customer.age"" } } } ])","Group the sales documents by 'couponUsed', counting total sales and averaging customer age for each group."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: ""$storeLocation"", totalCouponsUsed: { $sum: { $cond: [""$couponUsed"", 1, 0] } } } }, { $match: { totalCouponsUsed: { $gt: 0 } } }])","Group the sales documents by store location and count the total coupons used where couponUsed is true, keeping only locations with more than zero coupons used."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { items: ""itemA"" } }, { $group: { _id: ""$customer.email"", totalPurchases: { $sum: 1 } } } ])",Count the number of purchases for each unique customer email in the 'sales' collection where 'itemA' was purchased.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { purchaseMethod: 'online' } }, { $group: { _id: { $year: '$saleDate' }, totalOnlineSales: { $sum: 1 } } }])",Count online sales by year from the 'sales' collection using the 'saleDate' field.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: ""$customer.email"", purchases: { $push: ""$$ROOT"" }, totalPurchases: { $sum: 1 } } }, { $match: { totalPurchases: { $gt: 1 } } } ]);","Group sales by customer email, aggregating purchase documents in a list and counting total purchases, including only customers with more than one purchase."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: ""$customer.gender"", avgSatisfaction: { $avg: ""$customer.satisfaction"" }, totalSales: { $sum: 1 } } } }])","Group sales by customer gender, calculating average satisfaction and total sales for each gender."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { storeLocation: 'Location1' } }, { $group: { _id: '$customer.age', totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } } ])","Get the count of sales for each customer age in 'Location1', sorted by total sales in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { $expr: { $eq: [{ $size: ""$items"" }, 3] } } }, { $count: ""totalSales"" }])",Count the total sales with exactly three items from the 'sales' collection.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { couponUsed: false } }, { $group: { _id: ""$purchaseMethod"", totalSales: { $sum: 1 }, totalRevenue: { $sum: ""$saleAmount"" } } } ]);","Group the sales by 'purchaseMethod', counting total sales and calculating total revenue for transactions where no coupon was used."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { 'customer.age': { $gt: 30 } } }, { $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } }])","Aggregate the sales to count total transactions for each store location where customers are over 30 years old, sorted by total transactions in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $facet: { online: [ { $match: { purchaseMethod: 'online' } }, { $count: 'count' } ], offline: [ { $match: { purchaseMethod: 'in-store' } }, { $count: 'count' } ] } } ]);","Count the number of sales made online and in-store from the 'sales' collection, with 'online' sales labeled as 'count' and 'in-store' sales labeled as 'count'."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $match: { 'customer.satisfaction': { $lt: 3 } } }, { $group: { _id: '$storeLocation', totalUnhappyCustomers: { $sum: 1 } } }])",Count the number of customers with satisfaction less than 3 for each store location in the 'sales' collection.
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $group: { _id: ""$storeLocation"", avgAge: { $avg: ""$customer.age"" }, totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } } ]);","Group the sales documents by store location, calculate the average customer age and total sales per location, then sort by total sales in descending order."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([{ $group: { _id: null, totalCouponsUsed: { $sum: { $cond: [ '$couponUsed', 1, 0 ] } }, totalSales: { $sum: 1 } } } }])","Count the total number of coupons used and total sales in the 'sales' collection, returning these values in one document."
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { ""customer.gender"": ""male"", ""customer.satisfaction"": { $gt: 3 } } }, { $group: { _id: ""$storeLocation"", totalSales: { $sum: 1 } } } ])","Aggregate sales data by filtering for male customers with satisfaction ratings above 3, then group and count the total sales by store location."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({}),Retrieve all documents from the 'data' collection.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ st: 'SampleStation' }),Get documents from the 'data' collection where 'st' is 'SampleStation'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ elevation: { $gt: 1000 } });,Find documents in the 'data' collection with 'elevation' greater than 1000.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""airTemperature.value"": { $lt: 0 } });",Get documents from the 'data' collection where the air temperature is below 0 degrees.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""callLetters"": { $regex: /^AB123/ } });",Get documents from the 'data' collection where 'callLetters' begin with 'AB123'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'wind.type': 'Gusty' }),Get documents from the 'data' collection where wind type is 'Gusty'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'visibility.distance.value': { $gte: 5000 } });,Get documents from the 'data' collection where visibility distance is at least 5000.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","{ ""sections"": { $exists: true, $ne: [] } }",Retrieve documents from the 'data' collection where the 'sections' field exists and is not empty.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""precipitationEstimatedObservation.estimatedWaterDepth"": { $exists: true } });",Get documents from the 'data' collection where 'estimatedWaterDepth' in 'precipitationEstimatedObservation' exists.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'skyCondition.cavok': 'Yes' });,Fetch documents from the 'data' collection where 'cavok' in 'skyCondition' is 'Yes'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""pastWeatherObservationManual.quality"": ""Good"" });",Retrieve documents from the 'data' collection where any 'pastWeatherObservationManual' entry has a 'quality' of 'Good'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""atmosphericPressureObservation.altimeterSetting.value"": { $lt: 30 } });",Find documents in the 'data' collection where the altimeter setting value is less than 30.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'waveMeasurement.waves.quality': 'Excellent' });,Get documents from the 'data' collection where the waves' quality is 'Excellent'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""dewPoint.value"": { $gte: 20, $lte: 30 } });",Get documents from the 'data' collection where 'dewPoint' value is between 20 and 30 inclusive.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""seaSurfaceTemperature.value"": { $ne: null } });",Retrieve all documents from the 'data' collection where sea surface temperature is not null.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'wind.direction.quality': 'Good' });,Retrieve documents from the 'data' collection where wind direction quality is 'Good'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""atmosphericPressureChange.tendency.code"": ""Rising"" });",Retrieve documents from the 'data' collection where the atmospheric pressure change tendency code is 'Rising'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'skyCoverLayer': { $exists: true } });,Get all documents in the 'data' collection where 'skyCoverLayer' is present.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""presentWeatherObservationManual"": { $size: 0 } });",Retrieve documents from the 'data' collection where the 'presentWeatherObservationManual' array is empty.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""skyConditionObservation.totalCoverage.value"": ""Fully Covered"" });",Fetch documents from the 'data' collection where the sky condition observation's total coverage is 'Fully Covered'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({}),Retrieve all documents from the 'data' collection.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'airTemperature.quality': 'good' });,Retrieve documents from the 'data' collection where the air temperature quality is 'good'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""position.type"": ""Point"" });",Find documents in the 'data' collection where 'position.type' is 'Point'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ elevation: { $gt: 1000 } });,Retrieve all documents from the 'data' collection with elevation greater than 1000.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'dewPoint.value': { $lt: 0 } });,Find documents in the 'data' collection where the dew point value is below 0.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""wind.speed.rate"": { $gte: 25 } });",Get documents from the 'data' collection where wind speed is at least 25.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""visibility.distance.value"": 1000 });",Get documents from the 'data' collection where visibility distance is 1000.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""skyCondition.ceilingHeight.value"": { $ne: null } });",Get the documents from the 'data' collection where the ceiling height in sky conditions is not null.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""precipitationEstimatedObservation.estimatedWaterDepth"": { $gte: 5 } });",Get documents from the 'data' collection where the estimated water depth is at least 5.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""atmosphericPressureObservation.altimeterSetting.value"": { $lt: 29.92 } });",Find documents in the 'data' collection where 'altimeterSetting' value in 'atmosphericPressureObservation' is less than 29.92.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ callLetters: { $regex: '^K' } });,Get documents from the 'data' collection where 'callLetters' begin with 'K'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'seaSurfaceTemperature.value': { $gt: 30 } });,Find documents in the 'data' collection where 'seaSurfaceTemperature' is greater than 30.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""waveMeasurement.method"": ""buoy"" });",Get documents from the 'data' collection where the wave measurement method is 'buoy'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ type: 'weather' });,Get documents from the 'data' collection where 'type' is 'weather'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ qualityControlProcess: { $in: [""verified"", ""pending""] } });",Get documents from the 'data' collection where 'qualityControlProcess' is 'verified' or 'pending'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ skyCoverLayer: { $exists: true, $ne: [] } })",Retrieve documents from the 'data' collection where the 'skyCoverLayer' field exists and is not empty.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""atmosphericPressureChange.tendency.code"": ""R"" });",Retrieve documents from the 'data' collection with atmospheric pressure change tendency code 'R'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ pastWeatherObservationManual: { $eq: [] } });,Retrieve documents from the 'data' collection with an empty 'pastWeatherObservationManual' array.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'presentWeatherObservationManual': { $exists: true } }),Get documents from the 'data' collection that have the 'presentWeatherObservationManual' field.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'wind.direction.quality': 'good' });,Get documents from the 'data' collection where wind direction quality is 'good'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ sections: { $all: [""A"", ""B""] } });",Retrieve documents from the 'data' collection where 'sections' contains both 'A' and 'B'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({}),Retrieve all documents from the 'data' collection.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'airTemperature.value': { $gt: 20 } });,Retrieve documents from the 'data' collection where air temperature is over 20.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { 'wind.direction.quality': 'good' } }, { $group: { _id: '$wind.type', avgSpeed: { $avg: '$wind.speed.rate' } } }])","From the 'data' collection, find the wind types with a 'good' quality for wind direction and calculate the average speed for each type."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ 'pressure.value': { $lt: 1013 }, 'qualityControlProcess': 'passed' })",Get documents from the 'data' collection where pressure is below 1013 and quality control is 'passed'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$callLetters"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Group the documents in the 'data' collection by 'callLetters' and count the occurrences, then sort the results in descending order by count."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""visibility.distance.value"": { $gt: 1000 } }).sort({ ""ts"": -1 });","Get documents from the 'data' collection where 'visibility.distance.value' exceeds 1000, sorted by timestamp in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { 'atmosphericPressureChange.tendency.code': 'up' } }, { $group: { _id: null, avgPressure: { $avg: '$atmosphericPressureObservation.stationPressure.value' } } }]);",Get the average station pressure from the 'data' collection for records where the atmospheric pressure change tendency is 'up'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""seaSurfaceTemperature.value"": { $gte: 15, $lte: 30 } });","Fetch documents from the 'data' collection where 'seaSurfaceTemperature' value is between 15 and 30, inclusive."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { presentWeatherObservationManual: { $ne: [] } } }, { $group: { _id: ""$st"", count: { $sum: 1 } } }])","Group the documents in the 'data' collection by the 'st' field, counting how many documents have a non-empty 'presentWeatherObservationManual' array."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'dewPoint.value': { $lt: 0 } });,Get documents from the 'data' collection where the dew point is below zero.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'precipitationEstimatedObservation.estimatedWaterDepth': { $gt: 5 } }).sort({ 'ts': -1 });,"Get all documents from the 'data' collection where the estimated water depth of precipitation exceeds 5, ordered by timestamp in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""skyCondition.ceilingHeight.value"": { $lt: 200 } });",Get documents from the 'data' collection where the ceiling height is less than 200.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$position.type"", avgElevation: { $avg: ""$elevation"" } } }, { $sort: { avgElevation: -1 } }])","Group documents by position type and calculate the average elevation for each, sorted by average elevation in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'wind.speed.quality': 'moderate' }).limit(10);,Get 10 documents from the 'data' collection where wind speed quality is 'moderate'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""pastWeatherObservationManual.0"": { $exists: true } }, { st: 1, ts: 1, pastWeatherObservationManual: 1 })","Retrieve documents from the 'data' collection where 'pastWeatherObservationManual' is not empty, returning only the 'st', 'ts', and 'pastWeatherObservationManual' fields."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""waveMeasurement.waves.quality"": ""good"" }).sort({ ""waveMeasurement.waves.height"": -1 }).limit(5);","Get up to 5 documents from the 'data' collection with wave measurement quality as 'good', sorted by wave height in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.countDocuments({ 'skyConditionObservation.lowestCloudBaseHeight.value': { $gte: 100 } });,Count the documents in the 'data' collection where 'lowestCloudBaseHeight' in 'skyConditionObservation' is at least 100.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({ 'atmosphericPressureObservation.altimeterSetting.value': { $gt: 30 } });,Retrieve documents from the 'data' collection where the altimeter setting of atmospheric pressure observations exceeds 30.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $lookup: { from: 'data', localField: 'ts', foreignField: 'ts', as: 'related_data' } }, { $unwind: '$related_data' }, { $group: { _id: '$_id', avgTemperature: { $avg: '$related_data.airTemperature.value' } } }]);","Aggregate the 'data' collection by looking up related documents based on matching timestamps, unwinding the related documents, and grouping by document ID to calculate the average air temperature."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""skyCoverLayer"": { $exists: true, $ne: [] } })",Get documents from the 'data' collection where 'skyCoverLayer' exists and is not empty.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""callLetters"": { $regex: /^A/ } }, { st: 1, ts: 1, callLetters: 1 })","Get documents from the 'data' collection where 'callLetters' start with 'A', returning only 'st', 'ts', and 'callLetters'."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""atmosphericPressureObservation.stationPressure.value"": { $gt: 990 } }).limit(15);",Get the first 15 documents from the 'data' collection where the station pressure value is greater than 990.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({}),Retrieve all documents from the 'data' collection.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { type: 'weather' } }, { $group: { _id: '$callLetters', averageTemperature: { $avg: '$airTemperature.value' } } }])",Get the average air temperature for weather entries grouped by call letters.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { 'wind.type': 'gust' } }, { $group: { _id: '$callLetters', maxWindSpeed: { $max: '$wind.speed.rate' } } }]);","Get the maximum wind speed for entries classified as 'gust', grouped by call letters from the 'data' collection."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""visibility.distance.value"": { $gte: 1000 } }).sort({ ""ts"": -1 });","Get documents from the 'data' collection where visibility distance is at least 1000, sorted by timestamp in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$sections"", avgPressure: { $avg: ""$atmosphericPressureObservation.stationPressure.value"" } } }, { $sort: { avgPressure: -1 } }]);","Group documents in the 'data' collection by the 'sections' field and calculate the average of 'stationPressure' in 'atmosphericPressureObservation' for each section, sorting the results by average pressure in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""airTemperature.quality"": ""good"" }, { _id: 0, callLetters: 1, airTemperature: 1 })","Get documents from the 'data' collection where air temperature quality is 'good', returning only the call letters and air temperature."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$type"", totalCount: { $sum: 1 } } }, { $match: { totalCount: { $gt: 10 } } }])","Count and group documents in the 'data' collection by the 'type' field, including only those with a count greater than 10."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $lookup: { from: 'data', localField: 'callLetters', foreignField: 'callLetters', as: 'relatedData' } }, { $unwind: '$relatedData' }, { $group: { _id: '$relatedData.callLetters', avgElevation: { $avg: '$relatedData.elevation' } } }])","Join the 'data' collection with itself on 'callLetters', unwind the results, and group by 'callLetters' to calculate the average elevation."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""precipitationEstimatedObservation.estimatedWaterDepth"": { $gt: 0 } }).sort({ ""ts"": -1 }).limit(5);","Fetch the latest 5 documents from the 'data' collection where 'estimatedWaterDepth' in 'precipitationEstimatedObservation' is greater than 0, sorted by 'ts' in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { 'dewPoint.value': { $lt: 0 } } }, { $group: { _id: '$callLetters', count: { $sum: 1 } } }])","Count occurrences in the 'data' collection where the dew point value is less than 0, grouped by call letters."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""skyCondition.ceilingHeight.value"": { $lt: 300 } }, { callLetters: 1, ""skyCondition.ceilingHeight.value"": 1 })",Get the call letters and ceiling height value for records with a ceiling height less than 300 in the 'data' collection.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$skyCondition.cavok"", count: { $sum: 1 } } }, { $sort: { count: -1 } }])","Count and group documents in the 'data' collection by unique values of the 'cavok' field in the 'skyCondition' object, sorted by count in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ 'pastWeatherObservationManual': { $ne: [] } }, { callLetters: 1, pastWeatherObservationManual: 1 })",Retrieve the call letters and past weather observations from the 'data' collection for documents with non-empty past weather observation manuals.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { 'wind.speed.rate': { $gte: 5 } } }, { $group: { _id: '$wind.direction.angle', avgWindSpeed: { $avg: '$wind.speed.rate' } } }])","Aggregate documents in the 'data' collection where wind speed is at least 5, grouping by wind direction angle to calculate the average wind speed."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""airTemperature.quality"": ""good"", ""pressure.quality"": ""acceptable"" }, { callLetters: 1, ""airTemperature.quality"": 1, ""pressure.quality"": 1 })","Retrieve the call letters, air temperature quality, and pressure quality from the 'data' collection where the air temperature quality is 'good' and the pressure quality is 'acceptable'."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$atmosphericPressureChange.tendency.code"", totalObservations: { $sum: 1 } } }, { $sort: { totalObservations: -1 } }])","Group the 'data' collection documents by the tendency code of atmospheric pressure change and count the total observations for each code, sorted in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""visibility.distance.value"": { $gt: 5000 } }, { ts: 1, ""visibility.distance.value"": 1 })",Retrieve the timestamps and visibility distance values from the 'data' collection where the visibility distance exceeds 5000.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { ""seaSurfaceTemperature.value"": { $gte: 25 } } }, { $group: { _id: ""$callLetters"", averageSeaTemp: { $avg: ""$seaSurfaceTemperature.value"" } } }]);",Get the average sea surface temperature for each unique call letter from the data collection where the sea surface temperature is at least 25 degrees.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $lookup: { from: 'data', localField: 'sections', foreignField: 'sections', as: 'relatedData' } }, { $unwind: '$relatedData' }, { $group: { _id: '$relatedData.sections', avgElevation: { $avg: '$elevation' } } }]);","Aggregate the 'data' collection, looking up related documents based on matching 'sections', unwinding the resulting documents, and grouping by 'sections' to calculate the average elevation for each group."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { skyCoverLayer: { $ne: [] } } }, { $group: { _id: null, totalLayers: { $sum: { $size: ""$skyCoverLayer"" } } } }])","Count the layers in the 'skyCoverLayer' field from the 'data' collection, excluding documents with an empty 'skyCoverLayer' array."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { 'atmosphericPressureObservation.altimeterSetting.value': { $lt: 1000 } } }, { $project: { _id: 0, callLetters: 1, altimeterSetting: '$atmosphericPressureObservation.altimeterSetting.value' } }]);",Retrieve the call letters and the altimeter setting from the 'data' collection for documents where the altimeter setting is less than 1000.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({}),Retrieve all documents from the 'data' collection.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $group: { _id: ""$callLetters"", averageTemperature: { $avg: ""$airTemperature.value"" } } } ])",Group the data by call letters and calculate the average air temperature for each group.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { type: 'weather' } }, { $group: { _id: '$qualityControlProcess', totalRecords: { $sum: 1 } } }])","Count records in the 'data' collection where 'type' is 'weather', grouped by 'qualityControlProcess'."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""elevation"": { $gt: 1000 } }).sort({ ""ts"": -1 }).limit(5)","Get the latest 5 documents from the 'data' collection where elevation is over 1000, sorted by timestamp in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $lookup: { from: 'sections', localField: 'sections', foreignField: '_id', as: 'sectionDetails' } }, { $unwind: '$sectionDetails' }, { $group: { _id: '$sectionDetails.name', count: { $sum: 1 } } } ])","Aggregate details of sections by looking up section information from the 'sections' collection where the 'sections' field matches the '_id' field, unwinding the results and counting occurrences for each section."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $match: { 'wind.speed.rate': { $gte: 15 } } }, { $group: { _id: null, averagePressure: { $avg: '$pressure.value' } } } ]);",Get the average pressure value from the 'data' collection for records where wind speed is 15 or higher.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ 'seaSurfaceTemperature.value': { $lt: 25 } }, { callLetters: 1, seaSurfaceTemperature: 1 })","Get documents from the 'data' collection where 'seaSurfaceTemperature' is below 25, showing only 'callLetters' and 'seaSurfaceTemperature'."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $facet: { temperatureStats: [ { $group: { _id: null, avg: { $avg: ""$airTemperature.value"" }, max: { $max: ""$airTemperature.value"" }, min: { $min: ""$airTemperature.value"" } } } ], pressureStats: [ { $group: { _id: null, avg: { $avg: ""$pressure.value"" }, max: { $max: ""$pressure.value"" }, min: { $min: ""$pressure.value"" } } } ] } } ]);","Calculate average, maximum, and minimum air temperature and pressure values from the 'data' collection using the aggregation framework."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$type"", totalRecords: { $sum: 1 }, averageElevation: { $avg: ""$elevation"" } } }, { $sort: { totalRecords: -1 } }])","Group the documents in the 'data' collection by 'type', count the records, and calculate the average elevation for each type, sorting by total records in descending order."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { pastWeatherObservationManual: { $ne: [] } } }, { $project: { st: 1, pastWeatherCount: { $size: ""$pastWeatherObservationManual"" } } }])",Fetch documents from the 'data' collection where 'pastWeatherObservationManual' is not empty and include the 'st' field and a count of items in 'pastWeatherObservationManual' as 'pastWeatherCount'.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $sort: { 'visibility.distance.value': -1 } }, { $group: { _id: '$callLetters', highestVisibility: { $first: '$visibility.distance.value' } } } ])","Sort documents in the 'data' collection by visibility distance in descending order, then group by call letters and select the highest visibility distance for each."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $match: { 'precipitationEstimatedObservation.estimatedWaterDepth': { $gt: 50 } } }, { $group: { _id: '$callLetters' } } ])",Count distinct call letters from the 'data' collection where estimated water depth is greater than 50.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $project: { st: 1, windSpeed: ""$wind.speed.rate"", windDirection: ""$wind.direction.angle"" }}, { $match: { windSpeed: { $gt: 20 }}}])","Retrieve the 'st' field, wind speed from 'wind.speed.rate', and wind direction from 'wind.direction.angle' for records where wind speed is greater than 20."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { 'skyCondition.ceilingHeight.value': { $gt: 2000 } } }, { $group: { _id: '$callLetters', averageCeilingHeight: { $avg: '$skyCondition.ceilingHeight.value' } } }])","Get the average ceiling height from the 'data' collection for records with ceiling height above 2000, grouped by call letters."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $match: { 'visibility.distance.value': { $gte: 10000 } } }, { $group: { _id: '$st', count: { $sum: 1 } } } ])","Count documents in the 'data' collection where visibility distance is at least 10,000, grouped by street (st)."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $group: { _id: ""$wind.type"", averageWindSpeed: { $avg: ""$wind.speed.rate"" } } }, { $sort: { averageWindSpeed: -1 } }])","Group the documents in the 'data' collection by wind type, calculate the average wind speed for each type, and sort the results in descending order by average wind speed."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $group: { _id: ""$callLetters"", avgTemperature: { $avg: ""$airTemperature.value"" } } }, { $lookup: { from: ""data"", localField: ""_id"", foreignField: ""callLetters"", as: ""stateInfo"" } }, { $unwind: ""$stateInfo"" }, { $project: { stateIdentifier: ""$stateInfo.st"", avgTemperature: 1 } } ]);",Retrieve the state identifier and average air temperature from the 'data' collection grouped by call letters.
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $group: { _id: ""$callLetters"", latestTimestamp: { $max: ""$ts"" } } }, { $lookup: { from: ""data"", localField: ""latestTimestamp"", foreignField: ""ts"", as: ""latestData"" } }, { $unwind: ""$latestData"" } ]);","Group documents in the 'data' collection by 'callLetters', retrieve the latest timestamp for each, and join with the corresponding documents that have that timestamp."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $match: { 'atmosphericPressureObservation.altimeterSetting.value': { $lt: 1000 } } }, { $project: { st: 1, altimeterQuality: '$atmosphericPressureObservation.altimeterSetting.quality' } } ]);","Retrieve documents from the 'data' collection where 'altimeterSetting.value' in 'atmosphericPressureObservation' is less than 1000, returning the 'st' field and 'altimeterSetting.quality'."
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $group: { _id: ""$qualityControlProcess"", count: { $sum: 1 }, avgElevation: { $avg: ""$elevation"" } } } ])","Group the documents in the 'data' collection by 'qualityControlProcess', counting the documents and calculating the average elevation for each group."
