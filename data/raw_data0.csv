database_id,schema,mongo_query,natural_language_query
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ department: 'Sales' }); ,"""Retrieve the documents of employees from the 'employees' collection who belong to the 'Sales' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ status: 'active' }); ","""Retrieve the documents of employees from the 'employees' collection whose status is 'active'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ salary: { $gte: 50000 } }); ","""Retrieve the documents of employees from the 'employees' collection whose salary is greater than or equal to 50,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.findOne({ employeeId: 'E123' }); ","""Retrieve a single document of an employee from the 'employees' collection where the employee's ID is 'E123'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ location: 'New York' }); ","""Retrieve the documents of departments from the 'departments' collection that are located in 'New York'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ budget: { $lt: 100000 } }); ","""Retrieve the documents from the 'departments' collection where the budget is less than 100,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ status: 'approved' }); ","""Retrieve all documents from the 'leaveRecords' collection where the status is 'approved'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ leaveType: 'sick' }); ","""Retrieve all documents from the 'leaveRecords' collection where the leave type is 'sick'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ managerId: ObjectId(""60d221f2f7d2bb3e12e7b404"") }); ","""Retrieve the documents of employees from the 'employees' collection who have a manager with the ObjectId '60d221f2f7d2bb3e12e7b404'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ hireDate: { $gte: new Date('2020-01-01') } }); ","""Retrieve the documents of employees from the 'employees' collection who were hired on or after January 1, 2020."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.findOne({ headId: ObjectId(""60d221f2f7d2bb3e12e7b405"") }); ","""Retrieve a single document from the 'departments' collection where the 'headId' matches the specified ObjectId '60d221f2f7d2bb3e12e7b405'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ firstName: 'John' }); ","""Retrieve the documents of employees from the 'employees' collection where the first name is 'John'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ lastName: 'Doe' }); ","""Retrieve the documents of employees from the 'employees' collection whose last name is 'Doe'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ employeeId: ObjectId(""60d221f2f7d2bb3e12e7b406"") }); ","""Retrieve all leave records from the 'leaveRecords' collection for the employee with the ID of 60d221f2f7d2bb3e12e7b406."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ startDate: { $lte: new Date('2023-01-01') } }); ","""Retrieve the documents of leave records from the 'leaveRecords' collection where the 'startDate' is on or before January 1, 2023."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ department: 'HR', status: 'active' }); ","""Retrieve the documents of employees from the 'employees' collection who belong to the 'HR' department and have an 'active' status."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ createdAt: { $gte: new Date('2021-01-01') } }); ","""Retrieve the documents from the 'departments' collection where the 'createdAt' date is on or after January 1, 2021."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.findOne({ _id: ObjectId(""60d221f2f7d2bb3e12e7b407"") }); ","""Retrieve a single document from the 'leaveRecords' collection where the document's ID matches the specific value of '60d221f2f7d2bb3e12e7b407'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ EmergencyContact: { relationship: 'parent' } }); ","""Retrieve the documents of employees from the 'employees' collection who have an emergency contact with the relationship of 'parent'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ department: 'IT', salary: { $gt: 70000 } }); ","""Retrieve the documents of employees from the 'employees' collection who work in the 'IT' department and have a salary greater than 70,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ name: 'Engineering' }); ","""Retrieve the documents of departments from the 'departments' collection where the name is 'Engineering'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
", ,"""Retrieve the documents of employees from the 'employees' collection, including their first name, last name, and email, where the employee's status is 'active', and sort the results by their hire date in ascending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
",db.employees.find({ department: 'Sales' }); ,"""Retrieve the documents of employees from the 'employees' collection who belong to the 'Sales' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ status: 'Active' }); ","""Retrieve all documents of employees from the 'employees' collection who have a status of 'Active'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ salary: { $gte: 50000 } }); ","""Retrieve the documents of employees from the 'employees' collection whose salary is greater than or equal to 50,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ hireDate: { $gte: new Date('2020-01-01') } }); ","""Retrieve the documents of employees from the 'employees' collection who were hired on or after January 1, 2020."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ email: /@gmail\.com$/ }); ","""Retrieve the documents of employees from the 'employees' collection whose email addresses end with '@gmail.com'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ location: 'New York' }); ","""Retrieve the documents from the 'departments' collection where the location is 'New York'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ budget: { $lt: 100000 } }); ","""Retrieve the documents from the 'departments' collection where the budget is less than 100,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ status: 'Approved' }); ","""Retrieve all documents from the 'leaveRecords' collection where the 'status' is 'Approved'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ leaveType: 'Sick Leave' }); ","""Retrieve the documents from the 'leaveRecords' collection where the leave type is 'Sick Leave'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ employeeId: ObjectId(""605c72f23a00b4bcf03a8d71"") }); ","""Retrieve all leave records from the 'leaveRecords' collection for the employee whose ID is '605c72f23a00b4bcf03a8d71'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ managerId: ObjectId(""605c72f23a00b4bcf03a8d70"") }); ","""Retrieve the documents of employees from the 'employees' collection who have a manager with the ID of '605c72f23a00b4bcf03a8d70'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ $or: [{ position: 'Developer' }, { position: 'Designer' }] }); ","""Retrieve the documents of employees from the 'employees' collection who hold the position of either 'Developer' or 'Designer'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.findOne({ employeeId: 'E12345' }); ","""Retrieve a single document from the 'employees' collection where the employeeId is 'E12345'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.findOne({ name: 'Human Resources' }); ","""Retrieve one document from the 'departments' collection where the department name is 'Human Resources'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ appliedDate: { $gte: new Date('2023-01-01') } }); ","""Retrieve the documents from the 'leaveRecords' collection where the 'appliedDate' is on or after January 1, 2023."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ firstName: 'John', lastName: 'Doe' }); ","""Retrieve the documents of employees from the 'employees' collection where the first name is 'John' and the last name is 'Doe'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.find({ headId: ObjectId(""605c72f23a00b4bcf03a8d72"") }); ","""Retrieve the documents of departments from the 'departments' collection where the 'headId' is equal to the specified ObjectId of '605c72f23a00b4bcf03a8d72'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ EmergencyContact.relationship: 'Brother' }); ","""Retrieve the documents of employees from the 'employees' collection who have an emergency contact with the relationship labeled as 'Brother'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.find({ phone: { $regex: /^123/ } }); ","""Retrieve the documents of employees from the 'employees' collection where the phone number starts with '123'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.find({ endDate: { $lte: new Date() } }); ","""Retrieve the documents from the 'leaveRecords' collection where the 'endDate' is less than or equal to the current date."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
", ,"""Retrieve all documents from the 'leaveRecords' collection where the 'status' is 'approved', including the 'employeeId', 'leaveType', 'startDate', 'endDate', 'reason', and 'appliedDate' fields."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $group: { _id: ""$department"", totalSalary: { $sum: ""$salary"" } } } ]); ","""Group the documents from the 'employees' collection by department and calculate the total salary for each department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { status: ""active"" } }, { $sort: { hireDate: -1 } } ]); ","""Retrieve the documents of active employees from the 'employees' collection, sorted by their hire date in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'departmentHead' } } ]); ","""Retrieve documents from the 'departments' collection and perform a lookup to include the corresponding employee documents from the 'employees' collection where the 'headId' in the 'departments' collection matches the '_id' in the 'employees' collection, and name the resulting field 'departmentHead'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: ""approved"" } }, { $group: { _id: ""$leaveType"", totalLeaves: { $sum: 1 } } } ]); ","""Retrieve the total count of approved leave records from the 'leaveRecords' collection, grouping the results by the type of leave."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { department: ""Sales"" } }, { $project: { firstName: 1, lastName: 1, salary: 1 } } ]); ","""Retrieve the first name, last name, and salary of employees from the 'employees' collection who belong to the 'Sales' department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $group: { _id: ""$location"", averageBudget: { $avg: ""$budget"" } } } ]); ","""Group the documents from the 'departments' collection by their location and calculate the average budget for each location."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { startDate: { $gte: new Date(""2023-01-01"") } } }, { $sort: { startDate: 1 } } ]); ","""Retrieve all leave records from the 'leaveRecords' collection where the 'startDate' is on or after January 1, 2023, and sort the results by 'startDate' in ascending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { managerId: { $ne: null } } }, { $lookup: { from: 'employees', localField: 'managerId', foreignField: '_id', as: 'managerDetails' } } ]); ","""Retrieve the documents of employees from the 'employees' collection who have a manager (where 'managerId' is not null) and include the details of their managers from the same 'employees' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: ""$position"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","""Group the documents in the 'employees' collection by their position, counting the number of employees in each position, and then sort the results by the count in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", leaveCount: { $sum: 1 } } }, { $match: { leaveCount: { $gt: 5 } } } ]); ","""Group the documents from the 'leaveRecords' collection by 'employeeId' to count the number of leave records for each employee, and then filter to include only those employees who have more than 5 leave records."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $sort: { createdAt: -1 } }, { $limit: 5 } ]); ","""Retrieve the last five documents from the 'departments' collection, sorted by their creation date in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveInfo' } }, { $match: { 'leaveInfo.status': ""pending"" } } ]); ","""Retrieve all employees from the 'employees' collection and include their corresponding leave information from the 'leaveRecords' collection where the leave status is 'pending'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { approvedBy: { $exists: true } } }, { $group: { _id: ""$approvedBy"", count: { $sum: 1 } } } ]); ","""Count the number of leave records from the 'leaveRecords' collection that have been approved, grouping the results by the ID of the approver."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { status: ""inactive"" } }, { $project: { firstName: 1, lastName: 1, department: 1 } } ]); ","""Retrieve the first name, last name, and department of employees from the 'employees' collection who have a status of 'inactive'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $match: { budget: { $gt: 100000 } } }, { $project: { name: 1, location: 1 } } ]); ","""Select the names and locations of departments from the 'departments' collection that have a budget greater than 100,000."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$reason"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","""Group the documents in the 'leaveRecords' collection by the 'reason' field, counting the number of occurrences for each reason, and then sort the results in descending order based on the count."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $project: { firstName: 1, lastName: 1, 'departmentDetails.description': 1 } } ]); ","""Retrieve the first name and last name of employees from the 'employees' collection and include the description of their respective departments by joining with the 'departments' collection based on the department name."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { endDate: { $lt: new Date() } } }, { $count: ""expiredLeavesCount"" } ]); ","""Count the number of expired leave records from the 'leaveRecords' collection where the 'endDate' is earlier than the current date."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $sort: { salary: -1 } }, { $limit: 10 } ]); ","""Sort the documents of employees from the 'employees' collection by their salary in descending order and limit the results to the top 10 highest salaries."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", lastUpdated: { $max: ""$lastUpdated"" } } }, { $sort: { lastUpdated: -1 } } ]);","""Group the leave records from the 'leaveRecords' collection by 'employeeId' and find the maximum 'lastUpdated' date for each employee, then sort the results by 'lastUpdated' in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $match: { status: ""active"" } }, { $group: { _id: ""$department"", totalSalary: { $sum: ""$salary"" } } } ]); ","""Retrieve the total salary of all active employees from the 'employees' collection, grouped by their department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $project: { name: 1, headId: 1, employeeCount: { $size: ""$employees"" } } } ]); ","""Aggregate the departments from the 'departments' collection, joining with the employees from the 'employees' collection where the department's ID matches the employees' department field, and project the department name, head ID, and the count of employees in each department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: ""approved"" } }, { $group: { _id: ""$leaveType"", totalLeaves: { $sum: { $subtract: [""$endDate"", ""$startDate""] } } } } ]); ","""Aggregate the documents from the 'leaveRecords' collection where the 'status' is 'approved', grouping by 'leaveType' to compute the total number of leaves taken, calculated as the difference between 'endDate' and 'startDate'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_info' } }, { $unwind: ""$department_info"" }, { $sort: { ""department_info.budget"": -1 } } ]); ","""Join the 'employees' collection with the 'departments' collection by matching the 'department' field in the employees with the 'name' field in departments, then unwind the joined department information, and sort the resulting documents by the department budget in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $match: { location: ""New York"" } }, { $sort: { createdAt: -1 } } ]); ","""Retrieve the documents from the 'departments' collection where the location is 'New York', sorted by the created date in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { managerId: { $ne: null } } }, { $group: { _id: ""$managerId"", totalEmployees: { $sum: 1 } } } ]); ","""Retrieve the documents of employees from the 'employees' collection where the 'managerId' is not null, and group the results by 'managerId' to count the total number of employees for each manager."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$employeeId"", totalLeaves: { $sum: 1 } } }, { $match: { totalLeaves: { $gt: 5 } } } ]); ","""Aggregate the leave records from the 'leaveRecords' collection to group by 'employeeId', calculating the total number of leaves for each employee. Then, filter the results to include only those employees who have taken more than 5 leaves."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: ""$position"", averageSalary: { $avg: ""$salary"" } } }, { $sort: { averageSalary: -1 } } ]); ","""Group the documents in the 'employees' collection by their position, calculating the average salary for each position, and sort the results by average salary in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { department: ""Sales"" } }, { $lookup: { from: 'leaveRecords', localField: 'employeeId', foreignField: 'employeeId', as: 'leaveInfo' } } ]); ","""Retrieve the documents of employees from the 'employees' collection who work in the 'Sales' department, and include their related leave information from the 'leaveRecords' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leavesRecords.aggregate([ { $match: { approvedBy: { $nin: [null] } } }, { $group: { _id: ""$approvedBy"", leaveCount: { $sum: 1 } } } ]); ","""Count the number of leave records from the 'leaveRecords' collection for each approver, filtering out any records where the 'approvedBy' field is null."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: 'employeeId', foreignField: 'employeeId', as: 'leaves' } }, { $project: { firstName: 1, lastName: 1, totalLeaves: { $size: ""$leaves"" } } } ]); ","""Aggregate the documents from the 'employees' collection by performing a lookup to include related leave records from the 'leaveRecords' collection, matching on the 'employeeId'. Then project the results to display the first name, last name, and the total number of leaves, which is calculated as the size of the array containing the leave records."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $group: { _id: null, totalBudget: { $sum: ""$budget"" } } } ]); ","""Calculate the total budget from all documents in the 'departments' collection by summing the 'budget' field."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { startDate: { $gte: new Date(""2023-01-01"") } } }, { $count: ""approvedLeaveCount"" } ]); ","""Count the number of approved leave records from the 'leaveRecords' collection where the 'startDate' is on or after January 1, 2023."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: ""$department"", highestSalary: { $max: ""$salary"" } } } ]); ","""Group the employees from the 'employees' collection by their department, and calculate the highest salary within each department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: ""$leaveType"", averageDuration: { $avg: { $subtract: [""$endDate"", ""$startDate""] } } } }, { $sort: { averageDuration: -1 } } ]); ","""Calculate the average duration of leave for each leave type from the 'leaveRecords' collection, grouping the results by 'leaveType' and sorting the average duration in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { ""EmergencyContact.relationship"": ""Parent"" } }, { $sort: { hireDate: 1 } } ]); ","""Retrieve the documents of employees from the 'employees' collection who have an emergency contact with the relationship of 'Parent', sorted by their hire date in ascending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'head' } }, { $project: { name: 1, head: { $arrayElemAt: [""$head.firstName"", 0] } } } ]); ","""Retrieve the names of all departments from the 'departments' collection and include the first name of their respective heads from the 'employees' collection, where the head is identified by the headId field."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: ""pending"" } }, { $group: { _id: ""$employeeId"", pendingLeaveCount: { $sum: 1 } } } ]); ","""Count the number of pending leave records from the 'leaveRecords' collection, grouping the results by each employee's ID where the status is 'pending'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $unwind: ""$departmentDetails"" }, { $addFields: { departmentBudget: ""$departmentDetails.budget"" } } ]); ","""Retrieve the information of employees from the 'employees' collection and include details about their respective departments by looking up the department details from the 'departments' collection, where the department field in employees matches the name field in departments. Unwind the department details and add the department budget as a new field in the employee documents."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $sort: { appliedDate: -1 } }, { $group: { _id: null, recentLeave: { $first: ""$$ROOT"" } } } ]);","""Retrieve the most recent leave record from the 'leaveRecords' collection, sorted by the 'appliedDate' in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
","db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_info' } }, { $unwind: '$department_info' }, { $group: { _id: '$department_info.name', totalSalary: { $sum: '$salary' }, employeeCount: { $sum: 1 } } } ]); ","""Aggregate the data from the 'employees' collection by joining it with the 'departments' collection, using the department field from the employees to match with the name field in departments, and create an array field called 'department_info' to hold the matched department details. Then, unwind the 'department_info' array, and group the results by the department name, calculating the total salary for each department and counting the number of employees in each department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: '$leaveType', totalLeaves: { $sum: 1 }, leaveStatus: { $push: '$status' } } }, { $match: { totalLeaves: { $gt: 5 } } } ]); ","""Group the leave records from the 'leaveRecords' collection by 'leaveType', calculating the total number of leaves for each type and collecting the statuses of those leaves, and then filter the results to only include leave types with a total greater than 5."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $unwind: '$employees' }, { $group: { _id: '$name', averageSalary: { $avg: '$employees.salary' } } } ]); ","""Retrieve the average salary of employees from the 'departments' collection, joining with the 'employees' collection based on the department, and group the results by department name."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { status: 'active' } }, { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveRecords' } }, { $unwind: { path: '$leaveRecords', preserveNullAndEmptyArrays: true } }, { $group: { _id: '$firstName', totalLeaves: { $sum: { $cond: [ { $eq: ['$leaveRecords.status', 'approved'] }, 1, 0 ] } } } } ]); ","""Retrieve the documents of active employees from the 'employees' collection, and for each employee, include their related leave records from the 'leaveRecords' collection by matching the employee's ID with the employeeId in the leave records. Then, unwind the leave records to handle cases where an employee may not have any leave records. Finally, group the results by the employee's first name and calculate the total number of approved leave records for each employee."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $group: { _id: '$location', totalBudget: { $sum: '$budget' }, departmentCount: { $sum: 1 } } }, { $sort: { totalBudget: -1 } } ]); ","""Group the documents from the 'departments' collection by 'location', calculating the total budget for each location and the count of departments in each location, then sort the results by the total budget in descending order."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $group: { _id: '$managerId', employeeCount: { $sum: 1 } } }, { $lookup: { from: 'employees', localField: '_id', foreignField: '_id', as: 'managers' } }, { $unwind: '$managers' }, { $project: { managerName: { $concat: ['$managers.firstName', ' ', '$managers.lastName'] }, employeeCount: 1 } } ]); ","""Group the documents in the 'employees' collection by 'managerId' to count the number of employees under each manager, and then join this data with the 'employees' collection to retrieve the corresponding manager information, followed by extracting the full name of each manager and the total employee count."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: { $year: '$startDate' }, totalLeaves: { $sum: 1 }, approvedLeaves: { $sum: { $cond: [ { $eq: ['$status', 'approved'] }, 1, 0 ] } } } } ]); ","""Group the leave records from the 'leaveRecords' collection by the year of the 'startDate', calculating the total number of leaves taken each year and the total number of approved leaves, where approved leaves are counted only if the 'status' is 'approved'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.department.aggregate([ { $lookup: { from: 'employees', localField: '_id', foreignField: 'department', as: 'employees' } }, { $project: { name: 1, employeeCount: { $size: '$employees' }, averageSalary: { $avg: '$employees.salary' } } } ]); ","""Perform an aggregation on the 'departments' collection to join with the 'employees' collection, matching the department ID from the 'departments' collection with the department field in the 'employees' collection. Select the department name, count the number of employees in each department, and calculate the average salary of those employees."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { status: 'active' } }, { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveRecords' } }, { $unwind: { path: '$leaveRecords', preserveNullAndEmptyArrays: true } }, { $group: { _id: '$employeeId', totalLeaveDays: { $sum: { $subtract: ['$leaveRecords.endDate', '$leaveRecords.startDate'] } } } } ]); ","""Retrieve the documents of employees from the 'employees' collection who have an 'active' status, and for each employee, include related leave records from the 'leaveRecords' collection. Calculate the total leave days for each employee by subtracting the 'startDate' from the 'endDate' of their leave records, grouping the results by 'employeeId'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'leaveRecords', localField: '_id', foreignField: 'employeeId', as: 'leaveRecords' } }, { $unwind: '$leaveRecords' }, { $group: { _id: '$employeeId', totalApprovedLeaves: { $sum: { $cond: [ { $eq: ['$leaveRecords.status', 'approved'] }, 1, 0 ] } } } } ]); ","""Retrieve the total number of approved leaves for each employee from the 'employees' collection by joining with the 'leaveRecords' collection, where the employee's ID matches the leave record's employee ID. Unwind the leave records and group the results by employee ID, summing the count of approved leaves."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: 'pending' } }, { $group: { _id: '$employeeId', pendingLeaveCount: { $sum: 1 } } }, { $lookup: { from: 'employees', localField: '_id', foreignField: '_id', as: 'employeeDetails' } } ]); ","""Aggregate the leave records from the 'leaveRecords' collection to find all records with a status of 'pending', group the results by 'employeeId' to count the number of pending leaves for each employee, and include their corresponding employee details from the 'employees' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.departments.aggregate([ { $lookup: { from: 'employees', localField: 'headId', foreignField: '_id', as: 'departmentHead' } }, { $project: { name: 1, headName: { $concat: [{ $arrayElemAt: ['$departmentHead.firstName', 0] }, ' ', { $arrayElemAt: ['$departmentHead.lastName', 0] }] } }, budget: 1 } } ]); ","""Perform an aggregation on the 'departments' collection to join with the 'employees' collection, matching the 'headId' field from the 'departments' collection to the '_id' field in the 'employees' collection. Select the department name, concatenate the first and last name of the department head from the joined employee records, and include the budget from the 'departments' collection."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { position: 'Software Engineer' } }, { $group: { _id: '$department', averageSalary: { $avg: '$salary' }, employeeCount: { $sum: 1 } } } ]); ","""Retrieve the average salary and the count of employees from the 'employees' collection for those who hold the position of 'Software Engineer', grouped by their department."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $group: { _id: '$reason', totalCount: { $sum: 1 } } }, { $sort: { totalCount: -1 } }, { $limit: 5 } ]); ","""Group the documents from the 'leaveRecords' collection by the 'reason' field, counting the total number of occurrences for each reason, sort the results by this total count in descending order, and limit the output to the top five reasons."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $match: { salary: { $gt: 70000 } } }, { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'departmentDetails' } }, { $project: { firstName: 1, lastName: 1, department: { $arrayElemAt: ['$departmentDetails', 0] } } } ]); ","""Retrieve the documents of employees from the 'employees' collection whose salary is greater than 70,000, and include the department details from the 'departments' collection, while projecting only the first name, last name, and the first department detail."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $match: { status: 'approved' } }, { $group: { _id: null, totalHours: { $sum: { $subtract: ['$endDate', '$startDate'] } } } } ]); ","""Calculate the total hours of approved leave from the 'leaveRecords' collection by summing the duration of each leave record, where the status of the leave record is 'approved'."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.employees.aggregate([ { $lookup: { from: 'departments', localField: 'department', foreignField: 'name', as: 'department_info' } }, { $unwind: '$department_info' }, { $group: { _id: '$department_info.headId', totalSalaries: { $sum: '$salary' } } } ]); ","""Aggregate the data from the 'employees' collection by looking up related department information from the 'departments' collection where the 'department' field in the employees matches the 'name' field in departments. Unwind the department information and group the results by the department head ID, calculating the total salaries for each head."""
hr_management,"{
  // Employees Collection
  “employees”: {
    _id: ObjectId,
    employeeId: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    department: String,
    position: String,
    salary: Decimal128,
    hireDate: Date,
    status: String,
    managerId: ObjectId,
    EmergencyContact: {
      name: String,
      relationship: String,
      phone: String
    }
  },

  // Departments Collection
  “departments”: {
    _id: ObjectId,
    name: String,
    description: String,
    headId: ObjectId,
    budget: Decimal128,
    location: String,
    createdAt: Date
  },

  // Leave Records Collection
  leaveRecords: {
    _id: ObjectId,
    employeeId: ObjectId,
    leaveType: String,
    startDate: Date,
    endDate: Date,
    status: String,
    reason: String,
    approvedBy: ObjectId,
    appliedDate: Date,
    lastUpdated: Date
  }
}
"," 
db.leaveRecords.aggregate([ { $lookup: { from: 'employees', localField: 'approvedBy', foreignField: '_id', as: 'approverInfo' } }, { $unwind: '$approverInfo' }, { $group: { _id: '$approverInfo.firstName', totalApprovedLeaves: { $sum: 1 } } } ]);","""Retrieve the total number of approved leave records from the 'leaveRecords' collection, grouping by the first names of the approvers, and include approver information from the 'employees' collection where the 'approvedBy' field in 'leaveRecords' matches the '_id' field in 'employees'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true }); ,"""Retrieve the documents of active products from the 'products' collection where the 'isActive' field is set to true."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ category: 'Electronics' }); ","""Retrieve the documents of products from the 'products' collection that belong to the 'Electronics' category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ price: { $lt: 100 } }); ","""Retrieve the documents of products from the 'products' collection where the price is less than 100."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ stockQuantity: { $gt: 0 } }); ","""Retrieve the documents of products from the 'products' collection where the stock quantity is greater than zero."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ name: /phone/i }); ","""Retrieve the documents of products from the 'products' collection where the name contains the word 'phone', regardless of case."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ status: 'Pending' }); ","""Retrieve all documents from the 'orders' collection where the status is 'Pending'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ totalAmount: { $gte: 50 } }); ","""Retrieve all documents from the 'orders' collection where the 'totalAmount' is greater than or equal to 50."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ 'shippingAddress.city': 'New York' }); ","""Retrieve the documents of orders from the 'orders' collection where the shipping address is in the city of 'New York'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ orderDate: { $gte: new Date('2023-01-01') } }); ","""Retrieve all documents from the 'orders' collection where the 'orderDate' is on or after January 1, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ customerId: 'C123' }); ","""Retrieve all documents from the 'orders' collection where the 'customerId' is 'C123'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.findOne({ _id: ObjectId('60c72b2f9b1df4f3d8e7d921') }); ","""Retrieve the document of a product from the 'products' collection with the specific identifier of '60c72b2f9b1df4f3d8e7d921'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.findOne({ _id: ObjectId('60c72b2f9b1df4f3d8e7d933') }); ","""Retrieve the document from the 'orders' collection where the document's unique identifier matches the ObjectId '60c72b2f9b1df4f3d8e7d933'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ isActive: true, category: 'Home Appliances' }); ","""Retrieve the documents of products from the 'products' collection that are active and belong to the 'Home Appliances' category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ 'items.productId': ObjectId('60c72b2f9b1df4f3d8e7d921') }); ","""Retrieve all documents from the 'orders' collection where the 'items' array contains a product with the ID '60c72b2f9b1df4f3d8e7d921'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ name: { $exists: true } }); ","""Retrieve all documents from the 'products' collection where the 'name' field exists."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ paymentMethod: 'Credit Card' }); ","""Retrieve all documents from the 'orders' collection where the payment method is 'Credit Card'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ description: { $ne: null } }); ","""Retrieve all documents from the 'products' collection where the 'description' field is not null."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ 'shippingAddress.country': 'USA', status: 'Shipped' }); ","""Retrieve the documents of orders from the 'orders' collection where the shipping address country is 'USA' and the order status is 'Shipped'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ stockQuantity: { $lte: 10 } }); ","""Retrieve the documents of products from the 'products' collection where the stock quantity is less than or equal to 10."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ lastUpdated: { $gte: new Date('2023-02-01') } }); ","""Retrieve all documents from the 'orders' collection where the 'lastUpdated' date is on or after February 1, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ createdAt: { $lt: new Date('2022-01-01') } }); ","""Retrieve the documents of products from the 'products' collection that were created before January 1, 2022."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",,"""Retrieve all products from the 'products' collection where the 'isActive' field is true and sort them by 'price' in ascending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find(); ,"""Retrieve all documents from the 'products' collection."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ isActive: true }); ","""Retrieve the documents of active products from the 'products' collection where the 'isActive' field is true."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ category: 'Electronics' }); ","""Retrieve the documents of products from the 'products' collection that are categorized under 'Electronics'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ price: { $lt: 100 } }); ","""Retrieve the documents of products from the 'products' collection where the price is less than 100."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find(); ","""Retrieve all documents from the 'orders' collection."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ status: 'Shipped' }); ","""Retrieve all documents from the 'orders' collection where the status of the orders is 'Shipped'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ customerId: '12345' }); ","""Retrieve the documents of orders from the 'orders' collection where the 'customerId' is '12345'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ 'shippingAddress.city': 'New York' }); ","""Retrieve the documents of orders from the 'orders' collection where the shipping address is in the city of 'New York'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ stockQuantity: { $gt: 0 } }); ","""Retrieve the documents of products from the 'products' collection where the stock quantity is greater than zero."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ totalAmount: { $gte: 50 } }); ","""Retrieve the documents from the 'orders' collection where the 'totalAmount' is greater than or equal to 50."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ name: { $regex: 'phone', $options: 'i' } }); ","""Retrieve the documents of products from the 'products' collection where the 'name' field contains the substring 'phone', case insensitive."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ orderDate: { $gte: new Date('2023-01-01') } }); ","""Retrieve all documents from the 'orders' collection where the 'orderDate' is on or after January 1, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ createdAt: { $lt: new Date('2022-01-01') } }); ","""Retrieve the documents of products from the 'products' collection where the 'createdAt' date is earlier than January 1, 2022."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ name: 'Laptop', isActive: true }); ","""Retrieve the documents of products from the 'products' collection where the name is 'Laptop' and the isActive field is true."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ paymentMethod: 'Credit Card' }); ","""Retrieve all documents from the 'orders' collection where the payment method is 'Credit Card'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ category: 'Furniture', isActive: false }); ","""Retrieve the documents of products from the 'products' collection that belong to the 'Furniture' category and are not active."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ quantity: { $gt: 2 }, status: 'Pending' }); ","""Retrieve all documents from the 'orders' collection where the quantity of items is greater than 2 and the status of the order is 'Pending'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ price: { $gt: 500, $lt: 1500 } }); ","""Retrieve the documents of products from the 'products' collection where the price is greater than 500 and less than 1500."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ lastUpdated: { $gte: new Date('2023-01-01T00:00:00Z') } }); ","""Retrieve all documents from the 'orders' collection where the 'lastUpdated' date is on or after January 1, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ 'items.productId': ObjectId(""60d5b2d319c8e93d8e4e2a01"") }); ","""Retrieve the documents of orders from the 'orders' collection that contain items where the product ID matches '60d5b2d319c8e93d8e4e2a01'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ description: { $regex: 'wireless', $options: 'i' } }); ","""Retrieve the documents of products from the 'products' collection where the description contains the word 'wireless', ignoring case."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",,"""Retrieve all documents from the 'orders' collection, joining the related product information from the 'products' collection using the 'productId' field in the order items, and filter the results to include only those orders where the 'status' is 'shipped'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",db.products.find({ isActive: true }); ,"""Retrieve the documents of active products from the 'products' collection where the 'isActive' field is set to true."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([{ $match: { category: ""Electronics"" } }, { $group: { _id: null, averagePrice: { $avg: ""$price"" } } }]); ","""Calculate the average price of products from the 'products' collection that belong to the 'Electronics' category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ status: ""Shipped"" }).sort({ orderDate: -1 }); ","""Retrieve the documents of orders from the 'orders' collection where the status is 'Shipped', sorted by the order date in descending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([{ $match: { paymentMethod: ""Credit Card"" } }, { $group: { _id: ""$customerId"", totalSpending: { $sum: ""$totalAmount"" } } }]); ","""Aggregate the orders from the 'orders' collection where the payment method is 'Credit Card', grouping the results by customer ID and calculating the total spending for each customer."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ stockQuantity: { $lt: 10 } }); ","""Retrieve the documents of products from the 'products' collection where the stock quantity is less than 10."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([{ $unwind: ""$items"" }, { $group: { _id: ""$items.productId"", totalSold: { $sum: ""$items.quantity"" } } }]); ","""Unwind the items in the orders from the 'orders' collection, then group the data by product ID from the items, calculating the total quantity sold for each product."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([{ $match: { category: ""Books"" } }, { $sort: { price: 1 } }, { $limit: 5 }]); ","""Retrieve the documents of products from the 'products' collection that belong to the 'Books' category, sorted by their price in ascending order, and limit the results to the first five products."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([{ $match: { orderDate: { $gte: new Date(""2023-01-01"") } } }, { $count: ""recentOrders"" }]); ","""Count the number of orders from the 'orders' collection where the 'orderDate' is on or after January 1, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ name: /phone/i }); ","""Retrieve the documents of products from the 'products' collection where the name matches the regular expression 'phone', case insensitive."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([{ $match: { status: ""Pending"" } }, { $group: { _id: null, totalPending: { $sum: ""$totalAmount"" } } }]); ","""Calculate the total amount of all orders from the 'orders' collection that have a status of 'Pending'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([{ $group: { _id: ""$category"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","""Group the documents in the 'products' collection by their category and count the number of products in each category, then sort the results by the count in descending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([{ $lookup: { from: ""products"", localField: ""items.productId"", foreignField: ""_id"", as: ""productDetails"" } }, { $unwind: ""$productDetails"" }, { $match: { ""productDetails.category"": ""Electronics"" } }]); ","""Retrieve all orders from the 'orders' collection, joining the product details from the 'products' collection based on the product IDs in the order items. Additionally, filter the results to include only those products that belong to the 'Electronics' category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ ""shippingAddress.city"": ""New York"" }); ","""Retrieve the documents of orders from the 'orders' collection where the shipping address city is 'New York'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([{ $match: { price: { $gte: 20, $lte: 100 } } }, { $project: { name: 1, price: 1 } }]); ","""Retrieve the products from the 'products' collection where the price is between 20 and 100, inclusive, and include only the name and price fields in the result."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([{ $group: { _id: { $year: ""$orderDate"" }, totalOrders: { $sum: 1 } } }]); ","""Aggregate the documents from the 'orders' collection to group the results by the year of 'orderDate', and calculate the total number of orders for each year."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ totalAmount: { $gt: 500 } }).sort({ orderDate: 1 }); ","""Retrieve the documents of orders from the 'orders' collection where the total amount is greater than 500, sorted by the order date in ascending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([{ $group: { _id: ""$isActive"", count: { $sum: 1 } } }]); ","""Group the documents in the 'products' collection by the 'isActive' field and count the number of occurrences for each unique value of 'isActive'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.updateMany({ status: ""Cancelled"" }, { $set: { lastUpdated: new Date() } }); ","""Update all documents in the 'orders' collection where the status is 'Cancelled' and set the lastUpdated field to the current date and time."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ createdAt: { $gte: new Date(""2022-01-01"") } }); ","""Retrieve the documents of products from the 'products' collection that were created on or after January 1, 2022."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([{ $match: { orderDate: { $gte: new Date(""2023-01-01"") } } }, { $project: { customerId: 1, totalAmount: 1 } }]); ","""Retrieve the documents from the 'orders' collection where the 'orderDate' is on or after January 1, 2023, and project only the 'customerId' and 'totalAmount' fields."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",,"""Retrieve all documents from the 'products' collection where the 'isActive' field is true and order the results by the 'price' field in ascending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $match: { status: 'Shipped' } }, { $group: { _id: '$customerId', totalSpent: { $sum: '$totalAmount' } } } ]); ","""Retrieve the total amount spent by each customer from the 'orders' collection where the order status is 'Shipped', grouping the results by customer ID."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { isActive: true } }, { $sort: { price: 1 } }, { $group: { _id: '$category', averagePrice: { $avg: '$price' } } } ]); ","""Retrieve the active products from the 'products' collection, sorted by their price in ascending order, and calculate the average price of products grouped by their category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $group: { _id: { $dateToString: { format: ""%Y-%m"", date: ""$orderDate"" } }, totalOrders: { $sum: 1 }, totalRevenue: { $sum: ""$totalAmount"" } } }, { $sort: { _id: 1 } } ]); ","""Group the orders from the 'orders' collection by month of the 'orderDate', calculating the total number of orders and the total revenue for each month, and then sort the results in ascending order by month."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ paymentMethod: 'Credit Card', orderDate: { $gte: new Date('2023-01-01') } }); ","""Retrieve the documents of orders from the 'orders' collection where the payment method is 'Credit Card' and the order date is on or after January 1, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $lookup: { from: 'orders', localField: '_id', foreignField: 'items.productId', as: 'orderDetails' } }, { $match: { 'orderDetails': { $ne: [] } } } ]); ","""Retrieve the documents of products from the 'products' collection that have associated order details in the 'orders' collection, specifically selecting those products that have been ordered at least once."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $unwind: '$items' }, { $group: { _id: '$items.productId', totalSold: { $sum: '$items.quantity' }, totalRevenue: { $sum: '$items.price' } } }, { $sort: { totalSold: -1 } } ]); ","""Aggregate the order items from the 'orders' collection by unwinding the 'items' array, grouping the results by 'productId' to calculate the total quantity sold and total revenue per product, and then sort the results in descending order based on the total quantity sold."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ stockQuantity: { $lt: 10 }, isActive: true }); ","""Retrieve the documents of products from the 'products' collection where the stock quantity is less than 10 and the products are active."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { status: 'Pending' } }, { $group: { _id: '$customerId', pendingOrders: { $sum: 1 } } }, { $sort: { pendingOrders: -1 } } ]); ","""Count the number of pending orders from the 'orders' collection, grouping the results by 'customerId' and sorting the grouped results by the count of pending orders in descending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ 'shippingAddress.city': 'New York' }); ","""Retrieve the documents from the 'orders' collection where the shipping address city is 'New York'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $group: { _id: '$category', totalStock: { $sum: '$stockQuantity' } } }, { $sort: { totalStock: -1 } } ]); ","""Group the products from the 'products' collection by their category and calculate the total stock quantity for each category, then sort the results by the total stock quantity in descending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { status: 'Completed' } }, { $group: { _id: '$customerId', orderCount: { $sum: 1 }, totalAmount: { $sum: '$totalAmount' } } }, { $sort: { totalAmount: -1 } } ]); ","""Retrieve the count of completed orders from the 'orders' collection, grouping the results by 'customerId' to include the number of orders each customer has made and the total amount spent, then sort the results by the total amount in descending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ price: { $gte: 50, $lt: 100 }, isActive: true }); ","""Retrieve the documents of products from the 'products' collection that are active and have a price greater than or equal to 50 and less than 100."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $group: { _id: { $year: '$orderDate' }, totalOrders: { $sum: 1 }, totalAmount: { $sum: '$totalAmount' } } }, { $sort: { _id: 1 } } ]); ","""Group the orders from the 'orders' collection by the year of 'orderDate', calculating the total number of orders and the total amount for each year, and then sort the results by year in ascending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.find({ category: 'Electronics', description: /wireless/i }); ","""Retrieve the documents of products from the 'products' collection that belong to the 'Electronics' category and have a description containing the word 'wireless', regardless of case."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { totalAmount: { $gte: 100 } } }, { $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productDetails' } } ]); ","""Retrieve all orders from the 'orders' collection where the total amount is greater than or equal to 100, and include details of the related products from the 'products' collection based on the product IDs specified in the order items."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { isActive: true } }, { $sort: { createdAt: -1 } }, { $limit: 5 } ]); ","""Retrieve the active products from the 'products' collection, sorted by their creation date in descending order, and limit the results to the top five most recently created products."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.find({ lastUpdated: { $lte: new Date('2023-01-01') } }); ","""Retrieve the documents from the 'orders' collection where the 'lastUpdated' date is earlier than or equal to January 1, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $group: { _id: '$category', totalValue: { $sum: { $multiply: ['$price', '$stockQuantity'] } } } } ]); ","""Calculate the total value of products in each category from the 'products' collection by grouping the documents based on their category and summing the product of the price and stock quantity for each category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $lookup: { from: 'products', localField: 'items.productId', foreignField: '_id', as: 'productItems' } }, { $unwind: '$productItems' }, { $match: { 'productItems.price': { $gte: 20 } } } ]); ","""Perform an aggregation on the 'orders' collection to join with the 'products' collection, matching product IDs from the order items to the product IDs in the products collection, and include the resulting product information as 'productItems'. Then, unwind the product items and filter the results to only include orders where the price of the product items is greater than or equal to 20."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.findOne({ customerId: '12345', status: 'Refunded' }); ","""Retrieve a single document from the 'orders' collection where the 'customerId' is '12345' and the 'status' is 'Refunded'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { isActive: true } }, { $project: { name: 1, price: 1, stockQuantity: { $divide: ['$stockQuantity', 2] } } } ]);","""Retrieve the documents of active products from the 'products' collection, selecting the product name, price, and half of the stock quantity."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","db.orders.aggregate([ { $unwind: ""$items"" }, { $group: { _id: ""$items.productId"", totalSold: { $sum: ""$items.quantity"" } } }, { $lookup: { from: ""products"", localField: ""_id"", foreignField: ""_id"", as: ""productInfo"" } }, { $project: { productName: { $arrayElemAt: [""$productInfo.name"", 0] }, totalSold: 1 } } ]); ","""Aggregate the order data from the 'orders' collection by unwinding the 'items' array, grouping the data by the productId to calculate the total quantity sold for each product, then look up related product information from the 'products' collection, and finally project the product name and total quantity sold of each product."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { isActive: true } }, { $sort: { price: 1 } }, { $group: { _id: ""$category"", totalProducts: { $sum: 1 }, totalStock: { $sum: ""$stockQuantity"" } } } ]); ","""Retrieve the categories of active products from the 'products' collection, counting the total number of products and calculating the total stock quantity for each category, while sorting the results by price in ascending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
","
db.orders.aggregate([ { $match: { status: ""Shipped"" } }, { $group: { _id: ""$customerId"", totalSpent: { $sum: ""$totalAmount"" }, totalOrders: { $sum: 1 } } }, { $sort: { totalSpent: -1 } } ]); ","""Aggregate the orders from the 'orders' collection where the status is 'Shipped', grouping by customer ID to calculate the total amount spent and the total number of orders for each customer, and sort the results by the total amount spent in descending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { stockQuantity: { $lt: 10 }, isActive: true } }, { $project: { name: 1, stockQuantity: 1 } } ]); ","""Retrieve the names and stock quantities of active products from the 'products' collection where the stock quantity is less than 10."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { paymentMethod: ""Credit Card"" } }, { $group: { _id: ""$shippingAddress.city"", totalOrders: { $sum: 1 }, totalAmount: { $sum: ""$totalAmount"" } } } ]); ","""Retrieve the total number of orders and total amount from the 'orders' collection for orders made with the 'Credit Card' payment method, grouped by the city specified in the shipping address."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $group: { _id: { year: { $year: ""$orderDate"" }, month: { $month: ""$orderDate"" } }, totalSales: { $sum: ""$totalAmount"" } } }, { $sort: { ""_id.year"": 1, ""_id.month"": 1 } } ]); ","""Group the orders in the 'orders' collection by year and month of the 'orderDate', calculating the total sales amount for each group, and sort the results by year and month in ascending order."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $lookup: { from: ""orders"", localField: ""_id"", foreignField: ""items.productId"", as: ""orderDetails"" } }, { $project: { name: 1, totalOrders: { $size: ""$orderDetails"" }, stockQuantity: 1 } } ]); ","""Retrieve the product name and stock quantity from the 'products' collection, and include the total number of orders for each product by looking up the order details from the 'orders' collection, which is based on matching the product ID with the IDs in the items array of the order documents."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $unwind: ""$items"" }, { $group: { _id: ""$items.productId"", totalRevenue: { $sum: { $multiply: [""$items.quantity"", ""$items.price""] } } } }, { $lookup: { from: ""products"", localField: ""_id"", foreignField: ""_id"", as: ""productInfo"" } }, { $project: { productName: { $arrayElemAt: [""$productInfo.name"", 0] }, totalRevenue: 1 } } ]); ","""Aggregate the orders from the 'orders' collection by first unwinding the 'items' array, then grouping by the product ID and calculating the total revenue for each product by multiplying the quantity by the price. Next, look up related product information from the 'products' collection using the product ID and project the product name along with the total revenue."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { price: { $gt: 100 } } }, { $group: { _id: ""$category"", averagePrice: { $avg: ""$price"" } } } ]); ","""Retrieve the average price of products from the 'products' collection where the price is greater than 100, grouped by their category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { orderDate: { $gte: new Date(""2023-01-01""), $lte: new Date(""2023-12-31"") } } }, { $group: { _id: ""$status"", count: { $sum: 1 } } } ]); ","""Retrieve a count of orders from the 'orders' collection grouped by order status for orders placed between January 1, 2023, and December 31, 2023."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { status: ""Completed"" } }, { $group: { _id: ""$customerId"", totalSpent: { $sum: ""$totalAmount"" }, totalItems: { $sum: { $sum: ""$items.quantity"" } } } } ]); ","""Retrieve the total amount spent and the total quantity of items ordered by each customer from the 'orders' collection, specifically for orders that have a status of 'Completed', grouping the results by customer ID."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { ""shippingAddress.country"": ""USA"" } }, { $group: { _id: null, totalOrders: { $sum: 1 }, totalRevenue: { $sum: ""$totalAmount"" } } } ]); ","""Count the total number of orders and calculate the total revenue from the 'orders' collection where the shipping address is located in the 'USA'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { isActive: true } }, { $sort: { createdAt: 1 } }, { $group: { _id: { $year: ""$createdAt"" }, totalProducts: { $sum: 1 } } } ]); ","""Retrieve the total count of active products from the 'products' collection, grouped by the year of their creation date, and sorted in ascending order by the creation date."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $lookup: { from: ""products"", localField: ""items.productId"", foreignField: ""_id"", as: ""productDetails"" } }, { $unwind: ""$productDetails"" }, { $group: { _id: ""$productDetails.category"", totalOrders: { $sum: 1 } } } ]); ","""Aggregate the orders from the 'orders' collection, joining with the 'products' collection to retrieve product details based on the product IDs from the order items. Unwind the resulting product details and group the results by product category, counting the total number of orders for each category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $group: { _id: ""$category"", totalStock: { $sum: ""$stockQuantity"" }, totalActive: { $sum: { $cond: [""$isActive"", 1, 0] } } } } ]); ","""Group the documents from the 'products' collection by category, calculating the total stock quantity and the total count of active products for each category."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $match: { status: ""Pending"" } }, { $lookup: { from: ""products"", localField: ""items.productId"", foreignField: ""_id"", as: ""productDetails"" } }, { $unwind: ""$productDetails"" }, { $group: { _id: ""$productDetails.name"", totalPendingOrders: { $sum: 1 } } } ]); ","""Retrieve all orders from the 'orders' collection that have a status of 'Pending', join with the 'products' collection to include the details of the products associated with each order, and group the results by the product names to count the total number of pending orders for each product."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $match: { stockQuantity: { $gte: 0 }, isActive: true } }, { $project: { name: 1, stockValue: { $multiply: [""$price"", ""$stockQuantity""] } } } ]); ","""Retrieve the documents of products from the 'products' collection where the 'stockQuantity' is greater than or equal to zero and 'isActive' is true, projecting the 'name' of each product and calculating the 'stockValue' as the product of 'price' and 'stockQuantity'."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.orders.aggregate([ { $lookup: { from: ""products"", localField: ""items.productId"", foreignField: ""_id"", as: ""productDetails"" } }, { $unwind: ""$productDetails"" }, { $match: { ""productDetails.price"": { $gt: 200 } } }, { $group: { _id: ""$customerId"", totalExpensiveItems: { $sum: 1 } } } ]); ","""Retrieve the total count of expensive items from the 'orders' collection, where an expensive item is defined as having a price greater than 200, by looking up related product details from the 'products' collection, unwinding the product details, and grouping the results by customer ID."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
"," 
db.products.aggregate([ { $group: { _id: null, totalActiveProducts: { $sum: { $cond: [""$isActive"", 1, 0] } }, averagePrice: { $avg: ""$price"" } } } ]); ","""Calculate the total number of active products and the average price of products from the 'products' collection by grouping all documents together."""
ecom,"{
  // Products Collection
  “products”: {
    _id: ObjectId,
    name: String,
    description: String,
    price: Decimal128,
    category: String,
    stockQuantity: Number,
    isActive: Boolean,
    createdAt: Date,
    updatedAt: Date
  },

  // Orders Collection
  “orders”: {
    _id: ObjectId,
    customerId: String,
    items: [{
      productId: ObjectId,
      quantity: Number,
      price: Decimal128
    }],
    totalAmount: Decimal128,
    status: String,
    paymentMethod: String,
    shippingAddress: {
      street: String,
      city: String,
      state: String,
      zipCode: String,
      country: String
    },
    orderDate: Date,
    lastUpdated: Date
  }
}
",,"""Retrieve all orders from the 'orders' collection that have an 'order_date' on or after January 1, 2023, and join the related product information from the 'products' collection using the 'productId' from the order items."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({}); ,"""Retrieve all documents from the 'projects' collection without any filters or conditions."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ status: 'completed' }); ","""Retrieve the documents of tasks from the 'tasks' collection where the status is 'completed'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ name: 'Design Team' }); ","""Retrieve the documents of teams from the 'teams' collection where the name is 'Design Team'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ userId: ObjectId(""605c72f756c8a6950c2e2fda"") }); ","""Retrieve all documents from the 'timeSheets' collection where the 'userId' is equal to the specified ObjectId '605c72f756c8a6950c2e2fda'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ status: 'ongoing' }); ","""Retrieve the documents of projects from the 'projects' collection that have a status of 'ongoing'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ priority: 'high' }); ","""Retrieve all documents from the 'tasks' collection where the priority is set to 'high'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ leadId: ObjectId(""605c72f756c8a6950c2e2fdb"") }); ","""Retrieve all documents from the 'teams' collection where the leadId is equal to the ObjectId '605c72f756c8a6950c2e2fdb'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ date: { $gte: new Date('2023-01-01'), $lte: new Date('2023-12-31') } }); ","""Retrieve the documents from the 'timeSheets' collection where the 'date' is greater than or equal to January 1, 2023, and less than or equal to December 31, 2023."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ priority: 'urgent' }); ","""Retrieve the documents of projects from the 'projects' collection that have a priority marked as 'urgent'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ assignedTo: { $in: [ObjectId(""605c72f756c8a6950c2e2fda"")] } }); ","""Retrieve the documents of tasks from the 'tasks' collection that are assigned to the user with the specific ObjectId '605c72f756c8a6950c2e2fda'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ createdAt: { $gte: new Date('2022-01-01') } }); ","""Retrieve all documents from the 'teams' collection where the 'createdAt' date is on or after January 1, 2022."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ projectId: ObjectId(""605c72f756c8a6950c2e2fdc"") }); ","""Retrieve all documents from the 'timeSheets' collection where the 'projectId' matches the specific ObjectId '605c72f756c8a6950c2e2fdc'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ clientId: ObjectId(""605c72f756c8a6950c2e2fde"") }); ","""Retrieve the documents of projects from the 'projects' collection that are associated with the client whose ID is '605c72f756c8a6950c2e2fde'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ dueDate: { $lt: new Date('2023-05-01') } }); ","""Retrieve the documents of tasks from the 'tasks' collection where the due date is earlier than May 1, 2023."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ Members: { $elemMatch: { userId: ObjectId(""605c72f756c8a6950c2e2feb"") }}}); ","""Retrieve the documents of teams from the 'teams' collection that have a member with the userId of '605c72f756c8a6950c2e2feb'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ status: 'submitted' }); ","""Retrieve the documents from the 'timeSheets' collection where the status is 'submitted'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ budget: { $gte: Decimal128(""10000"") } }); ","""Retrieve the documents of projects from the 'projects' collection where the budget is greater than or equal to 10,000."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ dependencies: { $size: 0 } }); ","""Retrieve the documents of tasks from the 'tasks' collection that do not have any dependencies."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ name: { $regex: /Team/, $options: 'i' } }); ","""Retrieve the documents of teams from the 'teams' collection where the team name contains the word 'Team', case-insensitively."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ hours: { $gt: 8 } }); ","""Retrieve the documents from the 'timeSheets' collection where the number of hours logged is greater than 8."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ startDate: { $lt: new Date('2023-01-01') } }); ","""Retrieve the documents of projects from the 'projects' collection where the 'startDate' is before January 1, 2023."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",,"""Retrieve all tasks from the 'tasks' collection where the 'status' is 'completed' and their 'assignedTo' field includes the user with the specified user ID."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",db.projects.find({ status: 'active' }); ,"""Retrieve the documents of projects from the 'projects' collection where the status is 'active'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ priority: 'high' }).sort({ startDate: 1 }); ","""Retrieve the documents of projects from the 'projects' collection that have a priority of 'high', sorted by their start date in ascending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ status: 'in-progress' }); ","""Retrieve all documents from the 'tasks' collection where the status is 'in-progress'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ dueDate: { $lt: new Date() } }); ","""Retrieve the documents of tasks from the 'tasks' collection where the 'dueDate' is earlier than the current date."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ name: 'Development' }); ","""Retrieve the documents of teams from the 'teams' collection where the name is 'Development'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ 'Members.role': 'developer' }); ","""Retrieve all documents from the 'teams' collection where the role of a member is 'developer'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ userId: ObjectId(""60b8d8e5e3d1f378c4f888a1"") }); ","""Retrieve all documents from the 'timeSheets' collection where the 'userId' matches the specified ObjectId '60b8d8e5e3d1f378c4f888a1'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ projectId: ObjectId(""60b8d8e5e3d1f378c4f888a2"") }); ","""Retrieve all documents from the 'timeSheets' collection where the 'projectId' matches the specific ObjectId '60b8d8e5e3d1f378c4f888a2'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ clientId: ObjectId(""60b8d8e5e3d1f378c4f888a3"") }); ","""Retrieve all documents from the 'projects' collection where the 'clientId' is equal to the ObjectId '60b8d8e5e3d1f378c4f888a3'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ assignedTo: ObjectId(""60b8d8e5e3d1f378c4f888a4"") }); ","""Retrieve the documents of tasks from the 'tasks' collection that are assigned to the user with the ID '60b8d8e5e3d1f378c4f888a4'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ budget: { $gt: 10000 } }); ","""Retrieve the documents of projects from the 'projects' collection where the budget is greater than 10,000."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ createdAt: { $gte: new Date('2023-01-01') } }); ","""Retrieve all documents from the 'teams' collection where the 'createdAt' date is on or after January 1, 2023."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ status: 'submitted' }).sort({ submittedAt: -1 }); ","""Retrieve the documents from the 'timeSheets' collection where the status is 'submitted', sorted by the submitted date in descending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ priority: 'low', completedDate: { $exists: true } }); ","""Retrieve the documents of tasks from the 'tasks' collection that have a priority of 'low' and have a 'completedDate' field that exists."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ startDate: { $gte: new Date('2023-01-01') } }); ","""Retrieve all documents from the 'projects' collection where the 'startDate' is greater than or equal to January 1, 2023."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.find({ leadId: ObjectId(""60b8d8e5e3d1f378c4f888a5"") }); ","""Retrieve all documents from the 'teams' collection where the 'leadId' matches the specified ObjectId, which is '60b8d8e5e3d1f378c4f888a5'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ dependencies: { $in: [ObjectId(""60b8d8e5e3d1f378c4f888a6"")] } }); ","""Retrieve the documents of tasks from the 'tasks' collection that have a dependency on the task with the ObjectId '60b8d8e5e3d1f378c4f888a6'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ tags: 'urgent' }); ","""Retrieve all documents from the 'projects' collection that have the tag 'urgent'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.find({ hours: { $gte: 8 } }); ","""Retrieve all documents from the 'timeSheets' collection where the number of hours is greater than or equal to 8."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.find({ projectId: ObjectId(""60b8d8e5e3d1f378c4f888a7"") }).sort({ dueDate: 1 }); ","""Retrieve all documents from the 'tasks' collection that are associated with the project identified by the ID '60b8d8e5e3d1f378c4f888a7', sorted by their due date in ascending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.find({ endDate: { $lt: new Date() } }).sort({ endDate: -1 }); ","""Retrieve the documents of projects from the 'projects' collection that have an 'endDate' earlier than the current date, sorted by 'endDate' in descending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}", ,"""Retrieve all documents from the 'projects' collection where the 'status' is 'ongoing' and include the corresponding task information from the 'tasks' collection by matching 'projectId' from 'tasks' with '_id' from 'projects'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([{ $match: { status: 'ongoing' } }, { $group: { _id: ""$priority"", totalBudget: { $sum: ""$budget"" } } }]); ","""Retrieve the total budget for ongoing projects from the 'projects' collection, grouped by priority."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([{ $match: { status: 'completed' } }, { $group: { _id: ""$projectId"", completedTasks: { $sum: 1 } } }]); ","""Count the number of completed tasks from the 'tasks' collection, grouping the results by the project ID."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([{ $lookup: { from: 'projects', localField: 'projects', foreignField: '_id', as: 'projectDetails' } }, { $unwind: '$projectDetails' }, { $group: { _id: ""$_id"", teamName: { $first: ""$name"" }, projectCount: { $sum: 1 } } }]); ","""Aggregate the documents from the 'teams' collection, linking each team to its corresponding project details from the 'projects' collection based on the project's IDs. Then, unwind the project details and group the results by the team's ID, selecting the team's name and counting the number of associated projects for each team."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([{ $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" } } }, { $sort: { totalHours: -1 } }]); ","""Group the documents from the 'timeSheets' collection by 'userId' and calculate the total hours for each user by summing the 'hours' field, then sort the results in descending order based on total hours."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([{ $match: { clientId: ObjectId(""60d21b4667d0d8992e610c85"") } }, { $project: { name: 1, budget: 1, status: 1 } }]); ","""Retrieve the names, budgets, and statuses of projects from the 'projects' collection that are associated with the client whose ID is '60d21b4667d0d8992e610c85'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([{ $match: { priority: { $in: [""high"", ""medium""] } } }, { $group: { _id: ""$priority"", taskCount: { $sum: 1 } } }]); ","""Count the number of tasks from the 'tasks' collection that have a priority of either 'high' or 'medium', grouping the results by their priority."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([{ $lookup: { from: 'tasks', localField: 'projects', foreignField: 'projectId', as: 'taskDetails' } }, { $unwind: '$taskDetails' }, { $match: { 'taskDetails.status': 'in-progress' } }]); ","""Retrieve the details of teams from the 'teams' collection and include related tasks from the 'tasks' collection based on the project IDs, unwind the task details, and filter to show only the tasks that are currently marked as 'in-progress'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([{ $match: { status: 'approved' } }, { $group: { _id: ""$projectId"", totalApprovedHours: { $sum: ""$hours"" } } }]); ","""Retrieve the total approved hours from the 'timeSheets' collection, filtering for entries where the status is 'approved', and group the results by projectId."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([{ $lookup: { from: 'teams', localField: 'managerId', foreignField: 'leadId', as: 'managedTeams' } }, { $match: { 'managedTeams.name': { $regex: /Team A/ } } }]); ","""Retrieve all documents from the 'projects' collection and perform a lookup to include related teams from the 'teams' collection where the manager's ID matches the team lead's ID, then filter the results to only include projects managed by teams with the name that contains 'Team A'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([{ $match: { assignedTo: ObjectId(""60d21b4667d0d8992e610c84"") } }, { $sort: { dueDate: 1 } }]); ","""Retrieve the tasks from the 'tasks' collection that are assigned to the user with the ID '60d21b4667d0d8992e610c84', sorted by their due date in ascending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([{ $group: { _id: ""$date"", totalHours: { $sum: ""$hours"" } } }, { $sort: { _id: 1 } }]); ","""Group the documents from the 'timeSheets' collection by the 'date' field, calculating the total hours worked for each date, and sort the results in ascending order by date."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([{ $match: { startDate: { $gt: new Date(""2022-01-01"") } } }, { $project: { name: 1, endDate: 1, status: 1 } }]); ","""Retrieve the documents from the 'projects' collection where the 'startDate' is greater than January 1, 2022, and select only the 'name', 'endDate', and 'status' fields."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([{ $lookup: { from: 'projects', localField: 'projectId', foreignField: '_id', as: 'projectDetails' } }, { $match: { 'projectDetails.status': 'completed' } }]); ","""Retrieve all tasks from the 'tasks' collection and include related project details from the 'projects' collection where the project status is 'completed'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([{ $project: { name: 1, totalMembers: { $size: ""$Members"" } } }, { $sort: { totalMembers: -1 } }]); ","""Retrieve the names of teams from the 'teams' collection and calculate the total number of members in each team, then sort the results in descending order based on the total number of members."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([{ $match: { userId: ObjectId(""60d21b4667d0d8992e610c84"") } }, { $group: { _id: ""$taskId"", totalHours: { $sum: ""$hours"" } } }]); ","""Retrieve the total hours worked on each task from the 'timeSheets' collection for the user with the ID '60d21b4667d0d8992e610c84', grouping the results by task ID."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([{ $group: { _id: ""$clientId"", totalBudget: { $sum: ""$budget"" } } }, { $sort: { totalBudget: -1 } }]); ","""Group the projects from the 'projects' collection by 'clientId' and calculate the total budget for each client, then sort the results by total budget in descending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([{ $group: { _id: ""$priority"", avgCompletionTime: { $avg: { $subtract: [""$completedDate"", ""$dueDate""] } } } }]); ","""Group the documents in the 'tasks' collection by their priority and calculate the average completion time as the difference between the completed date and due date for each priority."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([{ $match: { projectId: ObjectId(""60d21b4667d0d8992e610c87"") } }, { $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" } } }]); ","""Retrieve the total hours logged from the 'timeSheets' collection for the project with the specific ID of '60d21b4667d0d8992e610c87' by grouping the results by 'userId'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([{ $lookup: { from: 'tasks', localField: 'projects', foreignField: 'projectId', as: 'taskDetails' } }, { $unwind: { path: '$taskDetails', preserveNullAndEmptyArrays: true } }, { $project: { teamName: ""$name"", taskTitle: ""$taskDetails.title"" } }]); ","""Retrieve the team names from the 'teams' collection along with the titles of the tasks associated with their projects by joining with the 'tasks' collection, and preserve teams that have no associated tasks."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([{ $addFields: { duration: { $subtract: [""$endDate"", ""$startDate""] } } }, { $match: { duration: { $gt: 604800000 } } }]); ","""Retrieve the projects from the 'projects' collection and calculate the duration by subtracting the 'startDate' from the 'endDate', filtering the results to include only those projects where the duration is greater than 604800000 milliseconds."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",,"""Retrieve all tasks from the 'tasks' collection that are assigned to users and have a status of 'completed', along with their associated project information from the 'projects' collection."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([ { $match: { status: 'active' } }, { $group: { _id: ""$managerId"", totalBudget: { $sum: ""$budget"" } } } ]); ","""Retrieve the total budget for each manager from the 'projects' collection, where the project status is 'active', and group the results by manager ID."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $match: { status: 'completed' } }, { $group: { _id: ""$projectId"", completedTasks: { $sum: 1 } } } ]); ","""Count the number of completed tasks from the 'tasks' collection, grouping them by their associated project IDs."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([ { $lookup: { from: 'projects', localField: 'projects', foreignField: '_id', as: 'projectDetails' } }, { $unwind: '$projectDetails' }, { $group: { _id: ""$_id"", totalProjects: { $sum: 1 }, firstProject: { $first: ""$projectDetails.name"" } } } ]); ","""Aggregate the documents from the 'teams' collection, joining with the 'projects' collection to include details of the projects associated with each team. For each team, unwind the project details and group by the team's identifier to calculate the total number of projects and capture the name of the first project associated with each team."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" }, tasksCount: { $count: {} } } }, { $match: { totalHours: { $gt: 40 } } } ]); ","""Group the entries from the 'timeSheets' collection by 'userId' to calculate the total hours worked and count the number of tasks, and then filter the results to include only those users who have logged more than 40 hours."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $lookup: { from: 'teams', localField: 'managerId', foreignField: 'leadId', as: 'teamDetails' } }, { $match: { 'teamDetails.name': 'Development' } } ]); ","""Retrieve the documents of projects from the 'projects' collection and include related team details from the 'teams' collection where the manager of the project matches the lead of the team, filtering to only those teams with the name 'Development'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $lookup: { from: 'projects', localField: 'projectId', foreignField: '_id', as: 'projectInfo' } }, { $match: { 'projectInfo.priority': 'high' } }, { $sort: { dueDate: 1 } } ]); ","""Retrieve all documents from the 'tasks' collection and include related project information from the 'projects' collection where the 'projectId' matches the '_id' of the projects. Filter the results to only include tasks where the related project's priority is 'high' and sort the final results by the due date in ascending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $match: { status: 'pending' } }, { $group: { _id: ""$projectId"", pendingCount: { $sum: 1 } } } ]); ","""Retrieve the documents from the 'timeSheets' collection where the status is 'pending', and group the results by 'projectId', counting the number of pending entries for each project."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $group: { _id: ""$clientId"", totalProjects: { $sum: 1 }, totalBudget: { $sum: ""$budget"" } } }, { $sort: { totalBudget: -1 } } ]); ","""Aggregate the documents from the 'projects' collection by grouping them based on the 'clientId', calculating the total number of projects and the total budget for each client, and then sort the results in descending order by the total budget."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([ { $lookup: { from: 'timeSheets', localField: 'projects', foreignField: 'projectId', as: 'timeEntries' } }, { $unwind: '$timeEntries' }, { $group: { _id: ""$_id"", totalHours: { $sum: ""$timeEntries.hours"" } } } ]); ","""Combine data from the 'teams' collection with related entries from the 'timeSheets' collection based on the project IDs found in the 'projects' field of the teams, flatten the results so that each team corresponds to a single time entry, and then group the results by team ID while calculating the total number of hours recorded in the time entries."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $match: { priority: 'high' } }, { $lookup: { from: 'timeSheets', localField: '_id', foreignField: 'taskId', as: 'timeRecords' } }, { $project: { title: 1, timeSpent: { $sum: ""$timeRecords.hours"" } } } ]); ","""Retrieve all tasks from the 'tasks' collection that have a priority of 'high', and for each task, include the total hours spent as recorded in the 'timeSheets' collection by matching the task's ID with the taskId in the time sheets."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $lookup: { from: 'tasks', localField: '_id', foreignField: 'projectId', as: 'taskInfo' } }, { $project: { name: 1, taskCount: { $size: ""$taskInfo"" } } } ]); ","""Retrieve the project names and the count of associated tasks from the 'projects' collection, including related task information from the 'tasks' collection."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $group: { _id: ""$date"", totalHours: { $sum: ""$hours"" } } }, { $sort: { _id: 1 } } ]); ","""Group the documents from the 'timeSheets' collection by the 'date' field and calculate the total hours for each date, then sort the results in ascending order by the date."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $match: { completedDate: { $ne: null } } }, { $group: { _id: ""$assignedTo"", completedTaskCount: { $sum: 1 } } }, { $sort: { completedTaskCount: -1 } } ]); ","""Count the number of completed tasks from the 'tasks' collection, grouping the results by the users assigned to those tasks, and only include tasks that have a non-null completed date, then sort the results in descending order based on the count of completed tasks."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $match: { startDate: { $lt: new Date('2023-01-01') } } }, { $count: ""olderProjects"" } ]); ","""Count the number of projects from the 'projects' collection that have a 'startDate' earlier than January 1, 2023."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $match: { approvedBy: { $ne: null } } }, { $group: { _id: ""$projectId"", approvedEntries: { $sum: 1 } } } ]); ","""Count the number of approved entries from the 'timeSheets' collection where the 'approvedBy' field is not null, and group the results by the 'projectId'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([ { $unwind: ""$Members"" }, { $group: { _id: ""$Members.role"", memberCount: { $sum: 1 } } } ]); ","""Aggregate the members from the 'teams' collection to count how many members belong to each unique role by unwinding the Members array and grouping the results by the role, summing up the total member count for each role."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $lookup: { from: 'tasks', localField: '_id', foreignField: 'projectId', as: 'tasks' } }, { $project: { name: 1, ongoingTasks: { $filter: { input: ""$tasks"", as: ""task"", cond: { $eq: [""$$task.status"", ""ongoing""] } } } } } ]); ","""Retrieve the names of all projects from the 'projects' collection and include a list of ongoing tasks from the 'tasks' collection that are associated with each project, where the status of the tasks is marked as 'ongoing'."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $match: { status: 'in-progress' } }, { $lookup: { from: 'projects', localField: 'projectId', foreignField: '_id', as: 'projectDetails' } }, { $project: { title: 1, projectName: { $arrayElemAt: [""$projectDetails.name"", 0] } } } ]); ","""Retrieve all tasks from the 'tasks' collection that have a status of 'in-progress', and include the project name from the 'projects' collection by matching the 'projectId' field in the tasks to the '_id' field in the projects, while selecting the task title and the project name."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $match: { priority: 'critical' } }, { $sort: { startDate: 1 } } ]);","""Retrieve all documents from the 'projects' collection where the priority is 'critical', and sort the results by the start date in ascending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}","db.projects.aggregate([ { $match: { status: ""Completed"" } }, { $group: { _id: ""$clientId"", totalBudget: { $sum: ""$budget"" } } } ]); ","""Retrieve the total budget of completed projects from the 'projects' collection, grouping the results by client ID."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $lookup: { from: ""projects"", localField: ""projectId"", foreignField: ""_id"", as: ""project_info"" } }, { $unwind: ""$project_info"" }, { $group: { _id: ""$project_info.name"", totalTasks: { $sum: 1 } } } ]); ","""Aggregate the tasks from the 'tasks' collection by looking up related project information from the 'projects' collection, grouping the results by the project name and counting the total number of tasks for each project."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([ { $unwind: ""$Members"" }, { $group: { _id: ""$Members.role"", memberCount: { $sum: 1 } } }, { $sort: { memberCount: -1 } } ]); ","""Aggregate the data from the 'teams' collection by first unwinding the 'Members' array, then grouping the results by the 'role' of each member to count the total number of members per role, and finally sorting the grouped results in descending order based on the member count."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $match: { status: ""Approved"" } }, { $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" } } } ]); ","""Aggregate the documents from the 'timeSheets' collection where the status is 'Approved', and group the results by userId while calculating the total hours worked for each user."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $project: { name: 1, duration: { $subtract: [""$endDate"", ""$startDate""] } } }, { $sort: { duration: -1 } } ]); ","""Retrieve the names and the durations of projects from the 'projects' collection, where duration is calculated as the difference between 'endDate' and 'startDate', and sort the results by duration in descending order."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $match: { status: ""In Progress"" } }, { $group: { _id: ""$projectId"", taskCount: { $sum: 1 } } }, { $lookup: { from: ""projects"", localField: ""_id"", foreignField: ""_id"", as: ""project_details"" } } ]); ","""Retrieve the count of tasks from the 'tasks' collection that have a status of 'In Progress', grouping them by their associated project ID, and include the corresponding project details from the 'projects' collection."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $match: { date: { $gte: new Date(""2023-01-01""), $lte: new Date(""2023-12-31"") } } }, { $group: { _id: ""$projectId"", totalHours: { $sum: ""$hours"" } } }, { $lookup: { from: ""projects"", localField: ""_id"", foreignField: ""_id"", as: ""project_info"" } } ]); ","""Aggregate the time sheets from the 'timeSheets' collection for the date range between January 1, 2023, and December 31, 2023, grouping by 'projectId' to calculate the total hours worked, and include associated project information from the 'projects' collection."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $group: { _id: ""$managerId"", totalProjects: { $sum: 1 } } }, { $sort: { totalProjects: -1 } } ]); ","""Group the documents in the 'projects' collection by 'managerId' and calculate the total number of projects for each manager, then sort the results in descending order based on the total number of projects."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $group: { _id: ""$priority"", taskCount: { $sum: 1 } } }, { $sort: { taskCount: -1 } } ]); ","""Group the tasks from the 'tasks' collection by their priority, counting the total number of tasks for each priority level, and then sort the results in descending order based on the task count."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([ { $lookup: { from: ""projects"", localField: ""projects"", foreignField: ""_id"", as: ""project_details"" } }, { $project: { name: 1, totalProjects: { $size: ""$project_details"" } } } ]); ","""Retrieve the names of teams from the 'teams' collection and the total count of projects associated with each team, including project details from the 'projects' collection based on the project IDs listed in the teams."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $group: { _id: ""$userId"", totalHours: { $sum: ""$hours"" }, tasksCount: { $sum: 1 } } }, { $project: { userId: ""$_id"", totalHours: 1, tasksCount: 1 } } ]); ","""Aggregate the documents from the 'timeSheets' collection by grouping them by 'userId', calculating the total hours worked for each user as well as the count of tasks for each user. Project the results to include the 'userId', the total hours, and the tasks count."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $group: { _id: ""$status"", totalProjects: { $sum: 1 }, totalBudget: { $sum: ""$budget"" } } } ]); ","""Group the documents in the 'projects' collection by their status, and calculate the total number of projects and the total budget for each status."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $lookup: { from: ""teams"", localField: ""assignedTo"", foreignField: ""Members.userId"", as: ""team_info"" } }, { $unwind: ""$team_info"" }, { $group: { _id: ""$team_info.name"", totalTasks: { $sum: 1 } } } ]); ","""Aggregate the tasks from the 'tasks' collection by looking up information from the 'teams' collection, where the 'assignedTo' field in tasks matches the 'userId' field in the 'Members' array of teams. Unwind the resulting team information and group the results by the team's name, calculating the total number of tasks for each team."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $lookup: { from: ""teams"", localField: ""managerId"", foreignField: ""leadId"", as: ""team_info"" } }, { $match: { ""team_info"": { $ne: [] } } }, { $project: { name: 1, teamCount: { $size: ""$team_info"" } } } ]); ","""Retrieve the names of projects from the 'projects' collection that have a manager associated with a team by looking up team information from the 'teams' collection, and include a count of the teams associated with each project, ensuring only projects that have at least one associated team are included."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.timeSheets.aggregate([ { $lookup: { from: ""tasks"", localField: ""taskId"", foreignField: ""_id"", as: ""task_info"" } }, { $unwind: ""$task_info"" }, { $group: { _id: ""$task_info.projectId"", totalHours: { $sum: ""$hours"" } } } ]); ","""Aggregate the time sheets from the 'timeSheets' collection by looking up related task information from the 'tasks' collection based on the 'taskId'. Unwind the resulting task information, and then group the results by the project ID found in the task information, calculating the total hours worked for each project."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.projects.aggregate([ { $match: { startDate: { $gte: new Date(""2023-01-01"") } } }, { $lookup: { from: ""timeSheets"", localField: ""_id"", foreignField: ""projectId"", as: ""timeSheetData"" } }, { $project: { name: 1, totalHours: { $sum: { $map: { input: ""$timeSheetData"", as: ""ts"", in: ""$$ts.hours"" } } } } } }]); ","""Retrieve all projects from the 'projects' collection that have a 'startDate' on or after January 1, 2023, and include the total hours logged from the 'timeSheets' collection for each project."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.tasks.aggregate([ { $match: { dependencies: { $exists: true, $ne: [] } } }, { $group: { _id: null, totalDependencies: { $sum: { $size: ""$dependencies"" } } } } ]); ","""Count the total number of dependencies for all tasks in the 'tasks' collection that have dependencies defined, grouping all results together."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}"," 
db.teams.aggregate([ { $lookup: { from: ""timeSheets"", localField: ""Members.userId"", foreignField: ""userId"", as: ""timesheet_data"" } }, { $unwind: ""$timesheet_data"" }, { $group: { _id: ""$_id"", totalHours: { $sum: ""$timesheet_data.hours"" } } } ]); ","""From the 'teams' collection, perform a lookup to include related time sheet data from the 'timeSheets' collection by matching user IDs, unwind the results to create a flat structure, and then group the results by team ID while summing the total hours from the time sheet data."""
project_management,"{
  // Projects Collection
  “projects”: {
    _id: ObjectId,
    name: String,
    description: String,
    startDate: Date,
    endDate: Date,
    budget: Decimal128,
    status: String,
    clientId: ObjectId,
    managerId: ObjectId,
    tags: [String],
    priority: String
  },

  // Tasks Collection
  “tasks”: {
    _id: ObjectId,
    projectId: ObjectId,
    title: String,
    description: String,
    assignedTo: [ObjectId],
    status: String,
    priority: String,
    startDate: Date,
    dueDate: Date,
    completedDate: Date,
    dependencies: [ObjectId]
  },

  // Teams Collection
  “teams”: {
    _id: ObjectId,
    name: String,
    description: String,
    leadId: ObjectId,
    Members: [{
      userId: ObjectId,
      role: String,
      joinDate: Date
    }],
    projects: [ObjectId],
    createdAt: Date
  },

  // TimeSheets Collection
  timeSheets: {
    _id: ObjectId,
    userId: ObjectId,
    projectId: ObjectId,
    taskId: ObjectId,
    date: Date,
    hours: Number,
    description: String,
    status: String,
    approvedBy: ObjectId,
    submittedAt: Date
  }
}",,"""Retrieve all records from the 'tasks' collection where the 'status' is 'completed', and sort the results by 'dueDate' in ascending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({}); ,"""Retrieve all documents from the 'ListingsAndReviews' collection."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ neighborhood: 'Downtown' }); ","""Retrieve all documents from the 'ListingsAndReviews' collection where the neighborhood is 'Downtown'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ property_type: 'Apartment', room_type: 'Entire home/apt' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'property_type' is 'Apartment' and the 'room_type' is 'Entire home/apt'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'host.superhost': true }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the host is a superhost."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ price: { $lt: 100 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the price is less than 100."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ reviews: { count: { $gt: 50 } } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the count of reviews is greater than 50."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'address.city': 'New York' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the city in the address is 'New York'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'amenities': 'Pool' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the amenities include a 'Pool'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ last_scraped: { $gte: new Date('2023-01-01') } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'last_scraped' date is greater than or equal to January 1, 2023."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'images.thumbnail': { $exists: true } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'images.thumbnail' field exists."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'host.name': 'John Doe' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the host's name is 'John Doe'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ min_nights: '2' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the minimum nights required for booking is 2."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ bathrooms: { $gte: 2 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the number of bathrooms is greater than or equal to 2."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ accommodations: { $lt: 5 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the number of accommodations is less than 5."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ cancellation_policy: 'flexible' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the cancellation policy is 'flexible'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'host.location': 'California' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the host's location is 'California'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ summary: { $regex: /beach/i } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'summary' field contains the word 'beach' regardless of case."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ beds: { $exists: true } }); ","""Retrieve all documents from the 'ListingsAndReviews' collection where the 'beds' field exists."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ max_nights: '30' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the maximum number of nights allowed for a stay is 30."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ name: { $regex: /Cozy/i } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'name' field contains the word 'Cozy' in a case-insensitive manner."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",,"""Retrieve all documents from the 'ListingsAndReviews' collection, selecting the fields '_id', 'url', 'name', and 'price'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ neighborhood: 'Downtown' }); ,"""Retrieve the documents from the 'ListingsAndReviews' collection where the neighborhood is 'Downtown'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ property_type: 'Apartment', room_type: 'Entire home/apt' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'property_type' is 'Apartment' and the 'room_type' is 'Entire home/apt'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'host.superhost': true }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the host is a superhost."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ price: { $lt: 100 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the price is less than 100."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'reviews.count': { $gte: 10 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the count of reviews is greater than or equal to 10."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'host.verified': true, 'host.listings_count': { $gte: 5 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the host is verified and has five or more listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ min_nights: { $lte: 2 }, max_nights: { $gte: 14 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the minimum number of nights required is 2 or less, and the maximum number of nights allowed is 14 or more."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'address.city': 'San Francisco' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the city in the address is 'San Francisco'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'images.thumbnail': { $exists: true } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection that contain a thumbnail image in the 'images' field."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ amenities: { $in: ['WiFi', 'Kitchen'] } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the amenities include either 'WiFi' or 'Kitchen'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ last_scraped: { $gt: new Date('2023-01-01') } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'last_scraped' date is greater than January 1, 2023."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'reviews.first_review': { $exists: true } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'first_review' field within the 'reviews' subdocument exists."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ accommodates: { $gte: 4 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the number of accommodations is greater than or equal to 4."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ $or: [{ cancellation_policy: 'flexible' }, { cancellation_policy: 'moderate' }] }); ","""Retrieve all documents from the 'ListingsAndReviews' collection where the 'cancellation_policy' is either 'flexible' or 'moderate'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ bathrooms: { $gt: 2 }, bedrooms: { $lt: 3 } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the number of bathrooms is greater than 2 and the number of bedrooms is less than 3."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ $and: [{ price: { $gte: 50 } }, { price: { $lte: 150 } }] }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the price is greater than or equal to 50 and less than or equal to 150."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'host.name': 'John Doe' }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the host's name is 'John Doe'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ room_type: 'Shared room', price: { $lte: 30 } }); ","""Retrieve the documents of listings from the 'ListingsAndReviews' collection where the 'room_type' is 'Shared room' and the 'price' is less than or equal to 30."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ name: { $regex: /house/i } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'name' field contains the word 'house', ignoring case."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ url: { $exists: true } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the 'url' field exists."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
", ,"""Retrieve all documents from the 'ListingsAndReviews' collection, providing details about each listing, including fields such as id, url, name, summary, description, neighborhood, property_type, room_type, bed_type, min_nights, max_nights, cancellation_policy, last_scraped date, accommodates, bedrooms, beds, bathrooms, reviews information, amenities, price, security deposit, cleaning fee, images, host details, and address."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $match: { ""price"": { $gt: 100 } } }, { $group: { _id: ""$neighborhood"", avg_price: { $avg: ""$price"" } } } ]); ","""Retrieve the average price of listings from the 'ListingsAndReviews' collection, grouped by neighborhood, where the price of the listings is greater than 100."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { ""host.superhost"": true } }, { $sort: { ""reviews.count"": -1 } }, { $limit: 5 } ]); ","""Retrieve the top 5 listings from the 'ListingsAndReviews' collection where the host is a superhost, sorted by the number of reviews in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $group: { _id: ""$room_type"", total_listings: { $sum: 1 } } }, { $sort: { total_listings: -1 } } ]); ","""Group the listings from the 'ListingsAndReviews' collection by their room type, calculating the total number of listings for each room type, and then sort the results in descending order based on the total number of listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { ""amenities"": { $in: [""Wifi"", ""Kitchen""] } } }, { $project: { name: 1, price: 1, ""host.name"": 1 } } ]); ","""Retrieve the documents from the 'ListingsAndReviews' collection that have either 'Wifi' or 'Kitchen' listed in their amenities, and project the name, price, and the host's name."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $group: { _id: null, total_price: { $sum: ""$price"" }, count: { $sum: 1 } } }, { $project: { avg_price: { $divide: [""$total_price"", ""$count""] } } } ]); ","""Calculate the average price of all listings in the 'ListingsAndReviews' collection by first summing the total price of all listings and counting the number of listings, and then dividing the total price by the count of listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $lookup: { from: ""ListingsAndReviews"", localField: ""host.id"", foreignField: ""host.id"", as: ""host_listings"" } }, { $project: { name: 1, ""host.name"": 1, ""host_listings.count"": { $size: ""$host_listings"" } } } ]); ","""Perform an aggregation on the 'ListingsAndReviews' collection to lookup listings associated with each host by matching the host's ID. Project the name of each listing, the name of the host, and the count of the host's listings by calculating the size of the resulting host listings array."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { ""reviews.count"": { $gte: 10 } } }, { $project: { name: 1, ""reviews.first_review"": 1 } } ]); ","""Retrieve the names and the first review dates of listings from the 'ListingsAndReviews' collection that have at least 10 reviews."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { ""max_nights"": { $gte: ""30"" } } }, { $group: { _id: ""$property_type"", total_listings: { $sum: 1 } } }, { $sort: { total_listings: -1 } } ]); ","""Retrieve the total number of listings from the 'ListingsAndReviews' collection grouped by property type, where the maximum number of nights required is 30 or more, and sort the results in descending order by the total number of listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $project: { name: 1, stars: { $divide: [""$reviews.count"", ""$reviews.count""] } } } ]); ","""Retrieve the names of listings from the 'ListingsAndReviews' collection and calculate the average stars based on the count of reviews, effectively returning the total reviews divided by itself for each listing."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { ""host.verified"": true, ""price"": { $lt: 150 } } }, { $sort: { price: 1 } } ]); ","""Retrieve documents from the 'ListingsAndReviews' collection where the host is verified and the price is less than 150, and sort the results by price in ascending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $group: { _id: ""$property_type"", avg_beds: { $avg: ""$beds"" } } }, { $sort: { avg_beds: -1 } } ]); ","""Group the documents from the 'ListingsAndReviews' collection by 'property_type' and calculate the average number of beds for each property type, then sort the results by the average number of beds in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { cancellation_policy: ""flexible"" } }, { $project: { name: 1, ""host.name"": 1, price: 1 } } ]); ","""Retrieve the listings from the 'ListingsAndReviews' collection where the cancellation policy is set to 'flexible', and project the name of the listing, the name of the host, and the price."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $sortByCount: ""$room_type"" }, { $limit: 3 } ]); ","""Count the occurrences of each room type in the 'ListingsAndReviews' collection and retrieve the top three room types with the highest counts."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { ""reviews.last_review"": { $gte: new Date(""2022-01-01"") } } }, { $project: { name: 1, ""reviews.last_review"": 1 } } ]); ","""Retrieve the names and last review dates of listings from the 'ListingsAndReviews' collection where the last review date is on or after January 1, 2022."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $group: { _id: ""$neighborhood"", avg_bathrooms: { $avg: ""$bathrooms"" } } }, { $sort: { avg_bathrooms: -1 } } ]); ","""Group the documents from the 'ListingsAndReviews' collection by neighborhood, calculating the average number of bathrooms for each neighborhood, and sort the results in descending order based on the average number of bathrooms."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { ""price"": { $gt: 200 } } }, { $project: { name: 1, price: 1, address: 1 } } ]); ","""Retrieve the listings from the 'ListingsAndReviews' collection where the price is greater than 200, and include the name, price, and address of each listing."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $lookup: { from: ""ListingsAndReviews"", localField: ""host.id"", foreignField: ""host.id"", as: ""host_listings"" } }, { $unwind: ""$host_listings"" }, { $group: { _id: ""$host.id"", total_cleaning_fee: { $sum: ""$cleaning_fee"" } } } ]); ","""Aggregate the documents from the 'ListingsAndReviews' collection by looking up related listings based on the host's ID, unwinding the resulting host listings, and grouping the results by host ID to calculate the total cleaning fee for each host."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","
db.ListingsAndReviews.aggregate([ { $match: { neighborhood: ""Downtown"" } }, { $sort: { price: 1 } }, { $limit: 10 } ]);","""Retrieve the documents from the 'ListingsAndReviews' collection where the neighborhood is 'Downtown', sorted by price in ascending order, and limit the results to the top 10 listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",db.ListingsAndReviews.find({ property_type: 'Apartment' }); ,"""Retrieve the documents from the 'ListingsAndReviews' collection where the property type is 'Apartment'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'host.superhost': true }); ","""Retrieve the documents of listings from the 'ListingsAndReviews' collection where the host is marked as a superhost."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'address.city': 'San Francisco' } }, { $group: { _id: '$room_type', average_price: { $avg: '$price' } } } ]); ","""Retrieve the average price of listings from the 'ListingsAndReviews' collection that are located in the city of San Francisco, grouped by their room type."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ reviews: { count: { $gt: 10 } } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the count of reviews is greater than 10."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'price': { $lte: 100 } } }, { $sort: { 'reviews.count': -1 } } ]); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the price is less than or equal to 100, and sort these documents by the count of reviews in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: '$neighborhood', total_listings: { $sum: 1 }, average_beds: { $avg: '$beds' } } }, { $sort: { total_listings: -1 } } ]); ","""Group the listings from the 'ListingsAndReviews' collection by 'neighborhood', calculating the total number of listings and the average number of beds for each neighborhood, and then sort the results by the total number of listings in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'amenities': { $in: ['WiFi', 'Kitchen'] } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the amenities include either 'WiFi' or 'Kitchen'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'last_scraped': { $gte: new Date('2023-01-01') } } }, { $project: { name: 1, price: 1, 'host.name': 1 } } ]); ","""Retrieve the names, prices, and host names from the 'ListingsAndReviews' collection where the 'last_scraped' date is on or after January 1, 2023."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $lookup: { from: 'hosts', localField: 'host.id', foreignField: 'id', as: 'host_info' } }, { $unwind: '$host_info' } ]); ","""Perform an aggregation on the 'ListingsAndReviews' collection to look up related host information from the 'hosts' collection, matching the host ID from the 'ListingsAndReviews' collection with the ID in the 'hosts' collection, and unwind the resulting host information."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'bedrooms': { $gte: 2 } } }, { $sort: { price: 1 } }, { $limit: 5 } ]); ","""Retrieve documents from the 'ListingsAndReviews' collection where the number of bedrooms is greater than or equal to 2, sorted by price in ascending order, limiting the results to the top 5 entries."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: { neighborhood: '$neighborhood', property_type: '$property_type' }, total_listings: { $sum: 1 } } } ]); ","""Group the listings from the 'ListingsAndReviews' collection by their neighborhood and property type, and calculate the total number of listings for each group."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'reviews.first_review': { $gte: new Date('2022-01-01') } } }, { $group: { _id: '$host.id', average_price: { $avg: '$price' } } } ]); ","""Aggregate the listings from the 'ListingsAndReviews' collection, filtering for those that have a first review on or after January 1, 2022, and group the results by the host's ID, calculating the average price for each host."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ 'images.thumbnail': { $exists: true } }); ","""Retrieve all documents from the 'ListingsAndReviews' collection that have a thumbnail image present."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: null, total_average_price: { $avg: '$price' } } } ]); ","""Calculate the total average price from the 'ListingsAndReviews' collection by grouping all documents together."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.find({ max_nights: { $gte: '30' } }); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the maximum number of nights allowed for booking is greater than or equal to 30."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'host.verified': true } }, { $project: { name: 1, 'host.name': 1, price: 1 } } ]); ","""Retrieve the names and prices of listings from the 'ListingsAndReviews' collection where the host is verified, along with the names of the verified hosts."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'cancellation_policy': 'flexible' } }, { $group: { _id: null, count: { $sum: 1 } } } ]); ","""Count the number of listings in the 'ListingsAndReviews' collection that have a cancellation policy of 'flexible'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { 'accommodates': { $gt: 4 } } }, { $project: { name: 1, price: 1, neighborhood: 1 } } ]); ","""Retrieve the listings from the 'ListingsAndReviews' collection that can accommodate more than 4 guests, projecting only the name, price, and neighborhood fields."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: '$property_type', average_beds: { $avg: '$beds' } } }, { $sort: { average_beds: -1 } } ]); ","""Group the documents in the 'ListingsAndReviews' collection by 'property_type' and calculate the average number of beds for each property type, then sort the results by average beds in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $project: { name: 1, price: 1, 'reviews.count': 1 } }, { $match: { 'reviews.count': { $gte: 5 } } } ]);","""Retrieve the name, price, and review count from the 'ListingsAndReviews' collection for listings that have five or more reviews."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
","db.ListingsAndReviews.aggregate([ { $match: { ""price"": { $gt: 100 } } }, { $sort: { ""reviews.count"": -1 } } ]); ","""Select the listings from the 'ListingsAndReviews' collection where the price is greater than 100, and sort the results by the number of reviews in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: ""$neighborhood"", average_price: { $avg: ""$price"" } } }, { $sort: { average_price: -1 } } ]); ","""Group the documents from the 'ListingsAndReviews' collection by neighborhood and calculate the average price for each neighborhood, then sort the neighborhoods by average price in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $lookup: { from: ""ListingsAndReviews"", localField: ""host.id"", foreignField: ""host.id"", as: ""host_listings"" } }, { $unwind: ""$host_listings"" }, { $group: { _id: ""$host.id"", total_listings: { $sum: 1 }, average_price: { $avg: ""$price"" } } } ]); ","""Aggregate the documents from the 'ListingsAndReviews' collection by performing a lookup to join with other listings in the same collection based on the host's ID. Unwind the results from the joined listings, and then group the results by the host's ID, calculating the total number of listings for each host and the average price of their listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { ""amenities"": ""WiFi"" } }, { $group: { _id: ""$property_type"", total_properties: { $sum: 1 } } } ]); ","""Retrieve the total count of properties grouped by their property type from the 'ListingsAndReviews' collection, filtering the results to include only those properties that have 'WiFi' listed in their amenities."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { ""reviews.last_review"": { $gte: new Date(""2022-01-01"") } } }, { $project: { name: 1, url: 1, last_review: ""$reviews.last_review"" } } ]); ","""Retrieve the documents from the 'ListingsAndReviews' collection where the last review date is on or after January 1, 2022, and project the name, URL, and last review date of each listing."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { $and: [ { ""host.superhost"": true }, { ""price"": { $lt: 200 } } ] } }, { $project: { name: 1, price: 1, host: 1 } } ]); ","""Retrieve the listings from the 'ListingsAndReviews' collection for hosts who are superhosts and have a price below 200, including only the name, price, and host information in the results."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: ""$room_type"", total_count: { $sum: 1 }, avg_bathrooms: { $avg: ""$bathrooms"" } } }, { $sort: { total_count: -1 } } ]); ","""Group the documents from the 'ListingsAndReviews' collection by the room type, calculating the total count of listings for each room type and the average number of bathrooms per room type. Then, sort the results in descending order based on the total count of listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { ""cancellation_policy"": ""flexible"" } }, { $count: ""flexible_cancellation_listings"" } ]); ","""Count the number of listings from the 'ListingsAndReviews' collection that have a 'cancellation_policy' of 'flexible'."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $unwind: ""$amenities"" }, { $group: { _id: ""$amenities"", listing_count: { $sum: 1 } } }, { $sort: { listing_count: -1 } } ]); ","""Unwind the amenities array from the 'ListingsAndReviews' collection, group the documents by each unique amenity while counting the number of listings for each amenity, and sort the results by the listing count in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { $or: [ { ""host.verified"": true }, { ""security_deposit"": { $gt: 500 } } ] } }, { $project: { name: 1, host: 1 } } ]); ","""Retrieve the names and host details of listings from the 'ListingsAndReviews' collection where the host is verified or the security deposit is greater than 500."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: { city: ""$address.city"", property_type: ""$property_type"" }, average_cleaning_fee: { $avg: ""$cleaning_fee"" } } }, { $sort: { average_cleaning_fee: -1 } } ]); ","""Group the documents from the 'ListingsAndReviews' collection by city and property type, calculating the average cleaning fee for each group, and sort the results by the average cleaning fee in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $project: { name: 1, summarized_description: { $substr: [""$description"", 0, 100] } } } ]); ","""From the 'ListingsAndReviews' collection, project the 'name' field and a summarized version of the 'description' field, which includes only the first 100 characters of the description."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { $expr: { $gt: [ ""$price"", { $divide: [ ""$reviews.count"", 10 ] } ] } } } ]); ","""Retrieve all documents from the 'ListingsAndReviews' collection where the price is greater than the result of dividing the count of reviews by 10."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $group: { _id: ""$host.location"", avg_beds: { $avg: ""$beds"" }, listings_count: { $sum: 1 } } } ]); ","""Group the listings from the 'ListingsAndReviews' collection by the host's location, calculating the average number of beds and the total count of listings for each location."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { ""last_scraped"": { $gte: new Date(""2023-01-01"") } } }, { $sort: { ""price"": 1 } }, { $limit: 10 } ]); ","""Retrieve documents from the 'ListingsAndReviews' collection where the 'last_scraped' date is on or after January 1, 2023, sort the results by 'price' in ascending order, and limit the output to the first 10 documents."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { ""reviews.count"": { $gt: 0 } } }, { $project: { name: 1, last_review: ""$reviews.last_review"" } }, { $sort: { last_review: -1 } } ]); ","""Retrieve the names and last review dates of listings from the 'ListingsAndReviews' collection where the review count is greater than zero, sorted by the last review date in descending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { ""bedrooms"": { $gte: 3 } } }, { $lookup: { from: ""ListingsAndReviews"", localField: ""_id"", foreignField: ""_id"", as: ""details"" } } ]); ","""Retrieve all documents from the 'ListingsAndReviews' collection where the number of bedrooms is greater than or equal to 3, and include additional details for each document by joining with the 'ListingsAndReviews' collection on the document ID."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $facet: { by_neighborhood: [ { $group: { _id: ""$neighborhood"", total_listings: { $sum: 1 } } } ], by_property_type: [ { $group: { _id: ""$property_type"", average_price: { $avg: ""$price"" } } } ] } } ]); ","""Aggregate data from the 'ListingsAndReviews' collection to provide two sets of results: first, group the listings by neighborhood and count the total number of listings in each neighborhood; second, group the listings by property type and calculate the average price for each property type."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $match: { ""host.listings_count"": { $gt: 5 } } }, { $group: { _id: ""$host.name"", average_price: { $avg: ""$price"" } } } ]); ","""Retrieve the average price of listings from the 'ListingsAndReviews' collection grouped by the host's name, filtering to include only those hosts who have more than 5 listings."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
"," 
db.ListingsAndReviews.aggregate([ { $addFields: { price_per_bed: { $divide: [""$price"", { $ifNull: [""$beds"", 1] }] } } }, { $sort: { price_per_bed: 1 } } ]); ","""Calculate the price per bed by dividing the price by the number of beds for all listings in the 'ListingsAndReviews' collection, and sort the results by the price per bed in ascending order."""
sample_airbnb,"{
  “ListingsAndReviews”: {
    ""_id"": ""string"",
    ""url"": ""string"",
    ""name"": ""string"",
    ""summary"": ""string"",
    ""description"": ""string"",
    ""neighborhood"": ""string"",
    ""property_type"": ""string"",
    ""room_type"": ""string"",
    ""bed_type"": ""string"",
    ""min_nights"": ""string"",
    ""max_nights"": ""string"",
    ""cancellation_policy"": ""string"",
    ""last_scraped"": ""Date"",
    ""accommodates"": ""number"",
    ""bedrooms"": ""number"",
    ""beds"": ""number"",
    ""bathrooms"": ""number"",
    ""reviews"": {
      ""count"": ""number"",
      ""first_review"": ""Date"",
      ""last_review"": ""Date""
    },
    ""amenities"": [""string""],
    ""price"": ""number"",
    ""security_deposit"": ""number"",
    ""cleaning_fee"": ""number"",
    ""images"": {
      ""thumbnail"": ""string"",
      ""medium"": ""string"",
      ""main"": ""string""
    },
    ""host"": {
      ""id"": ""string"",
      ""name"": ""string"",
      ""location"": ""string"",
      ""superhost"": ""boolean"",
      ""verified"": ""boolean"",
      ""listings_count"": ""number""
    },
    ""address"": {
      ""street"": ""string"",
      ""city"": ""string"",
      ""country"": ""string""
    }
  }
}
",,"""Retrieve all documents from the 'ListingsAndReviews' collection, selecting all fields, without any filters or conditions applied."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({}); ,"""Retrieve all documents from the 'Shipwrecks' collection."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ feature_type: ""wreck"" }); ","""Retrieve the documents from the 'Shipwrecks' collection where the feature type is 'wreck'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ gps_quality: ""good"" }); ","""Retrieve all documents from the 'Shipwrecks' collection where the 'gps_quality' is categorized as 'good'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ depth: ""200 meters"" }); ","""Retrieve the documents of shipwrecks from the 'Shipwrecks' collection where the depth is equal to '200 meters'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ vessel_terms: { $exists: true } }); ","""Retrieve all documents from the 'Shipwrecks' collection where the 'vessel_terms' field exists."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ history: { $ne: """" } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'history' field is not an empty string."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ coordinates: { $type: ""array"" } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'coordinates' field is of type array."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ longitude: { $gt: 0 } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'longitude' is greater than 0."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ latitude: { $lt: 0 } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the latitude is less than 0."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ record: ""2023"" }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'record' field is equal to '2023'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ water_level: ""high"" }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'water_level' is classified as 'high'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ sounding_type: ""echo"" }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'sounding_type' is 'echo'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ quasou: { $in: [""observed"", ""predicted""] } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'quasou' field is either 'observed' or 'predicted'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ chart: { $regex: /^Chart.*/ } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'chart' field starts with the text 'Chart'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ depth: { $exists: false } }); ","""Retrieve all documents from the 'Shipwrecks' collection where the 'depth' field does not exist."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ feature_type: ""wreck"", gps_quality: ""excellent"" }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'feature_type' is 'wreck' and the 'gps_quality' is 'excellent'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ $or: [{ record: ""2022"" }, { vessel_terms: ""sailing"" }] }); ","""Retrieve the documents from the 'Shipwrecks' collection where either the 'record' is '2022' or the 'vessel_terms' is 'sailing'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ history: { $regex: /accident/i } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'history' field contains the word 'accident' regardless of case."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ ""coordinates.0"": { $exists: true } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the first element of the 'coordinates' array exists."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ latitude: { $gte: 30, $lte: 40 } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the latitude is between 30 and 40, inclusive."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",,"""Retrieve all documents from the 'Shipwrecks' collection, including all fields, where the 'feature_type' is specified as 'wreck' and sorting the results by 'depth' in ascending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({}); ,"""Retrieve all documents from the 'Shipwrecks' collection without any filters or conditions."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ feature_type: 'wreck' }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'feature_type' is 'wreck'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ gps_quality: 'high' }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'gps_quality' is classified as 'high'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ depth: { $regex: /^10/ } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'depth' field starts with the number '10'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ vessel_terms: { $exists: true } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'vessel_terms' field exists."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ coordinates: { $size: 3 } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'coordinates' array contains exactly three elements."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ latitude: { $gt: 0 } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the latitude is greater than 0."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ longitude: { $lt: -100 } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the longitude is less than -100."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.findOne({ record: 'abc123' }); ","""Retrieve a single document from the 'Shipwrecks' collection where the 'record' field is equal to 'abc123'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ history: { $ne: null } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'history' field is not null."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ water_level: 'high', sounding_type: 'echo' }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'water_level' is 'high' and the 'sounding_type' is 'echo'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ depth: { $in: ['10m', '20m'] } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'depth' is either '10m' or '20m'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ quasou: 'recent' }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'quasou' field is equal to 'recent'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ chart: { $exists: true, $ne: '' } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'chart' field exists and is not an empty string."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ gps_quality: { $regex: /quality/i } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'gps_quality' field contains the word 'quality', ignoring case."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ feature_type: 'reef', latitude: { $lt: 0 } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'feature_type' is 'reef' and the 'latitude' is less than 0."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ record: { $options: 'i' } }); ","""Retrieve all documents from the 'Shipwrecks' collection where the 'record' field is matched case insensitively."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ depth: { $gte: '5m' } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'depth' is greater than or equal to 5 meters."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ history: { $regex: /sinking/i } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'history' field contains the word 'sinking', regardless of case."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ water_level: 'low', coordinates: { $elemMatch: { $gt: 0 } } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'water_level' is 'low' and the 'coordinates' array contains at least one element greater than 0."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",,"""Retrieve all documents from the 'Shipwrecks' collection, including fields such as '_id', 'record', 'vessel_terms', 'feature_type', 'chart', 'latitude', 'longitude', 'gps_quality', 'depth', 'sounding_type', 'history', 'quasou', 'water_level', and 'coordinates'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({ feature_type: 'wreck' }); ,"""Retrieve the documents of shipwrecks from the 'Shipwrecks' collection where the 'feature_type' is categorized as 'wreck'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ gps_quality: { $ne: 'Unknown' } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'gps_quality' is not equal to 'Unknown'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ depth: { $gte: '100' } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'depth' is greater than or equal to 100."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ vessel_terms: { $regex: 'Freighter', $options: 'i' } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'vessel_terms' field contains the term 'Freighter', case insensitive."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { history: { $exists: true, $ne: '' } } }, { $group: { _id: ""$vessel_terms"", count: { $sum: 1 } } } ]); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'history' field exists and is not empty, and group the results by 'vessel_terms' while counting the number of occurrences for each 'vessel_terms'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { latitude: { $gt: 30 }, longitude: { $gt: -90 } } }, { $sort: { depth: 1 } } ]); ","""Retrieve all records from the 'Shipwrecks' collection where the latitude is greater than 30 and the longitude is greater than -90, and sort the results by depth in ascending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: ""$feature_type"", average_depth: { $avg: { $toDouble: ""$depth"" } } } } ]); ","""Group the documents from the 'Shipwrecks' collection by 'feature_type' and calculate the average depth by converting the 'depth' field to a double."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { coordinates: { $exists: true, $ne: [] } } }, { $project: { _id: 0, coordinates: 1 } } ]); ","""Retrieve the coordinates of shipwrecks from the 'Shipwrecks' collection where the coordinates field exists and is not empty."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: ""$quasou"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","""Group the documents from the 'Shipwrecks' collection by the 'quasou' field and count the number of occurrences for each unique 'quasou' value, then sort the results by the count in descending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { water_level: { $in: ['low', 'high'] } } }, { $group: { _id: ""$water_level"", count: { $sum: 1 } } } ]); ","""Aggregate the documents in the 'Shipwrecks' collection to count the number of records for each distinct 'water_level' value, filtering to include only those records where the 'water_level' is either 'low' or 'high'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { gps_quality: { $exists: true } } }, { $group: { _id: ""$gps_quality"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'gps_quality' field exists, group the results by 'gps_quality' while counting the number of occurrences for each unique 'gps_quality', and sort the grouped results by the count in descending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: null, total_records: { $sum: 1 } } } ]); ","""Count the total number of records in the 'Shipwrecks' collection."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { depth: { $type: 'string' } } }, { $group: { _id: ""$feature_type"", count: { $sum: 1 } } } ]); ","""Count the number of shipwreck records from the 'Shipwrecks' collection where the 'depth' field is of string type, grouping the results by the 'feature_type' field."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { history: { $regex: 'sunk', $options: 'i' } } }, { $group: { _id: ""$vessel_terms"", total: { $sum: 1 } } } ]); ","""Retrieve the count of shipwreck records from the 'Shipwrecks' collection where the 'history' field contains the term 'sunk', ignoring case, and group the results by 'vessel_terms'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: ""$chart"", unique_vessels: { $addToSet: ""$vessel_terms"" } } } ]); ","""Group the documents in the 'Shipwrecks' collection by the 'chart' field, and for each chart, create a set of unique vessel terms from the 'vessel_terms' field."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { latitude: { $lte: 0 }, longitude: { $lt: 0 } } }, { $count: ""southwestern_wrecks"" } ]); ","""Count the number of shipwreck records from the 'Shipwrecks' collection where the latitude is less than or equal to 0 and the longitude is less than 0, and label this count as 'southwestern_wrecks'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: ""$depth"", count: { $sum: 1 }, avg_latitude: { $avg: ""$latitude"" } } } ]); ","""Group the documents in the 'Shipwrecks' collection by the 'depth' field, calculating the total count of shipwrecks for each depth and the average latitude of those shipwrecks."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { water_level: ""high"" } }, { $lookup: { from: ""Shipwrecks"", localField: ""feature_type"", foreignField: ""feature_type"", as: ""related_wrecks"" } } ]); ","""Retrieve all shipwreck records from the 'Shipwrecks' collection where the 'water_level' is 'high', and include related shipwrecks that have the same 'feature_type' from the 'Shipwrecks' collection."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { latitude: { $gte: 0 }, longitude: { $gte: 0 } } }, { $sort: { depth: -1 } }, { $limit: 5 } ]); ","""Retrieve the top 5 documents from the 'Shipwrecks' collection where the latitude is greater than or equal to 0 and the longitude is greater than or equal to 0, sorted by depth in descending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
", ,"""Retrieve all documents from the 'Shipwrecks' collection."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",db.Shipwrecks.find({}); ,"""Retrieve all documents from the 'Shipwrecks' collection."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ feature_type: 'Wreck' }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'feature_type' is equal to 'Wreck'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ gps_quality: 'High' }).sort({ latitude: 1 }); ","""Retrieve the documents of shipwrecks from the 'Shipwrecks' collection where the 'gps_quality' is 'High', sorted by their latitude in ascending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ depth: { $gte: '100' } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'depth' is greater than or equal to 100."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ vessel_terms: { $regex: /sailing/i } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'vessel_terms' field contains the word 'sailing' in a case-insensitive manner."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $group: { _id: ""$feature_type"", count: { $sum: 1 } } }]); ","""Group the documents in the 'Shipwrecks' collection by 'feature_type' and count the number of occurrences for each feature type."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $match: { water_level: { $ne: 'Unknown' } } }, { $group: { _id: ""$water_level"", avg_depth: { $avg: { $toDouble: ""$depth"" } } } }]); ","""Retrieve the average depth of shipwrecks from the 'Shipwrecks' collection, grouped by water level, excluding records where the water level is 'Unknown'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ coordinates: { $exists: true, $not: { $size: 0 } } }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'coordinates' field exists and is not empty."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $match: { history: { $ne: '' } } }, { $sort: { longitude: -1 } }]); ","""Retrieve all shipwreck records from the 'Shipwrecks' collection where the 'history' field is not empty, and sort the results by 'longitude' in descending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $group: { _id: ""$quasou"", total_records: { $sum: 1 } } }, { $sort: { total_records: -1 } }, { $limit: 5 }]); ","""Group the documents from the 'Shipwrecks' collection by the 'quasou' field and calculate the total number of records for each group, then sort the results by the total number of records in descending order and limit the output to the top 5 groups."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ latitude: { $gt: 30, $lt: 50 }, longitude: { $gt: -100, $lt: -80 } }); ","""Retrieve the documents of shipwrecks from the 'Shipwrecks' collection where the latitude is greater than 30 and less than 50, and the longitude is greater than -100 and less than -80."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $match: { depth: { $regex: /\d+/ } } }, { $project: { record: 1, depth: 1 } }]); ","""Retrieve the records from the 'Shipwrecks' collection where the 'depth' field contains numeric values, and include only the 'record' and 'depth' fields in the output."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $match: { vessel_terms: { $exists: true } } }, { $group: { _id: ""$vessel_terms"", unique_vessels: { $addToSet: ""$record"" } } }]); ","""Retrieve the unique vessel terms from the 'Shipwrecks' collection where the 'vessel_terms' field exists, and group the records by 'vessel_terms', collecting the unique values of the 'record' field for each term."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ gps_quality: { $in: ['Good', 'Average'] } }).sort({ record: 1 }); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'gps_quality' is either 'Good' or 'Average', and sort the results by the 'record' field in ascending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $group: { _id: null, total_depth: { $sum: { $toDouble: ""$depth"" } } } }]); ","""Calculate the total depth of all shipwrecks in the 'Shipwrecks' collection by summing the depth values, converting them to double precision."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $match: { sounding_type: { $ne: null } } }, { $group: { _id: ""$sounding_type"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","""Aggregate the documents from the 'Shipwrecks' collection by first filtering out those documents where the 'sounding_type' is not null, then grouping the results by 'sounding_type' while counting the number of occurrences for each type, and finally sorting the grouped results in descending order based on the count."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({ history: { $exists: true, $ne: '' } }).limit(10); ","""Retrieve the first 10 documents from the 'Shipwrecks' collection where the 'history' field exists and is not empty."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $match: { water_level: { $regex: /above/i } } }, { $project: { _id: 0, record: 1, water_level: 1 } }]); ","""Find all shipwreck records from the 'Shipwrecks' collection where the 'water_level' contains the word 'above', and select only the 'record' and 'water_level' fields while excluding the '_id' field."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.find({}).sort({ latitude: 1, longitude: 1 }).limit(5); ","""Retrieve all documents from the 'Shipwrecks' collection, sorted by latitude in ascending order and longitude in ascending order, and limit the results to the first five entries."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([{ $match: { gps_quality: 'Low' } }, { $project: { record: 1, latitude: 1, longitude: 1 } }]); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'gps_quality' is 'Low', and project the 'record', 'latitude', and 'longitude' fields."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
",,"""Retrieve all documents from the 'Shipwrecks' collection, selecting the fields '_id', 'record', 'vessel_terms', 'feature_type', 'chart', 'latitude', 'longitude', 'gps_quality', 'depth', 'sounding_type', 'history', 'quasou', 'water_level', and 'coordinates', without applying any filters or sorting."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
","db.Shipwrecks.aggregate([ { $group: { _id: ""$feature_type"", total: { $sum: 1 } } } ]); ","""Group the documents from the 'Shipwrecks' collection by 'feature_type' and calculate the total count of shipwrecks for each feature type."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { depth: { $gte: ""50"" } } }, { $group: { _id: ""$vessel_terms"", average_latitude: { $avg: ""$latitude"" } } } ]); ","""Retrieve the average latitude of shipwrecks from the 'Shipwrecks' collection where the depth is greater than or equal to 50, grouping the results by vessel terms."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { gps_quality: { $ne: ""bad"" } } }, { $sort: { longitude: 1 } }, { $project: { record: 1, latitude: 1, longitude: 1 } } ]); ","""Retrieve the documents from the 'Shipwrecks' collection where the 'gps_quality' is not equal to 'bad', sorted by 'longitude' in ascending order, and only include the fields 'record', 'latitude', and 'longitude' in the results."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: ""$quasou"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","""Group the documents in the 'Shipwrecks' collection by the 'quasou' field, counting the number of occurrences for each unique 'quasou' value, and then sort the results in descending order based on the count."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { history: { $regex: /sank/i } } }, { $group: { _id: null, total_wrecks: { $sum: 1 } } } ]); ","""Count the total number of shipwrecks in the 'Shipwrecks' collection where the 'history' field contains the word 'sank', ignoring case."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { coordinates: { $elemMatch: { $gt: 30 } } } }, { $project: { _id: 0, record: 1, coordinates: 1 } } ]); ","""Retrieve the records from the 'Shipwrecks' collection where the 'coordinates' contain at least one value greater than 30, and project only the 'record' and 'coordinates' fields while excluding the '_id' field."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $lookup: { from: ""Shipwrecks"", localField: ""chart"", foreignField: ""chart"", as: ""related_shipwrecks"" } }, { $unwind: ""$related_shipwrecks"" }, { $group: { _id: ""$chart"", wreck_count: { $sum: 1 } } } ]); ","""Retrieve the count of shipwrecks from the 'Shipwrecks' collection, grouping them by the 'chart' field, while including related shipwrecks from the same collection based on matching 'chart' values."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { water_level: { $exists: true } } }, { $group: { _id: ""$water_level"", avg_depth: { $avg: ""$depth"" } } } ]); ","""Retrieve the average depth of shipwrecks from the 'Shipwrecks' collection, grouping the results by the water level, and only include those records where the water level exists."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $project: { record: 1, depth: 1, coordinates: 1 } }, { $match: { depth: { $ne: null } } } ]); ","""Retrieve the records from the 'Shipwrecks' collection, selecting the fields 'record', 'depth', and 'coordinates', where the 'depth' is not null."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: { $substr: [""$history"", 0, 10] }, average_latitude: { $avg: ""$latitude"" } } }, { $sort: { _id: 1 } } ]); ","""Group the documents from the 'Shipwrecks' collection by the first ten characters of the 'history' field, calculating the average latitude for each group, and then sort the results in ascending order based on the grouped history."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { feature_type: ""wreck"" } }, { $group: { _id: null, total_depth: { $sum: { $toDouble: ""$depth"" } } } } ]); ","""Calculate the total depth of shipwrecks from the 'Shipwrecks' collection where the feature type is 'wreck'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { depth: { $gt: ""100"" } } }, { $unwind: ""$coordinates"" }, { $group: { _id: ""$record"", coordinate_count: { $sum: 1 } } } ]); ","""Retrieve the count of coordinates for each unique record from the 'Shipwrecks' collection, filtering the results to include only those shipwrecks where the depth is greater than 100, and unwinding the coordinates array before grouping by record."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $lookup: { from: ""Shipwrecks"", localField: ""vessel_terms"", foreignField: ""vessel_terms"", as: ""similar_vessels"" } }, { $match: { ""similar_vessels.record"": { $exists: true } } } ]); ","""Perform an aggregation on the 'Shipwrecks' collection to look up similar vessels by matching the 'vessel_terms' field with the same field in the 'Shipwrecks' collection, and include the results as 'similar_vessels'. Then, filter the results to include only those entries where the 'record' field in 'similar_vessels' exists."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { latitude: { $lt: 15 } } }, { $group: { _id: ""$vessel_terms"", total_wrecks: { $sum: 1 } } } ]); ","""Retrieve the total number of shipwrecks from the 'Shipwrecks' collection with a latitude less than 15, grouped by their vessel terms."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $group: { _id: ""$gps_quality"", average_longitude: { $avg: ""$longitude"" } } }, { $sort: { average_longitude: -1 } } ]); ","""Group the documents in the 'Shipwrecks' collection by 'gps_quality' and calculate the average longitude for each group, then sort the results by the average longitude in descending order."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $project: { record: 1, coordinates: { $slice: [""$coordinates"", 5] }, depth: 1 } }, { $match: { depth: { $ne: null } } } ]); ","""Retrieve the records from the 'Shipwrecks' collection, including the 'record' field, the first five elements of the 'coordinates' array, and the 'depth' field, filtering out any entries where 'depth' is null."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { depth: { $exists: true } } }, { $group: { _id: ""$depth"", vessel_count: { $sum: 1 } } }, { $match: { vessel_count: { $gt: 5 } } } ]); ","""Count the number of vessels for each unique depth from the 'Shipwrecks' collection, where depth information exists, and only include those depths associated with more than five vessels."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $match: { sounding_type: { $in: [""sonar"", ""manual""] } } }, { $group: { _id: ""$sounding_type"", wreck_count: { $sum: 1 } } } ]); ","""Count the number of shipwrecks from the 'Shipwrecks' collection, grouping the results by the 'sounding_type' field, only including those records where the 'sounding_type' is either 'sonar' or 'manual'."""
sample_geospatial,"{
  “Shipwrecks” : {
    ""_id"": ""string"",
    ""record"": ""string"",
    ""vessel_terms"": ""string"",
    ""feature_type"": ""string"",
    ""chart"": ""string"",
    ""latitude"": ""number"",
    ""longitude"": ""number"",
    ""gps_quality"": ""string"",
    ""depth"": ""string"",
    ""sounding_type"": ""string"",
    ""history"": ""string"",
    ""quasou"": ""string"",
    ""water_level"": ""string"",
    ""coordinates"": [""number""]
  }
}
"," 
db.Shipwrecks.aggregate([ { $sort: { longitude: 1 } }, { $limit: 10 } ]);","""Retrieve the documents from the 'Shipwrecks' collection, sorted by longitude in ascending order, and limit the results to the first 10 documents."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({}); ,"""Retrieve all documents from the 'movies' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ title: 'Inception' }); ","""Retrieve the documents of movies from the 'movies' collection where the title is 'Inception'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ year: 2020 }); ","""Retrieve the documents of movies from the 'movies' collection that were released in the year 2020."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ rated: 'PG-13' }); ","""Retrieve the documents of movies from the 'movies' collection that are rated 'PG-13'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'genres': 'Action' }); ","""Retrieve the documents of movies from the 'movies' collection that have the genre 'Action'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'cast': { $in: ['Leonardo DiCaprio'] } }); ","""Retrieve the documents of movies from the 'movies' collection that feature 'Leonardo DiCaprio' in their cast."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'awards.wins': { $gt: 5 } }); ","""Retrieve the documents of movies from the 'movies' collection that have won more than 5 awards."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'languages': 'English' }); ","""Retrieve the documents of movies from the 'movies' collection where the 'languages' field contains 'English'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'countries': { $ne: 'USA' } }); ","""Retrieve the documents of movies from the 'movies' collection where the 'countries' field does not include 'USA'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'runtime': { $gte: 120 } }); ","""Retrieve the documents of movies from the 'movies' collection where the runtime is greater than or equal to 120 minutes."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.find({}); ","""Retrieve all documents from the 'theaters' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.find({ 'location.address.city': 'Los Angeles' }); ","""Retrieve the documents of theaters from the 'theaters' collection where the city in the theater's location address is 'Los Angeles'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.find({ 'theaterId': 101 }); ","""Retrieve the documents of theaters from the 'theaters' collection where the 'theaterId' is 101."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.find({}); ","""Retrieve all documents from the 'sessions' collection without any filters or conditions."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.users.find({}); ","""Retrieve all documents from the 'users' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.users.find({ email: 'user@example.com' }); ","""Retrieve the documents of users from the 'users' collection where the email is 'user@example.com'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.find({}); ","""Retrieve all documents from the 'comments' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.find({ movie_id: '12345' }); ","""Retrieve all comments from the 'comments' collection where the movie identifier is '12345'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.find({ 'date': { $gte: new Date('2022-01-01') } }); ","""Retrieve the documents from the 'comments' collection where the 'date' is on or after January 1, 2022."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.find({ name: 'John Doe' }); ","""Retrieve all documents from the 'comments' collection where the name is 'John Doe'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
", ,"""Retrieve all documents from the 'movies' collection that have a rating of 'PG-13' and were released in the year 2020, including only the title, plot, and genres fields."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",db.movies.find({}); ,"""Retrieve all documents from the 'movies' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ rated: 'PG-13' }); ","""Retrieve all documents from the 'movies' collection where the rating is 'PG-13'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ year: 2021 }); ","""Retrieve the documents of movies from the 'movies' collection that were released in the year 2021."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ genres: { $in: ['Action'] } }); ","""Retrieve the documents of movies from the 'movies' collection that belong to the genre 'Action'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ title: /Inception/i }); ","""Retrieve the documents of movies from the 'movies' collection where the title contains the word 'Inception', case insensitive."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'awards.wins': { $gt: 5 } }); ","""Retrieve the documents of movies from the 'movies' collection that have more than 5 awards wins."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'imdb.rating': { $gte: 8 } }); ","""Retrieve the documents of movies from the 'movies' collection where the IMDb rating is greater than or equal to 8."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ released: { $gt: new Date('2020-01-01') } }); ","""Retrieve all documents from the 'movies' collection where the 'released' date is greater than January 1, 2020."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ 'cast': 'Leonardo DiCaprio' }); ","""Retrieve the documents of movies from the 'movies' collection where 'Leonardo DiCaprio' is listed in the cast."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.find({ languages: { $all: ['English'] } }); ","""Retrieve the documents of movies from the 'movies' collection where all languages include 'English'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.find({}); ","""Retrieve all documents from the 'theaters' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.find({ 'location.address.city': 'Los Angeles' }); ","""Retrieve the documents from the 'theaters' collection where the city in the location address is 'Los Angeles'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.find({ 'location.address.state': 'CA' }); ","""Retrieve the documents of theaters from the 'theaters' collection where the address state is 'CA'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.users.find({}); ","""Retrieve all documents from the 'users' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.users.find({ email: 'example@example.com' }); ","""Retrieve the documents of users from the 'users' collection where the email is 'example@example.com'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.find({}); ","""Retrieve all documents from the 'comments' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.find({ movie_id: '5a9427658b0beebeb69579ae' }); ","""Retrieve all comments from the 'comments' collection where the 'movie_id' is '5a9427658b0beebeb69579ae'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.find({ date: { $gt: new Date('2023-01-01') } }); ","""Retrieve all comments from the 'comments' collection where the date is greater than January 1, 2023."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.find({}); ","""Retrieve all documents from the 'sessions' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.find({ user_id: '12345' }); ","""Retrieve the documents from the 'sessions' collection where the 'user_id' is '12345'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.find({ jwt: { $exists: true } }); ","""Retrieve all documents from the 'sessions' collection where the 'jwt' field exists."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",,"""Retrieve all movies from the 'movies' collection along with their details."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([{ $group: { _id: ""$rated"", averageRating: { $avg: ""$imdb.rating"" } } }]); ","""Group the documents from the 'movies' collection by the 'rated' field and calculate the average IMDb rating for each group."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $match: { year: { $gte: 2000 } } }, { $sort: { released: -1 } }]); ","""Retrieve all documents from the 'movies' collection where the 'year' is greater than or equal to 2000, and sort these documents by the 'released' date in descending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $lookup: { from: 'comments', localField: '_id', foreignField: 'movie_id', as: 'comments_info' } }, { $project: { title: 1, num_comments: { $size: ""$comments_info"" } } }]); ","""Retrieve the titles of movies from the 'movies' collection and the number of comments for each movie by looking up the related comments from the 'comments' collection based on the movie's ID."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $match: { genres: ""Action"" } }, { $group: { _id: null, totalRuntime: { $sum: ""$runtime"" } } }]); ","""Calculate the total runtime of movies from the 'movies' collection that belong to the 'Action' genre."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $match: { ""awards.wins"": { $gt: 0 } } }, { $sort: { ""awards.nominations"": -1 } }, { $limit: 5 }]); ","""Retrieve the top 5 movies from the 'movies' collection that have won at least one award, sorted by the number of nominations in descending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([{ $group: { _id: ""$movie_id"", commentCount: { $sum: 1 } } }, { $sort: { commentCount: -1 } }]); ","""Group the documents from the 'comments' collection by 'movie_id' and count the total number of comments for each movie, then sort the results in descending order based on the comment count."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.aggregate([{ $group: { _id: ""$location.geo.type"", count: { $sum: 1 } } }]); ","""Group the documents from the 'theaters' collection by the type of the geographic location and count the number of occurrences for each type."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $lookup: { from: 'theaters', localField: 'cast', foreignField: 'theaterId', as: 'theater_info' } }, { $match: { 'theater_info': { $ne: [] } } }]); ","""Perform an aggregation on the 'movies' collection to look up related information about theaters from the 'theaters' collection, where the movie's cast members match the theater IDs. Additionally, filter the results to include only those movies that have theater information present."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $match: { languages: ""English"" } }, { $project: { title: 1, plot: 1, directors: 1 } }]); ","""Retrieve the titles, plots, and directors of movies from the 'movies' collection that are in English."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { _id: 1 } }]); ","""Group the documents from the 'movies' collection by the 'year' field and count the number of movies for each year, then sort the results by year in ascending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $match: { ""tomatoes.viewer.rating"": { $gte: 8 } } }, { $project: { title: 1, ""tomatoes.viewer.rating"": 1 } }]); ","""Retrieve the titles and viewer ratings from the 'movies' collection for movies where the viewer rating on tomatoes is greater than or equal to 8."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([{ $group: { _id: ""$email"", commentCount: { $sum: 1 } } }, { $match: { commentCount: { $gt: 3 } } }]); ","""Group the documents in the 'comments' collection by the 'email' field and count the number of comments for each email, then filter to include only those with a comment count greater than 3."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.aggregate([{ $group: { _id: ""$user_id"", count: { $sum: 1 } } }, { $match: { count: { $gt: 1 } } }]); ","""Group the documents in the 'sessions' collection by 'user_id' and count the number of occurrences for each user. Then, filter the results to include only those users who have more than one session."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $match: { ""imdb.votes"": { $gte: 1000 } } }, { $sort: { ""imdb.rating"": -1 } }]); ","""Retrieve the documents from the 'movies' collection where the number of votes on IMDb is greater than or equal to 1000, and sort these documents by the IMDb rating in descending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.users.aggregate([{ $project: { email: 1, name: { $concat: [""$name"", "" <"", ""$email"", "">""] } } }]); ","""Select the email and a concatenated name from the 'users' collection, where the concatenated name consists of the user's name followed by their email in angle brackets."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $match: { ""tomatoes.fresh"": { $gt: 70 } } }, { $project: { title: 1, ""tomatoes.fresh"": 1 } }]); ","""Retrieve the titles and fresh tomato ratings from the 'movies' collection for movies where the fresh rating in the tomatoes field is greater than 70."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([{ $group: { _id: { movie_id: ""$movie_id"", email: ""$email"" }, totalComments: { $sum: 1 } } }]); ","""Group the comments from the 'comments' collection by 'movie_id' and 'email', and calculate the total number of comments for each unique combination of 'movie_id' and 'email'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.aggregate([{ $match: { ""location.address.city"": ""Los Angeles"" } }, { $project: { _id: 0, theaterId: 1, ""location.address.street1"": 1 } }]); ","""Retrieve the theater documents from the 'theaters' collection where the city in the location address is 'Los Angeles', and include the theaterId and the street1 address without displaying the _id field."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $lookup: { from: 'users', localField: 'comments.email', foreignField: 'email', as: 'user_comments' } }]); ","""Perform an aggregation on the 'movies' collection to include user information related to comments by looking up data from the 'users' collection, matching the 'email' field in 'users' with the 'comments.email' field in 'movies', and storing the results in the 'user_comments' field."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([{ $project: { title: 1, boxOffice: { $convert: { input: ""$tomatoes.boxOffice"", to: ""double"" } } } }]);","""Project the titles and the box office earnings (converted to double) of movies from the 'movies' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $match: { ""rated"": ""PG-13"" } }, { $group: { _id: ""$genres"", averageRating: { $avg: ""$imdb.rating"" } } } ]); ","""Retrieve the average IMDb rating of movies from the 'movies' collection that are rated 'PG-13', grouped by their genres."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""awards.wins"": { $gt: 5 } } }, { $sort: { ""imdb.rating"": -1 } } ]); ","""Retrieve the documents from the 'movies' collection where the number of awards won is greater than 5, and sort these documents by their IMDb rating in descending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $lookup: { from: ""comments"", localField: ""_id"", foreignField: ""movie_id"", as: ""comments_info"" } }, { $unwind: ""$comments_info"" }, { $group: { _id: ""$title"", totalComments: { $sum: 1 }, averageRating: { $avg: ""$imdb.rating"" } } } ]); ","""Retrieve the titles of movies from the 'movies' collection along with the total number of comments and the average IMDB rating by joining the 'comments' collection, unwinding the comments for each movie, and grouping the results by movie title."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $group: { _id: ""$year"", totalMovies: { $sum: 1 }, averageRuntime: { $avg: ""$runtime"" } } }, { $sort: { totalMovies: -1 } } ]); ","""Group the movies from the 'movies' collection by their release year, calculating the total number of movies and the average runtime for each year, and sort the results in descending order based on the total number of movies."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.aggregate([ { $group: { _id: ""$location.geo.type"", count: { $sum: 1 } } } ]); ","""Group the theaters from the 'theaters' collection by the type of geographical location and count the number of theaters for each type."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $group: { _id: ""$movie_id"", totalComments: { $sum: 1 } } }, { $match: { totalComments: { $gt: 10 } } } ]); ","""Group the comments from the 'comments' collection by 'movie_id' to count the total number of comments for each movie, and then filter to retrieve only those movies that have more than 10 comments."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""tomatoes.viewer.rating"": { $gte: 8 } } }, { $project: { title: 1, ""tomatoes.viewer.rating"": 1, ""imdb.rating"": 1 } } ]); ","""Retrieve the titles, viewer ratings from the tomatoes section, and IMDb ratings of movies from the 'movies' collection where the viewer rating in the tomatoes section is greater than or equal to 8."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $group: { _id: { $substr: [""$released"", 0, 4] }, totalMovies: { $sum: 1 }, totalAwards: { $sum: ""$awards.wins"" } } }, { $sort: { totalAwards: -1 } } ]); ","""Group the movies from the 'movies' collection by the year extracted from the 'released' field, counting the total number of movies and summing the total number of awards won. Then, sort the results by the total number of awards in descending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.users.aggregate([ { $project: { email: 1, name: { $concat: [""$name"", "" - "", ""$email""] } } } ]); ","""Retrieve the email addresses and a concatenated string of names and emails for all users from the 'users' collection."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.aggregate([ { $group: { _id: ""$user_id"", totalSessions: { $sum: 1 } } }, { $match: { totalSessions: { $gt: 5 } } } ]); ","""Group the documents in the 'sessions' collection by 'user_id' and calculate the total number of sessions for each user, then filter to include only those users who have more than five sessions."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $lookup: { from: ""theaters"", localField: ""countries"", foreignField: ""location.address.state"", as: ""theater_info"" } }, { $match: { ""theater_info"": { $ne: [] } } } ]); ","""Retrieve all movies from the 'movies' collection and include related theater information from the 'theaters' collection where the movie's associated country matches the theater's location address state, ensuring that only those movies with at least one corresponding theater are included in the results."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $group: { _id: ""$email"", totalComments: { $sum: 1 } } }, { $sort: { totalComments: -1 } } ]); ","""Group the documents in the 'comments' collection by the 'email' field, counting the total number of comments for each unique email, and then sort the results in descending order based on the total number of comments."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""genres"": ""Action"" } }, { $sort: { ""released"": -1 } }, { $limit: 5 } ]); ","""Retrieve the documents of movies from the 'movies' collection that belong to the 'Action' genre, sorted by their release date in descending order, and limit the results to the top 5 most recently released movies."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $match: { ""date"": { $gte: new Date(""2022-01-01"") } } }, { $group: { _id: ""$movie_id"", totalComments: { $sum: 1 } } } ]); ","""Aggregate the comments from the 'comments' collection to match those where the 'date' is on or after January 1, 2022, and group the results by 'movie_id', calculating the total number of comments for each movie."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $group: { _id: ""$directors"", totalMovies: { $sum: 1 } } }, { $sort: { totalMovies: -1 } } ]); ","""Group the movies from the 'movies' collection by their directors, counting the total number of movies for each director, and sort the results in descending order based on the total number of movies."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.aggregate([ { $lookup: { from: ""sessions"", localField: ""_id"", foreignField: ""user_id"", as: ""sessions_info"" } }, { $unwind: { path: ""$sessions_info"", preserveNullAndEmptyArrays: true } } ]); ","""Aggregate the documents from the 'theaters' collection and include related session information from the 'sessions' collection, linking based on the theater's _id and the user_id in the sessions, while allowing for theaters that do not have any corresponding sessions."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""fullplot"": { $regex: /sci-fi/i } } }, { $project: { title: 1, ""fullplot"": 1 } } ]); ","""Retrieve the titles and full plots of movies from the 'movies' collection where the full plot contains the term 'sci-fi', using a case-insensitive search."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $group: { _id: ""$metacritic"", averageImdb: { $avg: ""$imdb.rating"" }, count: { $sum: 1 } } } ]); ","""Group the documents in the 'movies' collection by the 'metacritic' field, calculating the average 'imdb.rating' and the total count of movies for each unique value of 'metacritic'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $lookup: { from: ""movies"", localField: ""movie_id"", foreignField: ""_id"", as: ""movie_info"" } }, { $unwind: ""$movie_info"" }, { $project: { text: 1, movieTitle: ""$movie_info.title"" } } ]); ","""Retrieve the text of comments from the 'comments' collection, and include the corresponding movie title from the 'movies' collection for each comment by looking up the movie information based on the movie ID, unwinding the results to separate each comment and its movie details."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.aggregate([ { $group: { _id: ""$jwt"", sessionCount: { $sum: 1 } } }, { $match: { sessionCount: { $gt: 2 } } } ]);","""Aggregate the documents from the 'sessions' collection, grouping by the 'jwt' field and counting the number of occurrences of each unique 'jwt', then filter the results to only include those groups where the session count is greater than 2."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
","db.movies.aggregate([ { $group: { _id: ""$genres"", averageRating: { $avg: ""$imdb.rating"" } } }, { $sort: { averageRating: -1 } } ]); ","""Group the movies from the 'movies' collection by their genres and calculate the average IMDb rating for each genre, then sort the results in descending order based on the average rating."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""awards.wins"": { $gt: 5 } } }, { $project: { title: 1, ""awards.wins"": 1, ""awards.nominations"": 1 } } ]); ","""Retrieve the titles, number of wins, and number of nominations from the 'movies' collection for movies that have won more than 5 awards."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $lookup: { from: ""comments"", localField: ""_id"", foreignField: ""movie_id"", as: ""comments"" } }, { $unwind: ""$comments"" }, { $group: { _id: ""$title"", totalComments: { $sum: 1 } } } ]); ","""Aggregate the documents from the 'movies' collection, joining with the 'comments' collection by matching the movie's ID with the comment's movie_id, then unwind the comments to create a separate document for each comment, and finally group the results by the movie title while calculating the total number of comments for each title."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.aggregate([ { $match: { ""location.address.city"": ""Los Angeles"" } }, { $project: { theaterId: 1, ""location.address.state"": 1 } } ]); ","""Retrieve the theaterId and state from the 'theaters' collection for theaters located in the city of Los Angeles."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $group: { _id: ""$movie_id"", totalComments: { $sum: 1 } } }, { $lookup: { from: ""movies"", localField: ""_id"", foreignField: ""_id"", as: ""movieDetails"" } } ]); ","""Aggregate all comments from the 'comments' collection by grouping them based on the 'movie_id' to count the total number of comments for each movie, and then retrieve the corresponding movie details from the 'movies' collection using the grouped 'movie_id'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""tomatoes.viewer.meter"": { $gte: 80 } } }, { $project: { title: 1, ""tomatoes.viewer.rating"": 1 } } ]); ","""Retrieve the titles and viewer ratings of movies from the 'movies' collection where the viewer meter rating on the tomatoes object is greater than or equal to 80."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $group: { _id: ""$directors"", totalMovies: { $sum: 1 } } }, { $sort: { totalMovies: -1 } } ]); ","""Group the movies from the 'movies' collection by their directors, counting the total number of movies for each director, and then sort the results in descending order based on the total number of movies."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""imdb.votes"": { $gt: 10000 } } }, { $project: { title: 1, ""imdb.rating"": 1 } }, { $sort: { ""imdb.rating"": -1 } } ]); ","""Retrieve the titles and IMDb ratings of movies from the 'movies' collection that have more than 10,000 votes, sorted by their IMDb rating in descending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""num_mflix_comments"": { $gt: 0 } } }, { $group: { _id: null, averageComments: { $avg: ""$num_mflix_comments"" } } } ]); ","""Retrieve the average number of comments from the 'movies' collection where the number of comments is greater than zero, grouping the results without any specific identifier."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $group: { _id: ""$email"", totalComments: { $sum: 1 } } }, { $sort: { totalComments: -1 } } ]); ","""Aggregate the comments from the 'comments' collection to group by the email address and count the total number of comments for each email, then sort the results in descending order based on the total number of comments."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.theaters.aggregate([ { $geoNear: { near: { type: ""Point"", coordinates: [-118.2437, 34.0522] }, spherical: true, maxDistance: 10000, query: { ""location.address.city"": ""Los Angeles"" } } } ]); ","""Retrieve the theaters from the 'theaters' collection that are located within 10,000 meters of the geographical point with coordinates [-118.2437, 34.0522] and are situated in the city of 'Los Angeles'."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.sessions.aggregate([ { $group: { _id: ""$user_id"", sessionCount: { $sum: 1 } } }, { $match: { sessionCount: { $gt: 1 } } } ]); ","""Group the documents in the 'sessions' collection by 'user_id' to count the number of sessions for each user, and then filter the results to include only those users who have more than one session."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $lookup: { from: ""users"", localField: ""num_mflix_comments"", foreignField: ""_id"", as: ""comment_users"" } }, { $unwind: ""$comment_users"" }, { $group: { _id: ""$comment_users.email"", totalMovies: { $sum: 1 } } } ]); ","""Retrieve the total number of movies commented on by each user from the 'movies' collection, joining with the 'users' collection where the number of comments corresponds to the user's ID, and group the results by user email."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""released"": { $gt: new Date(""2000-01-01"") } } }, { $group: { _id: ""$year"", count: { $sum: 1 } } }, { $sort: { year: 1 } } ]); ","""Retrieve the count of movies from the 'movies' collection that were released after January 1, 2000, grouped by their release year, and sorted by year in ascending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $match: { date: { $gte: new Date(""2022-01-01"") } } }, { $group: { _id: ""$movie_id"", totalComments: { $sum: 1 } } } ]); ","""Count the total number of comments for each movie from the 'comments' collection where the comment date is on or after January 1, 2022."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""tomatoes.critic.meter"": { $lte: 40 } } }, { $project: { title: 1, ""tomatoes.critic.rating"": 1 } } ]); ","""Retrieve the titles and critic ratings of movies from the 'movies' collection where the critic meter rating on the tomatoes field is less than or equal to 40."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $match: { ""genres"": ""Drama"" } }, { $project: { title: 1, ""imdb.rating"": 1, ""num_mflix_comments"": 1 } }, { $sort: { ""imdb.rating"": -1 } } ]); ","""Retrieve the titles, IMDb ratings, and the number of comments from the 'movies' collection where the genre is 'Drama', and sort the results in descending order based on the IMDb ratings."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.comments.aggregate([ { $match: { ""text"": { $regex: /great/i } } }, { $group: { _id: ""$movie_id"", count: { $sum: 1 } } }, { $sort: { count: -1 } } ]); ","""Retrieve the count of comments from the 'comments' collection where the text contains the word 'great', irrespective of case, and group the results by the movie ID, finally sorting the grouped results by count in descending order."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
"," 
db.movies.aggregate([ { $group: { _id: ""$countries"", totalMovies: { $sum: 1 } } }, { $sort: { totalMovies: -1 } } ]); ","""Group the documents from the 'movies' collection by their countries, counting the total number of movies for each country, and then sort the results in descending order based on the total number of movies."""
sample_mflix,"//collection movies
{
  ""movies"": {
    ""_id"": ""string"",
    ""plot"": ""string"",
    ""genres"": [""string""],
    ""runtime"": ""number"",
    ""rated"": ""string"",
    ""cast"": [""string""],
    ""num_mflix_comments"": ""number"",
    ""poster"": ""string"",
    ""title"": ""string"",
    ""fullplot"": ""string"",
    ""languages"": [""string""],
    ""released"": ""Date"",
    ""directors"": [""string""],
    ""writers"": [""string""],
    ""awards"": {
      ""wins"": ""number"",
      ""nominations"": ""number"",
      ""text"": ""string""
    },
    ""lastupdated"": ""string"",
    ""countries"": [""string""],
    ""imdb"": {
      ""rating"": ""number"",
      ""votes"": ""number"",
      ""id"": ""number""
    },
    ""year"": ""number"",
    ""metacritic"": ""number"",
    ""type"": ""string"",
    ""tomatoes"": {
      ""website"": ""string"",
      ""viewer"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""dvd"": ""Date"",
      ""critic"": {
        ""rating"": ""number"",
        ""numReviews"": ""number"",
        ""meter"": ""number""
      },
      ""lastUpdated"": ""Date"",
      ""fresh"": ""number"",
      ""production"": ""string"",
      ""boxOffice"": ""string"",
      ""consensus"": ""string"",
      ""rotten"": ""number""
    }
  }
}

//collection theaters
{
  ""theaters"": {
    ""_id"": ""string"",
    ""theaterId"": ""number"",
    ""location"": {
      ""address"": {
        ""street1"": ""string"",
        ""city"": ""string"",
        ""state"": ""string"",
        ""zipcode"": ""string"",
        ""street2"": ""string""
      },
      ""geo"": {
        ""type"": ""string"",
        ""coordinates"": [""number""]
      }
    }
  }
}

//collection sessions
{
  ""sessions"": {
    ""_id"": ""string"",
    ""user_id"": ""string"",
    ""jwt"": ""string""
  }
}

//collection users
{
  ""users"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""password"": ""string""
  }
}

//collection comments
{
  ""comments"": {
    ""_id"": ""string"",
    ""name"": ""string"",
    ""email"": ""string"",
    ""movie_id"": ""string"",
    ""text"": ""string"",
    ""date"": ""Date""
  }
}
",,"""Retrieve all documents from the 'movies' collection."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({}); ,"""Retrieve all documents from the 'sales' collection."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ couponUsed: true }); ","""Retrieve all documents from the 'sales' collection where the 'couponUsed' field is set to true."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ ""customer.gender"": ""female"" }); ","""Retrieve the documents from the 'sales' collection where the customer's gender is 'female'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ ""customer.age"": { $gte: 30 } }); ","""Retrieve the documents of sales from the 'sales' collection where the customer's age is 30 years or older."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ storeLocation: ""New York"" }); ","""Retrieve the documents from the 'sales' collection where the store location is 'New York'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ ""customer.satisfaction"": { $lt: 3 } }); ","""Retrieve the documents from the 'sales' collection where the customer's satisfaction rating is less than 3."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ saleDate: { $gte: new Date(""2023-01-01""), $lte: new Date(""2023-12-31"") } }); ","""Retrieve all documents from the 'sales' collection where the 'saleDate' is between January 1, 2023, and December 31, 2023."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ items: { $in: [""itemA"", ""itemB""] } }); ","""Retrieve the documents from the 'sales' collection where the 'items' array contains either 'itemA' or 'itemB'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ purchaseMethod: ""online"" }); ","""Retrieve all documents from the 'sales' collection where the 'purchaseMethod' is 'online'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ ""customer.email"": /example.com/ }); ","""Retrieve the documents from the 'sales' collection where the customer's email contains 'example.com'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ $or: [{ ""customer.gender"": ""male"" }, { couponUsed: false }] }); ","""Retrieve the documents from the 'sales' collection where the customer is male or the coupon has not been used."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ ""customer.age"": 25, ""customer.satisfaction"": { $gte: 4 } }); ","""Retrieve the documents from the 'sales' collection where the customer is 25 years old and has a satisfaction rating of 4 or higher."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.findOne({ _id: ""sale123"" }); ","""Retrieve the document from the 'sales' collection where the '_id' is 'sale123'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ items: { $size: 3 } }); ","""Retrieve the documents from the 'sales' collection where the number of items in each sale is exactly three."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ storeLocation: { $regex: /^Los/ } }); ","""Retrieve the documents from the 'sales' collection where the 'storeLocation' starts with 'Los'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ saleDate: { $ne: new Date(""2023-06-15"") } }); ","""Retrieve the documents from the 'sales' collection where the 'saleDate' is not equal to June 15, 2023."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ ""customer.satisfaction"": { $gte: 4, $lte: 5 } }); ","""Retrieve the documents from the 'sales' collection where the customer's satisfaction is between 4 and 5, inclusive."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ couponUsed: true, purchaseMethod: ""in-store"" }); ","""Retrieve the documents from the 'sales' collection where the 'couponUsed' field is true and the 'purchaseMethod' field is 'in-store'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ saleDate: { $lt: new Date(""2023-05-01"") }, storeLocation: ""Los Angeles"" }); ","""Retrieve the documents from the 'sales' collection where the 'saleDate' is before May 1, 2023, and the 'storeLocation' is 'Los Angeles'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find().sort({ saleDate: -1 }); ","""Retrieve all documents from the 'sales' collection, sorted by the 'saleDate' in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ items: ""itemC"" }).limit(5); ","""Retrieve up to 5 documents from the 'sales' collection where the 'items' array contains the value 'itemC'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",,"""Retrieve all documents from the 'sales' collection and include the customer's details, filtering for entries where the 'couponUsed' flag is true."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.find({}); ,"""Retrieve all documents from the 'sales' collection."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ storeLocation: 'New York' }); ","""Retrieve all documents from the 'sales' collection where the store location is 'New York'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ 'customer.gender': 'female' }); ","""Retrieve the documents from the 'sales' collection where the customer's gender is 'female'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ 'customer.age': { $gte: 25 } }); ","""Retrieve the documents from the 'sales' collection where the age of the customer is 25 years or older."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ couponUsed: true }); ","""Retrieve the documents from the 'sales' collection where the 'couponUsed' field is true."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ 'customer.satisfaction': { $gt: 8 } }); ","""Retrieve the documents from the 'sales' collection where the customer's satisfaction score is greater than 8."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ saleDate: { $gte: new Date('2023-01-01') } }); ","""Retrieve all documents from the 'sales' collection where the 'saleDate' is on or after January 1, 2023."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ items: { $in: ['item1', 'item2'] } }); ","""Retrieve the documents from the 'sales' collection where the 'items' field includes either 'item1' or 'item2'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ purchaseMethod: 'online', 'customer.age': { $lt: 30 } }); ","""Retrieve the documents from the 'sales' collection where the 'purchaseMethod' is 'online' and the customer's age is less than 30."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ storeLocation: 'Los Angeles', couponUsed: false }); ","""Retrieve the documents from the 'sales' collection where the 'storeLocation' is 'Los Angeles' and 'couponUsed' is false."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ 'customer.email': { $regex: '@gmail.com$' } }); ","""Retrieve the documents from the 'sales' collection where the email of the customer ends with '@gmail.com'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ saleDate: { $lt: new Date('2023-05-01'), $gte: new Date('2023-01-01') } }); ","""Retrieve the documents from the 'sales' collection where the 'saleDate' is between January 1, 2023, and May 1, 2023, excluding May 1, 2023."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ items: { $size: 3 } }); ","""Retrieve the documents from the 'sales' collection where the number of items in each sale is exactly three."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ 'customer.satisfaction': { $lt: 5 }, storeLocation: 'Chicago' }); ","""Retrieve the documents from the 'sales' collection where the customer's satisfaction rating is less than 5 and the store location is 'Chicago'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ 'customer.age': { $ne: 40 } }); ","""Retrieve the documents from the 'sales' collection where the customer's age is not equal to 40."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ saleDate: { $eq: new Date('2023-04-01') } }); ","""Retrieve the documents from the 'sales' collection where the 'saleDate' is equal to April 1, 2023."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ $or: [ { storeLocation: 'Miami' }, { couponUsed: true } ] }); ","""Retrieve the documents from the 'sales' collection where the 'storeLocation' is 'Miami' or where a coupon was used."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ storeLocation: 'Seattle', 'customer.gender': 'male' }); ","""Retrieve the documents of sales from the 'sales' collection where the store location is 'Seattle' and the customer gender is 'male'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ items: 'item3', 'customer.satisfaction': { $gte: 6 } }); ","""Retrieve the documents from the 'sales' collection where the items include 'item3' and the customer satisfaction rating is greater than or equal to 6."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.find({ purchaseMethod: 'in-store', saleDate: { $gt: new Date('2023-06-01') } }); ","""Retrieve the documents from the 'sales' collection where the 'purchaseMethod' is 'in-store' and the 'saleDate' is greater than June 1, 2023."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",,"""Retrieve all documents from the 'sales' collection, displaying information about the sale date, items sold, store location, customer details including gender, age, email, and satisfaction, as well as whether a coupon was used and the purchase method."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
",db.sales.aggregate([ { $match: { 'customer.gender': 'female' } } ]); ,"""Retrieve the documents from the 'sales' collection where the customer has a gender of 'female'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } } ]); ","""Group the documents from the 'sales' collection by the 'storeLocation' field and calculate the total number of sales for each store location."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { couponUsed: true } }, { $group: { _id: '$customer.age', totalSales: { $sum: 1 } } } ]); ","""Aggregate the documents from the 'sales' collection where the 'couponUsed' field is true, grouping the results by the age of the customer and calculating the total number of sales for each age group."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: null, averageSatisfaction: { $avg: '$customer.satisfaction' } } } ]); ","""Calculate the average customer satisfaction from the 'sales' collection, grouping all records together."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { 'items': { $in: ['item1', 'item2'] } } }, { $sort: { saleDate: -1 } } ]); ","""Retrieve the documents from the 'sales' collection where the 'items' field contains either 'item1' or 'item2', sorted by the 'saleDate' in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: '$purchaseMethod', totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } } ]); ","""Group the sales data from the 'sales' collection by the 'purchaseMethod', calculating the total number of sales for each method, and then sort the results by total sales in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: '$customer.gender', totalSales: { $sum: 1 }, averageAge: { $avg: '$customer.age' } } } ]); ","""Group the documents in the 'sales' collection by the gender of the customer, calculating the total number of sales and the average age of the customers in each gender group."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { saleDate: { $gte: new Date('2023-01-01'), $lt: new Date('2023-12-31') } } }, { $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } } ]); ","""Count the total sales from the 'sales' collection for each store location where the 'saleDate' is between January 1, 2023, and December 31, 2023."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { 'customer.satisfaction': { $gt: 4 } } }, { $group: { _id: null, totalHighSatisfactionSales: { $sum: 1 } } } ]); ","""Count the total number of sales from the 'sales' collection where the customer satisfaction is greater than 4."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: '$storeLocation', averageSatisfaction: { $avg: '$customer.satisfaction' } } }, { $sort: { averageSatisfaction: -1 } } ]); ","""Group the documents in the 'sales' collection by 'storeLocation' and calculate the average customer satisfaction for each store location, then sort the results in descending order by average satisfaction."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { couponUsed: false } }, { $project: { items: 1, saleDate: 1 } } ]); ","""Retrieve the documents from the 'sales' collection where the 'couponUsed' field is false, and project only the 'items' and 'saleDate' fields."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: '$customer.email', totalSales: { $sum: 1 }, latestSaleDate: { $max: '$saleDate' } } } ]); ","""Group the documents from the 'sales' collection by the customer's email, calculating the total number of sales per email and finding the date of the most recent sale for each customer."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $project: { storeLocation: 1, satisfaction: '$customer.satisfaction', itemsCount: { $size: '$items' } } } ]); ","""Project the store location, customer satisfaction, and the count of items from the documents in the 'sales' collection."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { 'customer.age': { $gte: 30 } } }, { $group: { _id: '$purchaseMethod', totalSales: { $sum: 1 } } } ]); ","""Retrieve the total number of sales from the 'sales' collection, grouping the results by purchase method, where the customers are at least 30 years old."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: '$customer.gender', totalCouponUsage: { $sum: { $cond: [ '$couponUsed', 1, 0 ] } } } } ]); ","""Group the documents from the 'sales' collection by the gender of the customers and calculate the total number of times coupons were used, where each instance of coupon usage is counted as one."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { 'items': { $elemMatch: { $eq: 'itemA' } } } }, { $group: { _id: '$storeLocation', totalSales: { $sum: 1 } } } ]); ","""Retrieve the total number of sales from the 'sales' collection for each store location where the items sold include 'itemA', grouping the results by store location."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: '$customer.age', totalSales: { $sum: 1 }, averageSatisfaction: { $avg: '$customer.satisfaction' } } }, { $sort: { totalSales: -1 } } ]); ","""Group the sales data from the 'sales' collection by the customer's age, calculating the total number of sales and the average customer satisfaction for each age group, and sort the results by total sales in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { 'customer.satisfaction': { $gt: 3 } } }, { $project: { saleDate: 1, totalItems: { $size: '$items' } } } ]); ","""Retrieve the documents from the 'sales' collection where the customer's satisfaction is greater than 3, and project the sale date along with the total number of items sold in each sale."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { couponUsed: true, storeLocation: 'Store1' } }, { $group: { _id: '$items', totalSales: { $sum: 1 } } } ]); ","""Retrieve the total number of sales grouped by items from the 'sales' collection where a coupon was used and the store location is 'Store1'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { 'customer.age': { $lt: 25 } } }, { $group: { _id: null, totalSales: { $sum: 1 } } } ]);","""Count the total number of sales from the 'sales' collection where the customer's age is less than 25."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { couponUsed: true } }, { $group: { _id: ""$storeLocation"", totalSales: { $sum: 1 } } } ]); ","""Retrieve the total number of sales from the 'sales' collection where a coupon was used, grouped by the store location."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$customer.gender"", averageSatisfaction: { $avg: ""$customer.satisfaction"" } } } ]); ","""Calculate the average customer satisfaction from the 'sales' collection, grouped by customer gender."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.age"": { $gte: 30 } } }, { $sort: { saleDate: -1 } } ]); ","""Retrieve all sales documents from the 'sales' collection where the customer's age is 30 years or older, sorted by the sale date in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$purchaseMethod"", totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } } ]); ","""Group the sales records from the 'sales' collection by the 'purchaseMethod' field, calculating the total number of sales for each purchase method, and then sort the results by the total number of sales in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.satisfaction"": { $lte: 5 } } }, { $project: { _id: 0, saleDate: 1, storeLocation: 1, customer: 1 } } ]); ","""Retrieve the documents from the 'sales' collection where the customer's satisfaction is less than or equal to 5, and project the 'saleDate', 'storeLocation', and 'customer' fields while excluding the '_id' field."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: { year: { $year: ""$saleDate"" }, month: { $month: ""$saleDate"" } }, totalSales: { $sum: 1 } } }, { $sort: { ""_id.year"": 1, ""_id.month"": 1 } } ]); ","""Group the sales records from the 'sales' collection by year and month of the 'saleDate', calculating the total number of sales for each month, and sort the results in ascending order by year and month."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $lookup: { from: 'customers', localField: 'customer.email', foreignField: 'email', as: 'customer_info' } }, { $match: { ""customer_info.gender"": ""female"" } } ]); ","""Retrieve sales data from the 'sales' collection and include related customer information from the 'customers' collection, where the gender of the customer is 'female'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$storeLocation"", totalItemsSold: { $sum: { $size: ""$items"" } } } } ]); ","""Group the sales records from the 'sales' collection by their store location, and calculate the total number of items sold at each location by summing the sizes of the items array in each sale."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { storeLocation: ""Downtown"" } }, { $sort: { saleDate: 1 } } ]); ","""Retrieve the documents from the 'sales' collection where the 'storeLocation' is 'Downtown', sorted by 'saleDate' in ascending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.age"": { $gte: 18, $lte: 25 } } }, { $group: { _id: ""$storeLocation"", averageSatisfaction: { $avg: ""$customer.satisfaction"" } } } ]); ","""Retrieve the average customer satisfaction for sales from the 'sales' collection, where the customer's age is between 18 and 25 years old, grouped by store location."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$purchaseMethod"", totalCouponUsed: { $sum: { $cond: [""$couponUsed"", 1, 0] } } } } ]); ","""Calculate the total number of times coupons were used, grouped by purchase method, from the 'sales' collection."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.gender"": ""male"", storeLocation: ""Uptown"" } }, { $group: { _id: ""$saleDate"", count: { $sum: 1 } } } ]); ","""Aggregate the sales data from the 'sales' collection to find the total number of sales per date for male customers who made purchases at the 'Uptown' store location."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $sort: { ""customer.satisfaction"": -1 } }, { $limit: 5 } ]); ","""Retrieve the top 5 documents from the 'sales' collection, sorted by the 'customer.satisfaction' field in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { saleDate: { $gte: new Date('2023-01-01') } } }, { $group: { _id: ""$items"", totalSales: { $sum: 1 } } } ]); ","""Retrieve the total sales for each item from the 'sales' collection where the sale date is on or after January 1, 2023, by counting the number of sales for each item."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $project: { storeLocation: 1, customerSatisfaction: ""$customer.satisfaction"", itemsCount: { $size: ""$items"" } } } ]); ","""Project the store location, customer satisfaction from the customer data, and the count of items sold from the 'sales' collection."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.email"": { $regex: /gmail.com$/ } } }, { $group: { _id: ""$storeLocation"", count: { $sum: 1 } } } ]); ","""Aggregate the documents from the 'sales' collection by first filtering for customers whose email addresses end with 'gmail.com', and then grouping the results by store location while counting the number of sales in each location."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: null, averageAge: { $avg: ""$customer.age"" }, totalCouponsUsed: { $sum: { $cond: [""$couponUsed"", 1, 0] } } } } ]); ","""Calculate the average age of customers and the total number of coupons used from the 'sales' collection, grouping all results together without any specific identifiers."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { storeLocation: ""Midtown"" } }, { $group: { _id: null, totalSales: { $sum: 1 }, averageSatisfaction: { $avg: ""$customer.satisfaction"" } } } ]); ","""Aggregate the sales from the 'sales' collection where the 'storeLocation' is 'Midtown' to calculate the total number of sales and the average customer satisfaction."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$customer.gender"", totalSales: { $sum: 1 }, averageAge: { $avg: ""$customer.age"" } } } ]); ","""Group the documents from the 'sales' collection by the gender of the customers, calculating the total number of sales and the average age of the customers for each gender."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$saleDate"", totalItems: { $sum: { $size: ""$items"" } } } }, { $sort: { totalItems: -1 } } ]);","""Aggregate the documents from the 'sales' collection by grouping them by 'saleDate', calculating the total number of items sold for each date, and then sort the results in descending order based on the total number of items."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
","db.sales.aggregate([ { $match: { ""customer.gender"": ""female"" } }, { $group: { _id: ""$storeLocation"", totalSales: { $sum: 1 } } } ]); ","""Retrieve the total number of sales from the 'sales' collection, grouping the results by store location, for female customers."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: { $year: ""$saleDate"" }, totalRevenue: { $sum: { $cond: [ ""$couponUsed"", 0, 1 ] } } } }, { $sort: { _id: 1 } } ]); ","""Group the documents from the 'sales' collection by the year of the 'saleDate' field, calculating the total revenue for each year by summing 1 for each sale where no coupon was used, and then sort the results by year in ascending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.satisfaction"": { $gt: 4 } } }, { $group: { _id: ""$purchaseMethod"", avgAge: { $avg: ""$customer.age"" } } } ]); ","""Retrieve the average age of customers from the 'sales' collection who have a satisfaction level greater than 4, grouped by their purchase method."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$storeLocation"", salesCount: { $sum: 1 }, avgSatisfaction: { $avg: ""$customer.satisfaction"" } } }, { $sort: { salesCount: -1 } } ]); ","""Group the sales from the 'sales' collection by the store location, counting the total number of sales for each location and calculating the average customer satisfaction rating, then sort the results in descending order by the total sales count."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $lookup: { from: 'sales', localField: 'email', foreignField: 'customer.email', as: 'customerSales' } }, { $unwind: ""$customerSales"" }, { $group: { _id: ""$customerSales.customer.email"", totalAmount: { $sum: 1 }, avgSatisfaction: { $avg: ""$customerSales.customer.satisfaction"" } } } ]); ","""Aggregate data from the 'sales' collection by joining it with itself based on customer email addresses, unwind the resulting data to flatten customer sales records, and then group the results by customer email while calculating the total number of sales and the average customer satisfaction for each email."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$couponUsed"", totalSales: { $sum: 1 }, avgAge: { $avg: ""$customer.age"" } } } ]); ","""Group the documents in the 'sales' collection by the 'couponUsed' field, calculating the total number of sales and the average age of customers for each group."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$storeLocation"", totalCouponsUsed: { $sum: { $cond: [ ""$couponUsed"", 1, 0 ] } } } }, { $match: { totalCouponsUsed: { $gt: 0 } } } ]); ","""Group the documents from the 'sales' collection by 'storeLocation' and calculate the total number of coupons used by summing up the occurrences where 'couponUsed' is true. Then, filter the results to include only those store locations where the total coupons used is greater than zero."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""items"": { $in: [""itemA""] } } }, { $group: { _id: ""$customer.email"", totalPurchases: { $sum: 1 } } } ]); ","""Retrieve the total number of purchases for each unique customer email from the 'sales' collection where the items purchased include 'itemA', grouped by the customer's email."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""purchaseMethod"": ""online"" } }, { $group: { _id: { $year: ""$saleDate"" }, totalOnlineSales: { $sum: 1 } } } ]); ","""Retrieve the total number of online sales from the 'sales' collection by grouping the sales records based on the year extracted from the 'saleDate' field, where the 'purchaseMethod' is specified as 'online'."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$customer.email"", purchases: { $push: ""$$ROOT"" }, totalPurchases: { $sum: 1 } } }, { $match: { totalPurchases: { $gt: 1 } } } ]); ","""Group the documents in the 'sales' collection by the customer's email address, aggregating all purchase documents in a list and counting the total number of purchases for each customer, and then filter to include only those customers who have made more than one purchase."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$customer.gender"", avgSatisfaction: { $avg: ""$customer.satisfaction"" }, totalSales: { $sum: 1 } } } ]); ","""Group the sales from the 'sales' collection by the gender of the customer, calculating the average customer satisfaction and the total number of sales for each gender."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""storeLocation"": ""Location1"" } }, { $group: { _id: ""$customer.age"", totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } } ]); ","""Retrieve the total number of sales from the 'sales' collection for each customer age where the store location is 'Location1', and sort the results by total sales in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""items"": { $size: 3 } } }, { $group: { _id: null, totalSales: { $sum: 1 } } } ]); ","""Count the total number of sales from the 'sales' collection where the number of items in each sale is exactly three."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$purchaseMethod"", totalSales: { $sum: 1 }, totalRevenue: { $sum: { $cond: [ ""$couponUsed"", 0, 1 ] } } } } ]); ","""Group the documents from the 'sales' collection by the 'purchaseMethod' field, counting the total number of sales and calculating the total revenue where no coupon was used."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.age"": { $gt: 30 } } }, { $group: { _id: ""$storeLocation"", totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } } ]); ","""Aggregate the documents from the 'sales' collection to find the total number of sales for each store location, including only those sales where the customer's age is greater than 30, and sort the results by total sales in descending order."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $facet: { online: [ { $match: { ""purchaseMethod"": ""online"" } }, { $count: ""count"" } ], offline: [ { $match: { ""purchaseMethod"": ""in-store"" } }, { $count: ""count"" } ] } } ]); ","""Aggregate the sales data from the 'sales' collection to count the number of sales made online and in-store. Specifically, count the sales where the 'purchaseMethod' is 'online' and label this count as 'count' in the online category, and count the sales where the 'purchaseMethod' is 'in-store' and label this count as 'count' in the offline category."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.satisfaction"": { $lt: 3 } } }, { $group: { _id: ""$storeLocation"", totalUnhappyCustomers: { $sum: 1 } } } ]); ","""Aggregate the documents from the 'sales' collection to find store locations where the customer satisfaction is less than 3, and count the total number of unhappy customers for each store location."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: ""$storeLocation"", avgAge: { $avg: ""$customer.age"" }, totalSales: { $sum: 1 } } }, { $sort: { totalSales: -1 } } ]); ","""Group the documents from the 'sales' collection by store location, calculating the average age of customers and the total number of sales for each location, and then sort the results in descending order based on the total number of sales."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $group: { _id: null, totalCouponsUsed: { $sum: { $cond: [ ""$couponUsed"", 1, 0 ] } }, totalSales: { $sum: 1 } } } ]); ","""Aggregate the documents from the 'sales' collection to calculate the total number of coupons used, which counts each instance where a coupon was used, and the total number of sales, returning these two values in a single document."""
sample_supplies,"// collection sales
{
  ""sales"": {
    ""_id"": ""string"",
    ""saleDate"": ""Date"",
    ""items"": [""string""],
    ""storeLocation"": ""string"",
    ""customer"": {
      ""gender"": ""string"",
      ""age"": ""number"",
      ""email"": ""string"",
      ""satisfaction"": ""number""
    },
    ""couponUsed"": ""boolean"",
    ""purchaseMethod"": ""string""
  }
}
"," 
db.sales.aggregate([ { $match: { ""customer.gender"": ""male"", ""customer.satisfaction"": { $gt: 3 } } }, { $group: { _id: ""$storeLocation"", totalSales: { $sum: 1 } } } ]);","""Aggregate the sales data from the 'sales' collection by first filtering for records where the customer is male and their satisfaction rating is greater than 3, and then group the results by store location while counting the total number of sales for each location."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",db.data.find({}); ,"""Retrieve all documents from the 'data' collection without any filters or conditions."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""st"": ""SampleStation"" }); ","""Retrieve the documents from the 'data' collection where the station identifier 'st' is equal to 'SampleStation'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""elevation"": { $gt: 1000 } }); ","""Retrieve the documents from the 'data' collection where the 'elevation' is greater than 1000."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""airTemperature.value"": { $lt: 0 } }); ","""Retrieve the documents from the 'data' collection where the value of air temperature is less than 0 degrees."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""callLetters"": { $regex: /^AB123/ } }); ","""Retrieve the documents from the 'data' collection where the 'callLetters' field starts with 'AB123'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""wind.type"": ""Gusty"" }); ","""Retrieve the documents from the 'data' collection where the type of wind is classified as 'Gusty'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""visibility.distance.value"": { $gte: 5000 } }); ","""Retrieve the documents from the 'data' collection where the visibility distance value is greater than or equal to 5000."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""sections"": { $exists: true, $not: { $size: 0 } } }); ","""Retrieve the documents from the 'data' collection where the 'sections' field exists and is not empty."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""precipitationEstimatedObservation.estimatedWaterDepth"": { $exists: true } }); ","""Retrieve the documents from the 'data' collection where the 'estimatedWaterDepth' field within 'precipitationEstimatedObservation' exists."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""skyCondition.cavok"": ""Yes"" }); ","""Retrieve the documents from the 'data' collection where the 'cavok' field under 'skyCondition' is equal to 'Yes'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""pastWeatherObservationManual"": { $elemMatch: { ""quality"": ""Good"" } } }); ","""Retrieve the documents from the 'data' collection where at least one entry in the 'pastWeatherObservationManual' field has a 'quality' of 'Good'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""atmosphericPressureObservation.altimeterSetting.value"": { $lt: 30 } }); ","""Retrieve the documents from the 'data' collection where the value of the altimeter setting in the atmospheric pressure observation is less than 30."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""waveMeasurement.waves.quality"": ""Excellent"" }); ","""Retrieve the documents from the 'data' collection where the quality of the waves in the wave measurement is classified as 'Excellent'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""dewPoint.value"": { $gte: 20, $lte: 30 } }); ","""Retrieve the documents from the 'data' collection where the value of 'dewPoint' is greater than or equal to 20 and less than or equal to 30."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""seaSurfaceTemperature.value"": { $ne: null } }); ","""Retrieve all documents from the 'data' collection where the value of the sea surface temperature is not equal to null."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""wind.direction.quality"": ""Good"" }); ","""Retrieve all documents from the 'data' collection where the quality of the wind direction is 'Good'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""atmosphericPressureChange.tendency.code"": ""Rising"" }); ","""Retrieve the documents from the 'data' collection where the tendency code of atmospheric pressure change is 'Rising'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""skyCoverLayer"": { $exists: true } }); ","""Retrieve all documents from the 'data' collection where the 'skyCoverLayer' field exists."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""currentWeatherObservationManual"": { $size: 0 } }); ","""Retrieve the documents from the 'data' collection where the 'currentWeatherObservationManual' array field has no elements."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""skyConditionObservation.totalCoverage.value"": ""Fully Covered"" }); ","""Retrieve the documents from the 'data' collection where the total coverage of sky condition observation is labeled as 'Fully Covered'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",,"""Retrieve all documents from the 'data' collection, selecting all fields without any specific filters or conditions applied."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ airTemperature: { quality: ""good"" } }); ","""Retrieve the documents from the 'data' collection where the quality of the air temperature is classified as 'good'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""position.type"": ""Point"" }); ","""Retrieve the documents from the 'data' collection where the 'position.type' field is equal to 'Point'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ elevation: { $gt: 1000 } }); ","""Retrieve all documents from the 'data' collection where the elevation is greater than 1000."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""dewPoint.value"": { $lt: 0 } }); ","""Retrieve the documents from the 'data' collection where the value of the dew point is less than 0."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""wind.speed.rate"": { $gte: 25 } }); ","""Retrieve the documents from the 'data' collection where the wind speed rate is greater than or equal to 25."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""visibility.distance.value"": { $eq: 1000 } }); ","""Retrieve the documents from the 'data' collection where the visibility distance value is equal to 1000."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""skyCondition.ceilingHeight.value"": { $ne: null } }); ","""Retrieve the documents from the 'data' collection where the ceiling height value in the sky condition is not equal to null."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""precipitationEstimatedObservation.estimatedWaterDepth"": { $gte: 5 } }); ","""Retrieve the documents from the 'data' collection where the estimated water depth in the precipitation estimated observation is greater than or equal to 5."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""atmosphericPressureObservation.altimeterSetting.value"": { $lt: 29.92 } }); ","""Retrieve the documents from the 'data' collection where the 'altimeterSetting' value of the 'atmosphericPressureObservation' is less than 29.92."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ callLetters: { $regex: /^K/ } }); ","""Retrieve the documents from the 'data' collection where the 'callLetters' field starts with the letter 'K'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""seaSurfaceTemperature.value"": { $gt: 30 } }); ","""Retrieve the documents from the 'data' collection where the value of 'seaSurfaceTemperature' is greater than 30."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""waveMeasurement.method"": ""buoy"" }); ","""Retrieve the documents from the 'data' collection where the wave measurement method is 'buoy'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ type: ""weather"" }); ","""Retrieve the documents from the 'data' collection where the 'type' field is equal to 'weather'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ qualityControlProcess: { $in: [""verified"", ""pending""] } }); ","""Retrieve the documents from the 'data' collection where the 'qualityControlProcess' is either 'verified' or 'pending'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ skyCoverLayer: { $exists: true, $not: { $size: 0 } } }); ","""Retrieve the documents from the 'data' collection where the 'skyCoverLayer' field exists and is not empty."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""atmosphericPressureChange.tendency.code"": ""R"" }); ","""Retrieve the documents from the 'data' collection where the tendency code of atmospheric pressure change is equal to 'R'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""pastWeatherObservationManual"": { $size: 0 } }); ","""Retrieve the documents from the 'data' collection where the 'pastWeatherObservationManual' array is empty."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""presentWeatherObservationManual"": { $exists: true } }); ","""Retrieve the documents from the 'data' collection where the field 'presentWeatherObservationManual' exists."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""wind.direction.quality"": ""good"" }); ","""Retrieve the documents from the 'data' collection where the quality of the wind direction is classified as 'good'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ sections: { $all: [""A"", ""B""] } }); ","""Retrieve the documents from the 'data' collection where the 'sections' field includes both 'A' and 'B'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
", ,"""Retrieve all documents from the 'data' collection, including all fields."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.find({ ""airTemperature.value"": { $gt: 20 } }); ","""Retrieve the documents from the 'data' collection where the value of air temperature is greater than 20."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""wind.direction.quality"": ""good"" } }, { $group: { _id: ""$wind.type"", avgSpeed: { $avg: ""$wind.speed.rate"" } } }]); ","""From the 'data' collection, identify the wind types where the quality of the wind direction is classified as 'good', and calculate the average speed for each wind type."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""pressure.value"": { $lt: 1013 }, ""qualityControlProcess"": ""passed"" }); ","""Retrieve the documents from the 'data' collection where the pressure value is less than 1013 and the quality control process is marked as 'passed'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $group: { _id: ""$callLetters"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","""Group the documents in the 'data' collection by the 'callLetters' field, counting the number of occurrences for each call letter, and sort the results in descending order based on the count of occurrences."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""visibility.distance.value"": { $gt: 1000 } }).sort({ ""ts"": -1 }); ","""Retrieve the documents from the 'data' collection where the 'visibility.distance.value' is greater than 1000, sorted by the timestamp in descending order."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""atmosphericPressureChange.tendency.code"": ""up"" } }, { $group: { _id: null, avgPressure: { $avg: ""$atmosphericPressureObservation.stationPressure.value"" } } }]); ","""Retrieve the average value of the station pressure from the 'data' collection for records where the atmospheric pressure change tendency code is 'up'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""seaSurfaceTemperature.value"": { $gte: 15, $lte: 30 } }); ","""Retrieve the documents from the 'data' collection where the value of 'seaSurfaceTemperature' is greater than or equal to 15 and less than or equal to 30."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""presentWeatherObservationManual"": { $ne: [] } } }, { $group: { _id: ""$st"", count: { $sum: 1 } } }]); ","""Aggregate the documents from the 'data' collection where the 'presentWeatherObservationManual' array is not empty, grouping the results by the 'st' field and counting the number of occurrences for each unique 'st' value."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""dewPoint.value"": { $lt: 0 } }); ","""Retrieve the documents from the 'data' collection where the dew point value is less than 0."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""precipitationEstimatedObservation.estimatedWaterDepth"": { $gt: 5 } } }, { $sort: { ""ts"": -1 } }]); ","""Retrieve all documents from the 'data' collection where the estimated water depth of precipitation is greater than 5, sorted by the timestamp in descending order."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""skyCondition.ceilingHeight.value"": { $lt: 200 } }); ","""Retrieve the documents from the 'data' collection where the value of the ceiling height in the sky condition is less than 200."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $group: { _id: ""$position.type"", avgElevation: { $avg: ""$elevation"" } } }, { $sort: { avgElevation: -1 } }]); ","""Group the documents from the 'data' collection by the type of position, calculating the average elevation for each group, and sort the results by the average elevation in descending order."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""wind.speed.quality"": ""moderate"" }).limit(10); ","""Retrieve up to 10 documents from the 'data' collection where the quality of the wind speed is categorized as 'moderate'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""pastWeatherObservationManual"": { $size: { $gt: 0 } } } }, { $project: { st: 1, ts: 1, pastWeatherObservationManual: 1 } }]); ","""Retrieve the documents from the 'data' collection where the 'pastWeatherObservationManual' array has more than zero elements, and project only the 'st', 'ts', and 'pastWeatherObservationManual' fields."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""waveMeasurement.waves.quality"": ""good"" }).sort({ ""waveMeasurement.waves.height"": -1 }).limit(5); ","""Retrieve the documents from the 'data' collection where the quality of wave measurements is classified as 'good', sorted by the height of the waves in descending order, and limit the results to 5 entries."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""skyConditionObservation.lowestCloudBaseHeight.value"": { $gte: 100 } } }, { $group: { _id: null, count: { $sum: 1 } } }]); ","""Count the number of documents from the 'data' collection where the 'lowestCloudBaseHeight' value in the 'skyConditionObservation' is greater than or equal to 100."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""atmosphericPressureObservation.altimeterSetting.value"": { $gt: 30 } }); ","""Retrieve the documents from the 'data' collection where the altimeter setting value of atmospheric pressure observations is greater than 30."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $lookup: { from: ""data"", localField: ""ts"", foreignField: ""ts"", as: ""time_data"" } }, { $unwind: ""$time_data"" }, { $group: { _id: ""$_id"", avgTemperature: { $avg: ""$airTemperature.value"" } } }]); ","""Perform an aggregation on the 'data' collection by first looking up related documents from the same 'data' collection based on matching timestamps, then unwinding the resulting array of related documents, and finally grouping the results by the document ID while calculating the average of the air temperature values."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""skyCoverLayer"": { $exists: true, $ne: [] } }); ","""Retrieve the documents from the 'data' collection where the 'skyCoverLayer' field exists and is not an empty array."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""callLetters"": { $regex: /^A/ } } }, { $project: { st: 1, ts: 1, callLetters: 1 } }]); ","""Retrieve documents from the 'data' collection where the 'callLetters' field starts with the letter 'A', and project only the 'st', 'ts', and 'callLetters' fields in the result."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.find({ ""atmosphericPressureObservation.stationPressure.value"": { $gt: 990 } }).limit(15); ","""Retrieve the first 15 documents from the 'data' collection where the station pressure value in the atmospheric pressure observation is greater than 990."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",,"""Retrieve all documents from the 'data' collection, selecting all fields without any filters or conditions applied."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([{ $match: { ""type"": ""weather"" } }, { $group: { _id: ""$callLetters"", averageTemperature: { $avg: ""$airTemperature.value"" } } }]); ","""Retrieve the average air temperature from the 'data' collection for entries where the 'type' is 'weather', grouping the results by their call letters."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""wind.type"": ""gust"" } }, { $group: { _id: ""$callLetters"", maxWindSpeed: { $max: ""$wind.speed.rate"" } } }]); ","""Retrieve the maximum wind speed from the 'data' collection for entries where the wind type is classified as 'gust', and group the results by the call letters."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","
db.data.aggregate([{ $match: { ""visibility.distance.value"": { $gte: 1000 } } }, { $sort: { ""ts"": -1 } }]); ","""Retrieve the documents from the 'data' collection where the distance value of visibility is greater than or equal to 1000, and sort the results by the timestamp in descending order."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","
db.data.aggregate([{ $group: { _id: ""$sections"", avgPressure: { $avg: ""$atmosphericPressureObservation.stationPressure.value"" } } }, { $sort: { avgPressure: -1 } }]); ","""Group the documents in the 'data' collection by the 'sections' field and calculate the average value of the 'stationPressure' in the 'atmosphericPressureObservation' sub-document for each section, then sort the results by the average pressure in descending order."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","
db.data.aggregate([{ $match: { ""airTemperature.quality"": ""good"" } }, { $project: { _id: 0, callLetters: 1, airTemperature: 1 } }]); ","""Retrieve the documents from the 'data' collection where the quality of the air temperature is 'good', and select only the call letters and air temperature fields from those documents."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $group: { _id: ""$type"", totalCount: { $sum: 1 } } }, { $match: { totalCount: { $gt: 10 } } }]); ","""Group the documents in the 'data' collection by the 'type' field, counting the total occurrences of each type, and then filter the results to only include those types where the total count is greater than 10."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","
db.data.aggregate([{ $lookup: { from: ""data"", localField: ""callLetters"", foreignField: ""callLetters"", as: ""relatedData"" } }, { $unwind: ""$relatedData"" }, { $group: { _id: ""$relatedData.callLetters"", avgElevation: { $avg: ""$elevation"" } } }]); ","""Join the 'data' collection with itself to retrieve related documents based on the matching 'callLetters', unwind the results to flatten the data structure, and then group the data by 'callLetters' to calculate the average elevation for each unique 'callLetters'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""precipitationEstimatedObservation.estimatedWaterDepth"": { $gt: 0 } } }, { $sort: { ""ts"": -1 } }, { $limit: 5 }]); ","""Retrieve the documents from the 'data' collection where the 'estimatedWaterDepth' in 'precipitationEstimatedObservation' is greater than 0, sort the results by the 'ts' field in descending order, and limit the output to the most recent 5 documents."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""dewPoint.value"": { $lt: 0 } } }, { $group: { _id: ""$callLetters"", totalDecreasedHumidity: { $sum: 1 } } }]); ","""Retrieve the count of occurrences in the 'data' collection where the dew point value is less than 0, grouped by the call letters, and calculate the total decreased humidity for each group."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""skyCondition.ceilingHeight.value"": { $lt: 300 } } }, { $project: { callLetters: 1, ceilingHeight: ""$skyCondition.ceilingHeight.value"" } }]); ","""Retrieve the call letters and the ceiling height value from the 'data' collection for records where the ceiling height is less than 300."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $group: { _id: ""$skyCondition.cavok"", count: { $sum: 1 } } }, { $sort: { count: -1 } }]); ","""Group the documents from the 'data' collection by the value of the 'cavok' field within the 'skyCondition' object, counting the number of occurrences for each unique value, and sort the results by the count in descending order."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","
db.data.aggregate([{ $match: { ""pastWeatherObservationManual"": { $ne: [] } } }, { $project: { callLetters: 1, pastWeather: ""$pastWeatherObservationManual"" } }]); ","""Retrieve the call letters and past weather observations from the 'data' collection for documents where the past weather observation manual is not an empty array."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""wind.speed.rate"": { $gte: 5 } } }, { $group: { _id: ""$wind.direction.angle"", avgWindSpeed: { $avg: ""$wind.speed.rate"" } } }]); ","""Aggregate the documents from the 'data' collection, filtering for entries where the wind speed rate is greater than or equal to 5, and then group the results by the wind direction angle, calculating the average wind speed for each direction."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $project: { callLetters: 1, airTempQuality: ""$airTemperature.quality"", pressureQuality: ""$pressure.quality"" } }, { $match: { airTempQuality: ""good"", pressureQuality: ""acceptable"" } }]); ","""Select the call letters, air temperature quality, and pressure quality from the 'data' collection, and filter the results to include only those documents where the air temperature quality is 'good' and the pressure quality is 'acceptable'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $group: { _id: ""$atmosphericPressureChange.tendency.code"", totalObservations: { $sum: 1 } } }, { $sort: { totalObservations: -1 } }]); ","""Group the documents from the 'data' collection by the tendency code of atmospheric pressure change, counting the total number of observations for each tendency, and then sort the results in descending order based on the total number of observations."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $project: { ts: 1, ""visibility.distance"": ""$visibility.distance.value"" } }, { $match: { ""visibility.distance"": { $gt: 5000 } } }]); ","""Retrieve the timestamps and visibility distance values from the 'data' collection, where the visibility distance exceeds 5000 units."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""seaSurfaceTemperature.value"": { $gte: 25 } } }, { $group: { _id: ""$callLetters"", averageSeaTemp: { $avg: ""$seaSurfaceTemperature.value"" } } }]); ","""Retrieve the average sea surface temperature from the 'data' collection for each unique call letter, considering only those documents where the sea surface temperature value is greater than or equal to 25 degrees."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","
db.data.aggregate([{ $lookup: { from: ""data"", localField: ""sections"", foreignField: ""sections"", as: ""sectionData"" } }, { $unwind: ""$sectionData"" }, { $group: { _id: ""$sectionData.sections"", avgElevation: { $avg: ""$elevation"" } } }]); ","""Perform an aggregation on the 'data' collection, look up related documents in the same 'data' collection based on matching 'sections', unwind the resulting array of related documents, and then group the data by 'sections' while calculating the average elevation for each group."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""skyCoverLayer"": { $ne: [] } } }, { $group: { _id: null, totalLayers: { $sum: { $size: ""$skyCoverLayer"" } } } }]); ","""Retrieve the total number of layers in the 'skyCoverLayer' field from the 'data' collection, including only those documents where the 'skyCoverLayer' is not an empty array."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([{ $match: { ""atmosphericPressureObservation.altimeterSetting.value"": { $lt: 1000 } } }, { $project: { _id: 0, callLetters: 1, altimeter: ""$atmosphericPressureObservation.altimeterSetting.value"" } }]); ","""Retrieve the call letters and the altimeter setting value from the 'data' collection for documents where the altimeter setting value in the atmospheric pressure observation is less than 1000."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
",,"""Retrieve all documents from the 'data' collection, selecting all fields without any filters or sorting applied."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
","db.data.aggregate([ { $group: { _id: ""$callLetters"", averageTemperature: { $avg: ""$airTemperature.value"" } } } ]); ","""Group the documents from the 'data' collection by 'callLetters' and calculate the average air temperature from the 'airTemperature.value' field for each group."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""type"": ""weather"" } }, { $group: { _id: ""$qualityControlProcess"", totalRecords: { $sum: 1 } } } ]); ","""Retrieve the total count of records from the 'data' collection where the 'type' is 'weather', grouped by 'qualityControlProcess'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""elevation"": { $gt: 1000 } } }, { $sort: { ""ts"": -1 } }, { $limit: 5 } ]); ","""Retrieve the documents from the 'data' collection where the elevation is greater than 1000, sort the results by the timestamp in descending order, and limit the output to the most recent 5 documents."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $lookup: { from: ""sections"", localField: ""sections"", foreignField: ""_id"", as: ""sectionDetails"" } }, { $unwind: ""$sectionDetails"" }, { $group: { _id: ""$sectionDetails.name"", count: { $sum: 1 } } } ]); ","""Perform an aggregation on the 'data' collection to retrieve details of sections by first looking up related section information from the 'sections' collection where the 'sections' field of the data documents matches the '_id' field in the sections collection. Then, unwind the resulting section details and group the data by the section name, counting the total occurrences for each section."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""wind.speed.rate"": { $gte: 15 } } }, { $group: { _id: null, averagePressure: { $avg: ""$pressure.value"" } } } ]); ","""Retrieve the average pressure value from the 'data' collection for records where the wind speed rate is greater than or equal to 15."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""seaSurfaceTemperature.value"": { $lt: 25 } } }, { $project: { callLetters: 1, seaSurfaceTemperature: 1 } } ]); ","""Retrieve the documents from the 'data' collection where the value of 'seaSurfaceTemperature' is less than 25, and project only the 'callLetters' and 'seaSurfaceTemperature' fields."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $facet: { temperatureStats: [ { $group: { _id: null, avg: { $avg: ""$airTemperature.value"" }, max: { $max: ""$airTemperature.value"" }, min: { $min: ""$airTemperature.value"" } } } ], pressureStats: [ { $group: { _id: null, avg: { $avg: ""$pressure.value"" }, max: { $max: ""$pressure.value"" }, min: { $min: ""$pressure.value"" } } } ] } } ]); ","""Calculate the average, maximum, and minimum values of air temperature from the 'data' collection and calculate the average, maximum, and minimum values of pressure from the same collection, using the aggregation framework to create two separate sets of statistics: one for temperature and one for pressure."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $group: { _id: ""$type"", totalRecords: { $sum: 1 }, averageElevation: { $avg: ""$elevation"" } } }, { $sort: { totalRecords: -1 } } ]); ","""Group the documents in the 'data' collection by the 'type' field, counting the total number of records and calculating the average elevation for each type, then sort the results in descending order based on the total number of records."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""pastWeatherObservationManual"": { $ne: [] } } }, { $project: { st: 1, pastWeatherCount: { $size: ""$pastWeatherObservationManual"" } } } ]); ","""Retrieve the documents from the 'data' collection where the 'pastWeatherObservationManual' field is not empty, and project the 'st' field along with a count of the items in the 'pastWeatherObservationManual' array as 'pastWeatherCount'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $sort: { ""visibility.distance.value"": -1 } }, { $group: { _id: ""$callLetters"", highestVisibility: { $first: ""$visibility.distance.value"" } } } ]); ","""Sort the documents in the 'data' collection by the value of visibility distance in descending order, then group the sorted results by call letters, selecting the highest visibility distance for each call letter."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""precipitationEstimatedObservation.estimatedWaterDepth"": { $gt: 50 } } }, { $group: { _id: ""$callLetters"", count: { $sum: 1 } } } ]); ","""Retrieve the count of distinct call letters from the 'data' collection for records where the estimated water depth in the precipitation observation is greater than 50."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $project: { st: 1, windSpeed: ""$wind.speed.rate"", windDirection: ""$wind.direction.angle"" } }, { $match: { windSpeed: { $gt: 20 } } } ]); ","""Select the 'st' field, the wind speed from the 'wind.speed.rate' field, and the wind direction from the 'wind.direction.angle' field from the 'data' collection, and filter the results to include only those records where the wind speed is greater than 20."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""skyCondition.ceilingHeight.value"": { $gt: 2000 } } }, { $group: { _id: ""$callLetters"", ceilingHeightAvg: { $avg: ""$skyCondition.ceilingHeight.value"" } } } ]); ","""Retrieve the average ceiling height values from the 'data' collection for records where the ceiling height exceeds 2000, grouping the results by the call letters."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""visibility.distance.value"": { $gte: 10000 } } }, { $group: { _id: ""$st"", count: { $sum: 1 } } } ]); ","""Retrieve the count of documents from the 'data' collection where the visibility distance value is greater than or equal to 10,000, grouping the results by the street (st) value."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $group: { _id: ""$wind.type"", averageWindSpeed: { $avg: ""$wind.speed.rate"" } } }, { $sort: { averageWindSpeed: -1 } } ]); ","""Group the documents in the 'data' collection by the type of wind, calculating the average wind speed for each type, and sort the results in descending order based on the average wind speed."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $lookup: { from: ""data"", let: { callLetter: ""$callLetters"" }, pipeline: [ { $match: { $expr: { $eq: [""$callLetters"", ""$$callLetter""] } } }, { $group: { _id: null, avgTemperature: { $avg: ""$airTemperature.value"" } } } ], as: ""temperatureInfo"" } }, { $unwind: ""$temperatureInfo"" }, { $project: { st: 1, avgTemperature: ""$temperatureInfo.avgTemperature"" } } ]); ","""Retrieve the state identifier from the 'data' collection along with the average air temperature from the same collection, where the average is calculated for entries that have the same call letters, and ensure that the average temperature information is included as a separate field."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $group: { _id: ""$callLetters"", latestTimestamp: { $max: ""$ts"" } } }, { $lookup: { from: ""data"", localField: ""latestTimestamp"", foreignField: ""ts"", as: ""latestData"" } } ]); ","""Group the documents from the 'data' collection by 'callLetters', retrieving the latest timestamp for each 'callLetters', and then join this grouped data with the 'data' collection to include the corresponding documents that have the latest timestamp."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $match: { ""atmosphericPressureObservation.altimeterSetting.value"": { $lt: 1000 } } }, { $project: { st: 1, altimeterQuality: ""$atmosphericPressureObservation.altimeterSetting.quality"" } } ]); ","""Retrieve the documents from the 'data' collection where the value of 'altimeterSetting' in the 'atmosphericPressureObservation' is less than 1000, and project the 'st' field along with the 'quality' of the 'altimeterSetting' from the 'atmosphericPressureObservation'."""
sample_weatherdata,"// collection: data
{
	""_id"": ""Object (primaryKey)"",
	""st"": ""string"",
	""ts"": ""Date"",
	""position"": { ""type"": ""string"", ""coordinates"": ""Array"" },
	""elevation"": ""number"",
	""callLetters"": ""string"",
	""qualityControlProcess"": ""string"",
	""dataSource"": ""string"",
	""type"": ""string"",
	""airTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""dewPoint"": { ""value"": ""number"", ""quality"": ""string"" },
	""pressure"": { ""value"": ""number"", ""quality"": ""string"" },
	""wind"": { 
		""direction"": { ""angle"": ""number"", ""quality"": ""string"" },
		""type"": ""string"", 
		""speed"": { ""rate"": ""number"", ""quality"": ""string"" }
	},
	""visibility"": { 
		""distance"": { ""value"": ""number"", ""quality"": ""string"" }, 
		""variability"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCondition"": {
		""ceilingHeight"": { ""value"": ""number"", ""quality"": ""string"", ""determination"": ""string"" },
		""cavok"": ""string""
	},
	""sections"": ""Array"",
	""precipitationEstimatedObservation"": { 
		""discrepancy"": ""string"", 
		""estimatedWaterDepth"": ""number"" 
	},
	""atmosphericPressureChange"": { 
		""tendency"": { ""code"": ""string"", ""quality"": ""string"" },
		""quantity3Hours"": { ""value"": ""number"", ""quality"": ""string"" },
		""quantity24Hours"": { ""value"": ""number"", ""quality"": ""string"" }
	},
	""pastWeatherObservationManual"": ""Array"",
	""skyConditionObservation"": {
		""totalCoverage"": { ""value"": ""string"", ""opaque"": ""string"", ""quality"": ""string"" },
		""lowestCloudCoverage"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""lowestCloudBaseHeight"": { ""value"": ""number"", ""quality"": ""string"" },
		""midCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" },
		""highCloudGenus"": { ""value"": ""string"", ""quality"": ""string"" }
	},
	""skyCoverLayer"": ""Array"",
	""seaSurfaceTemperature"": { ""value"": ""number"", ""quality"": ""string"" },
	""waveMeasurement"": {
		""method"": ""string"",
		""waves"": { ""period"": ""number"", ""height"": ""number"", ""quality"": ""string"" },
		""seaState"": { ""code"": ""string"", ""quality"": ""string"" }
	},
	""presentWeatherObservationManual"": ""Array"",
	""atmosphericPressureObservation"": {
		""altimeterSetting"": { ""value"": ""number"", ""quality"": ""string"" },
		""stationPressure"": { ""value"": ""number"", ""quality"": ""string"" }
	}
}
"," 
db.data.aggregate([ { $group: { _id: ""$qualityControlProcess"", count: { $sum: 1 }, avgElevation: { $avg: ""$elevation"" } } } ]);","""Group the documents from the 'data' collection by the 'qualityControlProcess' field, calculating the total count of documents for each quality control process and the average elevation for each group."""
